# Phase 2: Data Factory - Curation Tooling
# Index: [4]
#
# This module is responsible for identifying the specific telemetry (log events)
# generated by the execution of a single primitive command. It does this by
# comparing a "before" and "after" snapshot of logs from the lab environment.
#
# REQUIREMENTS (per v1.3 blueprint):
# 1. Must contain a primary function, e.g., `get_delta_logs`.
# 2. This function should take two lists of log events (dictionaries) as input: `before_logs` and `after_logs`.
# 3. It must return a new list of log events (`delta_logs`) that are present in `after_logs` but NOT in `before_logs`.
# 4. The comparison must be robust enough to handle logs as dictionary objects. A simple set difference on raw strings is insufficient.

def get_delta_logs(before_logs: list[dict], after_logs: list[dict]) -> list[dict]:
    """
    Compares two lists of log events and returns the difference.

    This function performs a "set difference" operation on lists of dictionaries.
    It identifies which log events in the `after_logs` list are new compared to
    the `before_logs` list.

    Args:
        before_logs: A list of dictionaries, each representing a log event captured before command execution.
        after_logs: A list of dictionaries, each representing a log event captured after command execution.

    Returns:
        A list of dictionaries representing the new log events (the delta).
    """
    # To perform a robust difference, we need a way to uniquely identify each log.
    # We can convert each dictionary into a hashable type (like a tuple of its items)
    # to create a set for efficient lookup.
    
    # TODO: Implement the logic.
    # 1. Create a set of "seen" logs from the `before_logs` list.
    #    - A helper function to create a unique, hashable representation of a log dict will be needed.
    # 2. Iterate through `after_logs`.
    # 3. For each log in `after_logs`, check if its representation is in the "seen" set.
    # 4. If it's not in the set, add it to a `delta_logs` list.
    # 5. Return `delta_logs`.

    # Example hashable representation:
    # frozenset(log.items()) can work if dictionary values are primitives.
    # More complex logs may require a more specific tuple of key values.

    # Dummy implementation for structure
    seen_logs = {frozenset(log.items()) for log in before_logs}
    delta_logs = []
    for log in after_logs:
        if frozenset(log.items()) not in seen_logs:
            delta_logs.append(log)
    
    return delta_logs