# Phase 2: Data Factory - Curation Tooling
# Index: [4]
#
# This module is responsible for identifying the specific telemetry (log events)
# generated by the execution of a single primitive command. It does this by
# comparing a "before" and "after" snapshot of logs from the lab environment.
#
# REQUIREMENTS (Pydantic-aware):
# 1. Must contain a primary function, e.g., `get_delta_logs`.
# 2. This function must take two lists of Pydantic `SplunkLogEvent` models as input.
# 3. It must return a new list of `SplunkLogEvent` models that are present in `after_logs` but NOT in `before_logs`.
# 4. The comparison will be based on the `_raw` field of the log, which is the most reliable unique identifier.

from typing import List
from powershell_sentinel.models import SplunkLogEvent

def get_delta_logs(before_logs: List[SplunkLogEvent], after_logs: List[SplunkLogEvent]) -> List[SplunkLogEvent]:
    """
    Compares two lists of SplunkLogEvent objects and returns the difference.

    This function performs a "set difference" operation. It identifies which log
    events in the `after_logs` list are new compared to the `before_logs` list
    by comparing their raw string representations.

    Args:
        before_logs: A list of SplunkLogEvent models captured before command execution.
        after_logs: A list of SplunkLogEvent models captured after command execution.

    Returns:
        A list of SplunkLogEvent models representing the new log events (the delta).
    """

    seen_raw_logs = {log.raw for log in before_logs}
    delta_logs = [log for log in after_logs if log.raw not in seen_raw_logs]

    return delta_logs