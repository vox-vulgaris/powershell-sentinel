{
  "PS-001": [
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4104,
      "details": "$global:?"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command hostname"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4104,
      "details": "hostname"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 40962,
      "details": "PowerShell console is ready for user input"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 53504,
      "details": "Windows PowerShell has started an IPC listening thread on process: 1100 in AppDomain: DefaultAppDomain."
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 40961,
      "details": "PowerShell console is starting up"
    }
  ],
  "PS-003": [
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4104,
      "details": "$global:?"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-Command Get-Process"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-Command Get-Process"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4104,
      "details": "Get-Command Get-Process"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 40962,
      "details": "PowerShell console is ready for user input"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 53504,
      "details": "Windows PowerShell has started an IPC listening thread on process: 3912 in AppDomain: DefaultAppDomain."
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 40961,
      "details": "PowerShell console is starting up"
    }
  ],
  "PS-004": [
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4104,
      "details": "$global:?"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-Module"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-Module"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4104,
      "details": "Get-Module"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 40962,
      "details": "PowerShell console is ready for user input"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 53504,
      "details": "Windows PowerShell has started an IPC listening thread on process: 2472 in AppDomain: DefaultAppDomain."
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 40961,
      "details": "PowerShell console is starting up"
    }
  ],
  "PS-005": [
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4104,
      "details": "$global:?"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-ChildItem Env:"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-ChildItem Env:"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4104,
      "details": "Get-ChildItem Env:"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 40962,
      "details": "PowerShell console is ready for user input"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 53504,
      "details": "Windows PowerShell has started an IPC listening thread on process: 7748 in AppDomain: DefaultAppDomain."
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 40961,
      "details": "PowerShell console is starting up"
    }
  ],
  "PS-006": [
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4104,
      "details": "$global:?"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command dir C:\\Windows"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command dir C:\\Windows"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4104,
      "details": "dir C:\\Windows"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 40962,
      "details": "PowerShell console is ready for user input"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 53504,
      "details": "Windows PowerShell has started an IPC listening thread on process: 7760 in AppDomain: DefaultAppDomain."
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 40961,
      "details": "PowerShell console is starting up"
    }
  ],
  "PS-007": [
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4104,
      "details": "$global:?"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command tree /F C:\\Windows\\System32\\drivers\\etc"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4104,
      "details": "tree /F C:\\Windows\\System32\\drivers\\etc"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 40962,
      "details": "PowerShell console is ready for user input"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 53504,
      "details": "Windows PowerShell has started an IPC listening thread on process: 7312 in AppDomain: DefaultAppDomain."
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 40961,
      "details": "PowerShell console is starting up"
    }
  ],
  "PS-008": [
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4104,
      "details": "$global:?"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-Content C:\\Windows\\System32\\drivers\\etc\\hosts"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-Content C:\\Windows\\System32\\drivers\\etc\\hosts"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4104,
      "details": "Get-Content C:\\Windows\\System32\\drivers\\etc\\hosts"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 40962,
      "details": "PowerShell console is ready for user input"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 53504,
      "details": "Windows PowerShell has started an IPC listening thread on process: 3944 in AppDomain: DefaultAppDomain."
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 40961,
      "details": "PowerShell console is starting up"
    }
  ],
  "PS-009": [
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4104,
      "details": "$global:?"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command whoami"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4104,
      "details": "whoami"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 40962,
      "details": "PowerShell console is ready for user input"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 53504,
      "details": "Windows PowerShell has started an IPC listening thread on process: 6636 in AppDomain: DefaultAppDomain."
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 40961,
      "details": "PowerShell console is starting up"
    }
  ],
  "PS-010": [
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4104,
      "details": "$global:?"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command whoami /priv"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4104,
      "details": "whoami /priv"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 40962,
      "details": "PowerShell console is ready for user input"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 53504,
      "details": "Windows PowerShell has started an IPC listening thread on process: 8184 in AppDomain: DefaultAppDomain."
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 40961,
      "details": "PowerShell console is starting up"
    }
  ],
  "PS-011": [
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4104,
      "details": "$global:?"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command whoami /groups"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4104,
      "details": "whoami /groups"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 40962,
      "details": "PowerShell console is ready for user input"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 53504,
      "details": "Windows PowerShell has started an IPC listening thread on process: 7204 in AppDomain: DefaultAppDomain."
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 40961,
      "details": "PowerShell console is starting up"
    }
  ],
  "PS-012": [
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4104,
      "details": "$global:?"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command net user"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4104,
      "details": "net user"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 40962,
      "details": "PowerShell console is ready for user input"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 53504,
      "details": "Windows PowerShell has started an IPC listening thread on process: 1660 in AppDomain: DefaultAppDomain."
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 40961,
      "details": "PowerShell console is starting up"
    }
  ],
  "PS-013": [
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4104,
      "details": "$global:?"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command net localgroup"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4104,
      "details": "net localgroup"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 40962,
      "details": "PowerShell console is ready for user input"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 53504,
      "details": "Windows PowerShell has started an IPC listening thread on process: 4276 in AppDomain: DefaultAppDomain."
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 40961,
      "details": "PowerShell console is starting up"
    }
  ],
  "PS-014": [
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4104,
      "details": "$global:?"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-LocalUser"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-LocalUser"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-LocalUser"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-LocalUser"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4104,
      "details": "Get-LocalUser"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 40962,
      "details": "PowerShell console is ready for user input"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 53504,
      "details": "Windows PowerShell has started an IPC listening thread on process: 5028 in AppDomain: DefaultAppDomain."
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 40961,
      "details": "PowerShell console is starting up"
    }
  ],
  "PS-015": [
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4104,
      "details": "$global:?"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-LocalGroup"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-LocalGroup"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-LocalGroup"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-LocalGroup"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4104,
      "details": "Get-LocalGroup"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 40962,
      "details": "PowerShell console is ready for user input"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 53504,
      "details": "Windows PowerShell has started an IPC listening thread on process: 4916 in AppDomain: DefaultAppDomain."
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 40961,
      "details": "PowerShell console is starting up"
    }
  ],
  "PS-016": [
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4104,
      "details": "$global:?"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-LocalGroupMember -Group Administrators"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-LocalGroupMember -Group Administrators"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-LocalGroupMember -Group Administrators"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-LocalGroupMember -Group Administrators"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4104,
      "details": "Get-LocalGroupMember -Group Administrators"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 40962,
      "details": "PowerShell console is ready for user input"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 53504,
      "details": "Windows PowerShell has started an IPC listening thread on process: 892 in AppDomain: DefaultAppDomain."
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 40961,
      "details": "PowerShell console is starting up"
    }
  ],
  "PS-017": [
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4104,
      "details": "$global:?"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command ipconfig /all"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4104,
      "details": "ipconfig /all"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 40962,
      "details": "PowerShell console is ready for user input"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 53504,
      "details": "Windows PowerShell has started an IPC listening thread on process: 5492 in AppDomain: DefaultAppDomain."
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 40961,
      "details": "PowerShell console is starting up"
    }
  ],
  "PS-018": [
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4104,
      "details": "$global:?"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command arp -a"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4104,
      "details": "arp -a"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 40962,
      "details": "PowerShell console is ready for user input"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 53504,
      "details": "Windows PowerShell has started an IPC listening thread on process: 436 in AppDomain: DefaultAppDomain."
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 40961,
      "details": "PowerShell console is starting up"
    }
  ],
  "PS-019": [
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4104,
      "details": "$global:?"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command netstat -an"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4104,
      "details": "netstat -an"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 40962,
      "details": "PowerShell console is ready for user input"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 53504,
      "details": "Windows PowerShell has started an IPC listening thread on process: 3936 in AppDomain: DefaultAppDomain."
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 40961,
      "details": "PowerShell console is starting up"
    }
  ],
  "PS-020": [
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4104,
      "details": "$global:?"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command nslookup www.google.com"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4104,
      "details": "nslookup www.google.com"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 40962,
      "details": "PowerShell console is ready for user input"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 53504,
      "details": "Windows PowerShell has started an IPC listening thread on process: 4188 in AppDomain: DefaultAppDomain."
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 40961,
      "details": "PowerShell console is starting up"
    }
  ],
  "PS-021": [
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4104,
      "details": "$global:?"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command net share"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4104,
      "details": "net share"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 40962,
      "details": "PowerShell console is ready for user input"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 53504,
      "details": "Windows PowerShell has started an IPC listening thread on process: 2968 in AppDomain: DefaultAppDomain."
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 40961,
      "details": "PowerShell console is starting up"
    }
  ],
  "PS-022": [
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4104,
      "details": "$global:?"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-NetIPAddress"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-NetIPAddress"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4104,
      "details": "function __cmdletization_BindCommonParameters\n{\n    param(\n        $__cmdletization_objectModelWrapper,\n        $myPSBoundParameters\n    )       \n                \n\n        if ($myPSBoundParameters.ContainsKey('CimSession')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('AsJob')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] \n        }\n                    \n\n}"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-NetIPAddress"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-NetIPAddress"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-NetIPAddress"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-NetIPAddress"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-NetIPAddress"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-NetIPAddress"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-NetIPAddress"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-NetIPAddress"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4104,
      "details": "#requires -version 3.0\n\ntry { Microsoft.PowerShell.Core\\Set-StrictMode -Off } catch { }\n\n$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module\n\n$script:ClassName = 'ROOT/StandardCimv2/MSFT_NetUDPSetting'\n$script:ClassVersion = '1.0.0'\n$script:ModuleVersion = '1.0.0'\n$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]\n\n$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()\n\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function @()\n        \n\nfunction __cmdletization_BindCommonParameters\n{\n    param(\n        $__cmdletization_objectModelWrapper,\n        $myPSBoundParameters\n    )       \n                \n\n        if ($myPSBoundParameters.ContainsKey('CimSession')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('AsJob')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] \n        }\n                    \n\n}\n                \n\nfunction Get-NetUDPSetting\n{\n    [CmdletBinding(DefaultParameterSetName='ByName', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/StandardCimv2/MSFT_NetUDPSetting')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByName', Position=0)]\n    [ValidateNotNull()]\n    [uint16[]]\n    ${DynamicPortRangeStartPort},\n\n    [Parameter(ParameterSetName='ByName', Position=1)]\n    [ValidateNotNull()]\n    [uint16[]]\n    ${DynamicPortRangeNumberOfPorts},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [switch]\n    ${AsJob})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('DynamicPortRangeStartPort') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DynamicPortRangeStartPort})\n        $__cmdletization_queryBuilder.FilterByProperty('DynamicPortRangeStartPort', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DynamicPortRangeNumberOfPorts') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DynamicPortRangeNumberOfPorts})\n        $__cmdletization_queryBuilder.FilterByProperty('DynamicPortRangeNumberOfPorts', $__cmdletization_values, $false, 'Default')\n    }\n\n\n    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP MSFT_NetUDPSetting.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Get-NetUDPSetting' -Alias '*'\n        \n\nfunction Set-NetUDPSetting\n{\n    [CmdletBinding(DefaultParameterSetName='InputObject (cdxml)', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/StandardCimv2/MSFT_NetUDPSetting')]\n\n    param(\n    \n    [Parameter(ParameterSetName='InputObject (cdxml)', ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetUDPSetting')]\n    [ValidateNotNull()]\n    [ciminstance[]]\n    ${InputObject},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [uint16]\n    ${DynamicPortRangeStartPort},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [uint16]\n    ${DynamicPortRangeNumberOfPorts},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${AsJob},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${PassThru})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n\n\n    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n    switch -exact ($PSCmdlet.ParameterSetName) { \n        { @('InputObject (cdxml)') -contains $_ } {\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('DynamicPortRangeStartPort')) {\n            [object]$__cmdletization_value = ${DynamicPortRangeStartPort}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DynamicPortRangeStartPort'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DynamicPortRangeStartPort'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('DynamicPortRangeNumberOfPorts')) {\n            [object]$__cmdletization_value = ${DynamicPortRangeNumberOfPorts}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DynamicPortRangeNumberOfPorts'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DynamicPortRangeNumberOfPorts'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n      $__cmdletization_returnValue = $null\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:ModifyInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru\n            if ($PSBoundParameters.ContainsKey('InputObject')) {\n                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }\n            } else {\n                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)\n            }\n        }\n    }\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP MSFT_NetUDPSetting.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Set-NetUDPSetting' -Alias '*'"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-NetIPAddress"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-NetIPAddress"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-NetIPAddress"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4104,
      "details": "#requires -version 3.0\n\ntry { Microsoft.PowerShell.Core\\Set-StrictMode -Off } catch { }\n\n$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module\n\n$script:ClassName = 'ROOT/StandardCimv2/MSFT_NetUDPEndpoint'\n$script:ClassVersion = '1.0.0'\n$script:ModuleVersion = '1.0.0'\n$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]\n\n$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()\n\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function @()\n        \n\nfunction __cmdletization_BindCommonParameters\n{\n    param(\n        $__cmdletization_objectModelWrapper,\n        $myPSBoundParameters\n    )       \n                \n\n        if ($myPSBoundParameters.ContainsKey('CimSession')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('AsJob')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] \n        }\n                    \n\n}\n                \n\nfunction Get-NetUDPEndpoint\n{\n    [CmdletBinding(DefaultParameterSetName='ByName', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/StandardCimv2/MSFT_NetUDPEndpoint')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByName', Position=0, ValueFromPipelineByPropertyName=$true)]\n    [Alias('IPAddress')]\n    [ValidateNotNull()]\n    [string[]]\n    ${LocalAddress},\n\n    [Parameter(ParameterSetName='ByName', Position=1)]\n    [ValidateNotNull()]\n    [uint16[]]\n    ${LocalPort},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${OwningProcess},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [datetime[]]\n    ${CreationTime},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [switch]\n    ${AsJob})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('LocalAddress') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${LocalAddress})\n        $__cmdletization_queryBuilder.FilterByProperty('LocalAddress', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('LocalPort') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${LocalPort})\n        $__cmdletization_queryBuilder.FilterByProperty('LocalPort', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('OwningProcess') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${OwningProcess})\n        $__cmdletization_queryBuilder.FilterByProperty('OwningProcess', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('CreationTime') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${CreationTime})\n        $__cmdletization_queryBuilder.FilterByProperty('CreationTime', $__cmdletization_values, $false, 'Default')\n    }\n\n\n    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP MSFT_NetUDPEndpoint.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Get-NetUDPEndpoint' -Alias '*'"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-NetIPAddress"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-NetIPAddress"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-NetIPAddress"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-NetIPAddress"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-NetIPAddress"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4104,
      "details": "ization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('SettingName') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${SettingName})\n        $__cmdletization_queryBuilder.FilterByProperty('SettingName', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Protocol') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Protocol})\n        $__cmdletization_queryBuilder.FilterByProperty('Protocol', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('LocalPortStart') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${LocalPortStart})\n        $__cmdletization_queryBuilder.FilterByProperty('LocalPortStart', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('LocalPortEnd') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${LocalPortEnd})\n        $__cmdletization_queryBuilder.FilterByProperty('LocalPortEnd', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('RemotePortStart') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${RemotePortStart})\n        $__cmdletization_queryBuilder.FilterByProperty('RemotePortStart', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('RemotePortEnd') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${RemotePortEnd})\n        $__cmdletization_queryBuilder.FilterByProperty('RemotePortEnd', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DestinationPrefix') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DestinationPrefix})\n        $__cmdletization_queryBuilder.FilterByProperty('DestinationPrefix', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedTCPSetting') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedTCPSetting}, 'MSFT_NetTransportFilterTCPSetting', 'Dependent', 'Antecedent', 'Default')\n    }\n\n\n    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP MSFT_NetTransportFilter.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Get-NetTransportFilter' -Alias '*'\n        \n\nfunction Remove-NetTransportFilter\n{\n    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='High', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/StandardCimv2/MSFT_NetTransportFilter')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [string[]]\n    ${SettingName},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTransportFilter.Protocol[]]\n    ${Protocol},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [uint16[]]\n    ${LocalPortStart},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [uint16[]]\n    ${LocalPortEnd},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [uint16[]]\n    ${RemotePortStart},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [uint16[]]\n    ${RemotePortEnd},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [string[]]\n    ${DestinationPrefix},\n\n    [Parameter(ParameterSetName='ByName', ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetTCPSetting')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedTCPSetting},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetTransportFilter')]\n    [ValidateNotNull()]\n    [ciminstance[]]\n    ${InputObject},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${AsJob},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${PassThru})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('SettingName') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${SettingName})\n        $__cmdletization_queryBuilder.FilterByProperty('SettingName', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Protocol') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Protocol})\n        $__cmdletization_queryBuilder.FilterByProperty('Protocol', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('LocalPortStart') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${LocalPortStart})\n        $__cmdletization_queryBuilder.FilterByProperty('LocalPortStart', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('LocalPortEnd') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${LocalPortEnd})\n        $__cmdletization_queryBuilder.FilterByProperty('LocalPortEnd', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('RemotePortStart') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${RemotePortStart})\n        $__cmdletization_queryBuilder.FilterByProperty('RemotePortStart', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('RemotePortEnd') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${RemotePortEnd})\n        $__cmdletization_queryBuilder.FilterByProperty('RemotePortEnd', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DestinationPrefix') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DestinationPrefix})\n        $__cmdletization_queryBuilder.FilterByProperty('DestinationPrefix', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedTCPSetting') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedTCPSetting}, 'MSFT_NetTransportFilterTCPSetting', 'Dependent', 'Antecedent', 'Default')\n    }\n\n\n    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n    switch -exact ($PSCmdlet.ParameterSetName) { \n        { @('ByName', 'InputObject (cdxml)') -contains $_ } {\n      $__cmdletization_returnValue = $null\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:DeleteInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru\n            if ($PSBoundParameters.ContainsKey('InputObject')) {\n                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }\n            } else {\n                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)\n            }\n        }\n    }\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP MSFT_NetTransportFilter.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Remove-NetTransportFilter' -Alias '*'"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4104,
      "details": "#requires -version 3.0\n\ntry { Microsoft.PowerShell.Core\\Set-StrictMode -Off } catch { }\n\n$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module\n\n$script:ClassName = 'ROOT/StandardCimv2/MSFT_NetTransportFilter'\n$script:ClassVersion = '1.0.0'\n$script:ModuleVersion = '1.0.0'\n$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]\n\n$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()\n\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function @()\n        \n\nfunction __cmdletization_BindCommonParameters\n{\n    param(\n        $__cmdletization_objectModelWrapper,\n        $myPSBoundParameters\n    )       \n                \n\n        if ($myPSBoundParameters.ContainsKey('CimSession')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('AsJob')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] \n        }\n                    \n\n}\n                \n\nfunction New-NetTransportFilter\n{\n    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]\n    \n    \n    param(\n    \n    [Parameter(ParameterSetName='cim:CreateInstance0', Mandatory=$true)]\n    [string]\n    ${SettingName},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTransportFilter.Protocol]\n    ${Protocol},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [uint16]\n    ${LocalPortStart},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [uint16]\n    ${LocalPortEnd},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [uint16]\n    ${RemotePortStart},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [uint16]\n    ${RemotePortEnd},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [string]\n    ${DestinationPrefix},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [switch]\n    ${AsJob})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n      $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('SettingName')) {\n          [object]$__cmdletization_value = ${SettingName}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SettingName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SettingName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('Protocol')) {\n          [object]$__cmdletization_value = ${Protocol}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Protocol'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTransportFilter.Protocol'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Protocol'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTransportFilter.Protocol'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('LocalPortStart')) {\n          [object]$__cmdletization_value = ${LocalPortStart}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LocalPortStart'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LocalPortStart'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('LocalPortEnd')) {\n          [object]$__cmdletization_value = ${LocalPortEnd}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LocalPortEnd'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LocalPortEnd'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('RemotePortStart')) {\n          [object]$__cmdletization_value = ${RemotePortStart}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemotePortStart'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemotePortStart'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('RemotePortEnd')) {\n          [object]$__cmdletization_value = ${RemotePortEnd}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemotePortEnd'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemotePortEnd'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('DestinationPrefix')) {\n          [object]$__cmdletization_value = ${DestinationPrefix}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DestinationPrefix'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DestinationPrefix'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:CreateInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo)\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP MSFT_NetTransportFilter.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'New-NetTransportFilter' -Alias '*'\n        \n\nfunction Get-NetTransportFilter\n{\n    [CmdletBinding(PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/StandardCimv2/MSFT_NetTransportFilter')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [string[]]\n    ${SettingName},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTransportFilter.Protocol[]]\n    ${Protocol},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [uint16[]]\n    ${LocalPortStart},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [uint16[]]\n    ${LocalPortEnd},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [uint16[]]\n    ${RemotePortStart},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [uint16[]]\n    ${RemotePortEnd},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [string[]]\n    ${DestinationPrefix},\n\n    [Parameter(ParameterSetName='ByName', ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetTCPSetting')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedTCPSetting},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [switch]\n    ${AsJob})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdlet"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-NetIPAddress"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-NetIPAddress"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-NetIPAddress"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-NetIPAddress"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4104,
      "details": "Value = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('EcnCapability')) {\n            [object]$__cmdletization_value = ${EcnCapability}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EcnCapability'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.EcnCapability'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EcnCapability'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.EcnCapability'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('Timestamps')) {\n            [object]$__cmdletization_value = ${Timestamps}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Timestamps'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.Timestamps'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Timestamps'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.Timestamps'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('InitialRtoMs')) {\n            [object]$__cmdletization_value = ${InitialRtoMs}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InitialRto'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InitialRto'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('ScalingHeuristics')) {\n            [object]$__cmdletization_value = ${ScalingHeuristics}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScalingHeuristics'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.ScalingHeuristics'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScalingHeuristics'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.ScalingHeuristics'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('DynamicPortRangeStartPort')) {\n            [object]$__cmdletization_value = ${DynamicPortRangeStartPort}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DynamicPortRangeStartPort'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DynamicPortRangeStartPort'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('DynamicPortRangeNumberOfPorts')) {\n            [object]$__cmdletization_value = ${DynamicPortRangeNumberOfPorts}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DynamicPortRangeNumberOfPorts'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DynamicPortRangeNumberOfPorts'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('AutomaticUseCustom')) {\n            [object]$__cmdletization_value = ${AutomaticUseCustom}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AutomaticUseCustom'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.AutomaticUseCustom'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AutomaticUseCustom'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.AutomaticUseCustom'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('NonSackRttResiliency')) {\n            [object]$__cmdletization_value = ${NonSackRttResiliency}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NonSackRttResiliency'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.NonSackRttResiliency'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NonSackRttResiliency'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.NonSackRttResiliency'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('ForceWS')) {\n            [object]$__cmdletization_value = ${ForceWS}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ForceWS'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.ForceWS'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ForceWS'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.ForceWS'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('MaxSynRetransmissions')) {\n            [object]$__cmdletization_value = ${MaxSynRetransmissions}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MaxSynRetransmissions'; ParameterType = 'System.Byte'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MaxSynRetransmissions'; ParameterType = 'System.Byte'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('AutoReusePortRangeStartPort')) {\n            [object]$__cmdletization_value = ${AutoReusePortRangeStartPort}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AutoReusePortRangeStartPort'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AutoReusePortRangeStartPort'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('AutoReusePortRangeNumberOfPorts')) {\n            [object]$__cmdletization_value = ${AutoReusePortRangeNumberOfPorts}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AutoReusePortRangeNumberOfPorts'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AutoReusePortRangeNumberOfPorts'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n      $__cmdletization_returnValue = $null\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:ModifyInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru\n            if ($PSBoundParameters.ContainsKey('InputObject')) {\n                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }\n            } else {\n                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)\n            }\n        }\n    }\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP MSFT_NetTCPSetting.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Set-NetTCPSetting' -Alias '*'"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4104,
      "details": "if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP MSFT_NetTCPSetting.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Get-NetTCPSetting' -Alias '*'\n        \n\nfunction Set-NetTCPSetting\n{\n    [CmdletBinding(DefaultParameterSetName='ByName', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/StandardCimv2/MSFT_NetTCPSetting')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByName', Position=0)]\n    [ValidateNotNull()]\n    [string[]]\n    ${SettingName},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetTCPSetting')]\n    [ValidateNotNull()]\n    [ciminstance[]]\n    ${InputObject},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('MinRto')]\n    [uint32]\n    ${MinRtoMs},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('InitialCongestionWindow')]\n    [uint32]\n    ${InitialCongestionWindowMss},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.CongestionProvider]\n    ${CongestionProvider},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.CwndRestart]\n    ${CwndRestart},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('DelayedAckTimeout')]\n    [uint32]\n    ${DelayedAckTimeoutMs},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [byte]\n    ${DelayedAckFrequency},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.MemoryPressureProtection]\n    ${MemoryPressureProtection},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.AutoTuningLevelLocal]\n    ${AutoTuningLevelLocal},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.EcnCapability]\n    ${EcnCapability},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.Timestamps]\n    ${Timestamps},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('InitialRto')]\n    [uint32]\n    ${InitialRtoMs},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.ScalingHeuristics]\n    ${ScalingHeuristics},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [uint16]\n    ${DynamicPortRangeStartPort},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [uint16]\n    ${DynamicPortRangeNumberOfPorts},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.AutomaticUseCustom]\n    ${AutomaticUseCustom},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.NonSackRttResiliency]\n    ${NonSackRttResiliency},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.ForceWS]\n    ${ForceWS},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [byte]\n    ${MaxSynRetransmissions},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [uint16]\n    ${AutoReusePortRangeStartPort},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [uint16]\n    ${AutoReusePortRangeNumberOfPorts},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${AsJob},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${PassThru})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('SettingName') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${SettingName})\n        $__cmdletization_queryBuilder.FilterByProperty('SettingName', $__cmdletization_values, $true, 'Default')\n    }\n\n\n    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n    switch -exact ($PSCmdlet.ParameterSetName) { \n        { @('ByName', 'InputObject (cdxml)') -contains $_ } {\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('MinRtoMs')) {\n            [object]$__cmdletization_value = ${MinRtoMs}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MinRto'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MinRto'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('InitialCongestionWindowMss')) {\n            [object]$__cmdletization_value = ${InitialCongestionWindowMss}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InitialCongestionWindow'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InitialCongestionWindow'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('CongestionProvider')) {\n            [object]$__cmdletization_value = ${CongestionProvider}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'CongestionProvider'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.CongestionProvider'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'CongestionProvider'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.CongestionProvider'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('CwndRestart')) {\n            [object]$__cmdletization_value = ${CwndRestart}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'CwndRestart'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.CwndRestart'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'CwndRestart'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.CwndRestart'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('DelayedAckTimeoutMs')) {\n            [object]$__cmdletization_value = ${DelayedAckTimeoutMs}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DelayedAckTimeout'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DelayedAckTimeout'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('DelayedAckFrequency')) {\n            [object]$__cmdletization_value = ${DelayedAckFrequency}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DelayedAckFrequency'; ParameterType = 'System.Byte'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DelayedAckFrequency'; ParameterType = 'System.Byte'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('MemoryPressureProtection')) {\n            [object]$__cmdletization_value = ${MemoryPressureProtection}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MemoryPressureProtection'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.MemoryPressureProtection'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MemoryPressureProtection'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.MemoryPressureProtection'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('AutoTuningLevelLocal')) {\n            [object]$__cmdletization_value = ${AutoTuningLevelLocal}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AutoTuningLevelLocal'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.AutoTuningLevelLocal'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AutoTuningLevelLocal'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.AutoTuningLevelLocal'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_default"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4104,
      "details": "#requires -version 3.0\n\ntry { Microsoft.PowerShell.Core\\Set-StrictMode -Off } catch { }\n\n$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module\n\n$script:ClassName = 'ROOT/StandardCimv2/MSFT_NetTCPSetting'\n$script:ClassVersion = '1.0.0'\n$script:ModuleVersion = '1.0.0'\n$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]\n\n$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()\n\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function @()\n        \n\nfunction __cmdletization_BindCommonParameters\n{\n    param(\n        $__cmdletization_objectModelWrapper,\n        $myPSBoundParameters\n    )       \n                \n\n        if ($myPSBoundParameters.ContainsKey('CimSession')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('AsJob')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] \n        }\n                    \n\n}\n                \n\nfunction Get-NetTCPSetting\n{\n    [CmdletBinding(DefaultParameterSetName='ByName', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/StandardCimv2/MSFT_NetTCPSetting')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByName', Position=0)]\n    [ValidateNotNull()]\n    [string[]]\n    ${SettingName},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Alias('MinRto')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${MinRtoMs},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Alias('InitialCongestionWindow')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${InitialCongestionWindowMss},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.CongestionProvider[]]\n    ${CongestionProvider},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.CwndRestart[]]\n    ${CwndRestart},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Alias('DelayedAckTimeout')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${DelayedAckTimeoutMs},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [byte[]]\n    ${DelayedAckFrequency},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.MemoryPressureProtection[]]\n    ${MemoryPressureProtection},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.AutoTuningLevelLocal[]]\n    ${AutoTuningLevelLocal},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.AutoTuningLevelGroupPolicy[]]\n    ${AutoTuningLevelGroupPolicy},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.AutoTuningLevelEffective[]]\n    ${AutoTuningLevelEffective},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.EcnCapability[]]\n    ${EcnCapability},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.Timestamps[]]\n    ${Timestamps},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Alias('InitialRto')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${InitialRtoMs},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.ScalingHeuristics[]]\n    ${ScalingHeuristics},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [uint16[]]\n    ${DynamicPortRangeStartPort},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [uint16[]]\n    ${DynamicPortRangeNumberOfPorts},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.AutomaticUseCustom[]]\n    ${AutomaticUseCustom},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.NonSackRttResiliency[]]\n    ${NonSackRttResiliency},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.ForceWS[]]\n    ${ForceWS},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [byte[]]\n    ${MaxSynRetransmissions},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [uint16[]]\n    ${AutoReusePortRangeStartPort},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [uint16[]]\n    ${AutoReusePortRangeNumberOfPorts},\n\n    [Parameter(ParameterSetName='ByName', ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetTransportFilter')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedTransportFilter},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [switch]\n    ${AsJob})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('SettingName') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${SettingName})\n        $__cmdletization_queryBuilder.FilterByProperty('SettingName', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('MinRtoMs') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${MinRtoMs})\n        $__cmdletization_queryBuilder.FilterByProperty('MinRto', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('InitialCongestionWindowMss') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${InitialCongestionWindowMss})\n        $__cmdletization_queryBuilder.FilterByProperty('InitialCongestionWindow', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('CongestionProvider') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${CongestionProvider})\n        $__cmdletization_queryBuilder.FilterByProperty('CongestionProvider', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('CwndRestart') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${CwndRestart})\n        $__cmdletization_queryBuilder.FilterByProperty('CwndRestart', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DelayedAckTimeoutMs') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DelayedAckTimeoutMs})\n        $__cmdletization_queryBuilder.FilterByProperty('DelayedAckTimeout', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DelayedAckFrequency') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DelayedAckFrequency})\n        $__cmdletization_queryBuilder.FilterByProperty('DelayedAckFrequency', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('MemoryPressureProtection') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${MemoryPressureProtection})\n        $__cmdletization_queryBuilder.FilterByProperty('MemoryPressureProtection', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AutoTuningLevelLocal') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${AutoTuningLevelLocal})\n        $__cmdletization_queryBuilder.FilterByProperty('AutoTuningLevelLocal', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AutoTuningLevelGroupPolicy') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${AutoTuningLevelGroupPolicy})\n        $__cmdletization_queryBuilder.FilterByProperty('AutoTuningLevelGroupPolicy', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AutoTuningLevelEffective') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${AutoTuningLevelEffective})\n        $__cmdletization_queryBuilder.FilterByProperty('AutoTuningLevelEffective', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('EcnCapability') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${EcnCapability})\n        $__cmdletization_queryBuilder.FilterByProperty('EcnCapability', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Timestamps') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Timestamps})\n        $__cmdletization_queryBuilder.FilterByProperty('Timestamps', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('InitialRtoMs') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${InitialRtoMs})\n        $__cmdletization_queryBuilder.FilterByProperty('InitialRto', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('ScalingHeuristics') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${ScalingHeuristics})\n        $__cmdletization_queryBuilder.FilterByProperty('ScalingHeuristics', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DynamicPortRangeStartPort') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DynamicPortRangeStartPort})\n        $__cmdletization_queryBuilder.FilterByProperty('DynamicPortRangeStartPort', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DynamicPortRangeNumberOfPorts') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DynamicPortRangeNumberOfPorts})\n        $__cmdletization_queryBuilder.FilterByProperty('DynamicPortRangeNumberOfPorts', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AutomaticUseCustom') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${AutomaticUseCustom})\n        $__cmdletization_queryBuilder.FilterByProperty('AutomaticUseCustom', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('NonSackRttResiliency') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${NonSackRttResiliency})\n        $__cmdletization_queryBuilder.FilterByProperty('NonSackRttResiliency', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('ForceWS') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${ForceWS})\n        $__cmdletization_queryBuilder.FilterByProperty('ForceWS', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('MaxSynRetransmissions') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${MaxSynRetransmissions})\n        $__cmdletization_queryBuilder.FilterByProperty('MaxSynRetransmissions', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AutoReusePortRangeStartPort') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${AutoReusePortRangeStartPort})\n        $__cmdletization_queryBuilder.FilterByProperty('AutoReusePortRangeStartPort', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AutoReusePortRangeNumberOfPorts') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${AutoReusePortRangeNumberOfPorts})\n        $__cmdletization_queryBuilder.FilterByProperty('AutoReusePortRangeNumberOfPorts', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedTransportFilter') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedTransportFilter}, 'MSFT_NetTransportFilterTCPSetting', 'Antecedent', 'Dependent', 'Default')\n    }\n\n\n    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-NetIPAddress"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-NetIPAddress"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-NetIPAddress"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4104,
      "details": "#requires -version 3.0\n\ntry { Microsoft.PowerShell.Core\\Set-StrictMode -Off } catch { }\n\n$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module\n\n$script:ClassName = 'ROOT/StandardCimv2/MSFT_NetTCPConnection'\n$script:ClassVersion = '1.0.0'\n$script:ModuleVersion = '1.0.0'\n$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]\n\n$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()\n\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function @()\n        \n\nfunction __cmdletization_BindCommonParameters\n{\n    param(\n        $__cmdletization_objectModelWrapper,\n        $myPSBoundParameters\n    )       \n                \n\n        if ($myPSBoundParameters.ContainsKey('CimSession')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('AsJob')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] \n        }\n                    \n\n}\n                \n\nfunction Get-NetTCPConnection\n{\n    [CmdletBinding(DefaultParameterSetName='ByName', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/StandardCimv2/MSFT_NetTCPConnection')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByName', Position=0, ValueFromPipelineByPropertyName=$true)]\n    [Alias('IPAddress')]\n    [ValidateNotNull()]\n    [string[]]\n    ${LocalAddress},\n\n    [Parameter(ParameterSetName='ByName', Position=1)]\n    [ValidateNotNull()]\n    [uint16[]]\n    ${LocalPort},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [string[]]\n    ${RemoteAddress},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [uint16[]]\n    ${RemotePort},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPConnection.State[]]\n    ${State},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPConnection.AppliedSetting[]]\n    ${AppliedSetting},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${OwningProcess},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [datetime[]]\n    ${CreationTime},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPConnection.OffloadState[]]\n    ${OffloadState},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [switch]\n    ${AsJob})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('LocalAddress') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${LocalAddress})\n        $__cmdletization_queryBuilder.FilterByProperty('LocalAddress', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('LocalPort') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${LocalPort})\n        $__cmdletization_queryBuilder.FilterByProperty('LocalPort', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('RemoteAddress') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${RemoteAddress})\n        $__cmdletization_queryBuilder.FilterByProperty('RemoteAddress', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('RemotePort') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${RemotePort})\n        $__cmdletization_queryBuilder.FilterByProperty('RemotePort', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('State') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${State})\n        $__cmdletization_queryBuilder.FilterByProperty('State', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AppliedSetting') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${AppliedSetting})\n        $__cmdletization_queryBuilder.FilterByProperty('AppliedSetting', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('OwningProcess') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${OwningProcess})\n        $__cmdletization_queryBuilder.FilterByProperty('OwningProcess', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('CreationTime') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${CreationTime})\n        $__cmdletization_queryBuilder.FilterByProperty('CreationTime', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('OffloadState') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${OffloadState})\n        $__cmdletization_queryBuilder.FilterByProperty('OffloadState', $__cmdletization_values, $false, 'Default')\n    }\n\n\n    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP MSFT_NetTCPConnection.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Get-NetTCPConnection' -Alias '*'"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-NetIPAddress"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-NetIPAddress"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-NetIPAddress"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-NetIPAddress"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-NetIPAddress"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-NetIPAddress"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-NetIPAddress"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4104,
      "details": "}\n\n\n    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n    switch -exact ($PSCmdlet.ParameterSetName) { \n        { @('ByName', 'InputObject (cdxml)') -contains $_ } {\n      $__cmdletization_returnValue = $null\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:DeleteInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru\n            if ($PSBoundParameters.ContainsKey('InputObject')) {\n                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }\n            } else {\n                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)\n            }\n        }\n    }\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP MSFT_NetRoute.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Remove-NetRoute' -Alias '*'"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4104,
      "details": "n_values = @(${NextHop})\n        $__cmdletization_queryBuilder.FilterByProperty('NextHop', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AddressFamily') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${AddressFamily})\n        $__cmdletization_queryBuilder.FilterByProperty('AddressFamily', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Protocol') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Protocol})\n        $__cmdletization_queryBuilder.FilterByProperty('Protocol', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})\n    }\n    if ($PSBoundParameters.ContainsKey('IncludeAllCompartments') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('IncludeAllCompartments', ${IncludeAllCompartments})\n    }\n\n\n    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n    switch -exact ($PSCmdlet.ParameterSetName) { \n        { @('ByName', 'InputObject (cdxml)') -contains $_ } {\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('Publish')) {\n            [object]$__cmdletization_value = ${Publish}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Publish'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetRoute.Publish'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Publish'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetRoute.Publish'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('RouteMetric')) {\n            [object]$__cmdletization_value = ${RouteMetric}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RouteMetric'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RouteMetric'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('ValidLifetime')) {\n            [object]$__cmdletization_value = ${ValidLifetime}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ValidLifetime'; ParameterType = 'System.TimeSpan'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ValidLifetime'; ParameterType = 'System.TimeSpan'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('PreferredLifetime')) {\n            [object]$__cmdletization_value = ${PreferredLifetime}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PreferredLifetime'; ParameterType = 'System.TimeSpan'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PreferredLifetime'; ParameterType = 'System.TimeSpan'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n      $__cmdletization_returnValue = $null\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:ModifyInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru\n            if ($PSBoundParameters.ContainsKey('InputObject')) {\n                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }\n            } else {\n                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)\n            }\n        }\n    }\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP MSFT_NetRoute.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Set-NetRoute' -Alias '*'\n        \n\nfunction Remove-NetRoute\n{\n    [CmdletBinding(DefaultParameterSetName='ByName', SupportsShouldProcess=$true, ConfirmImpact='High', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/StandardCimv2/MSFT_NetRoute')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByName', Position=0)]\n    [ValidateNotNull()]\n    [string[]]\n    ${DestinationPrefix},\n\n    [Parameter(ParameterSetName='ByName', ValueFromPipelineByPropertyName=$true)]\n    [Alias('ifIndex')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${InterfaceIndex},\n\n    [Parameter(ParameterSetName='ByName', ValueFromPipelineByPropertyName=$true)]\n    [Alias('ifAlias')]\n    [ValidateNotNull()]\n    [string[]]\n    ${InterfaceAlias},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [string[]]\n    ${NextHop},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetRoute.AddressFamily[]]\n    ${AddressFamily},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetRoute.Publish[]]\n    ${Publish},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [uint16[]]\n    ${RouteMetric},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetRoute.Protocol[]]\n    ${Protocol},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${CompartmentId},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [timespan[]]\n    ${ValidLifetime},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [timespan[]]\n    ${PreferredLifetime},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetRoute.State[]]\n    ${State},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${InterfaceMetric},\n\n    [Parameter(ParameterSetName='ByName', ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIPInterface')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedIPInterface},\n\n    [Parameter(ParameterSetName='ByName')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='ByName')]\n    [switch]\n    ${IncludeAllCompartments},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetRoute')]\n    [ValidateNotNull()]\n    [ciminstance[]]\n    ${InputObject},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${AsJob},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${PassThru})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('DestinationPrefix') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DestinationPrefix})\n        $__cmdletization_queryBuilder.FilterByProperty('DestinationPrefix', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('InterfaceIndex') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${InterfaceIndex})\n        $__cmdletization_queryBuilder.FilterByProperty('InterfaceIndex', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('InterfaceAlias') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${InterfaceAlias})\n        $__cmdletization_queryBuilder.FilterByProperty('InterfaceAlias', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('NextHop') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${NextHop})\n        $__cmdletization_queryBuilder.FilterByProperty('NextHop', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AddressFamily') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${AddressFamily})\n        $__cmdletization_queryBuilder.FilterByProperty('AddressFamily', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Publish') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Publish})\n        $__cmdletization_queryBuilder.FilterByProperty('Publish', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('RouteMetric') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${RouteMetric})\n        $__cmdletization_queryBuilder.FilterByProperty('RouteMetric', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Protocol') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Protocol})\n        $__cmdletization_queryBuilder.FilterByProperty('Protocol', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('CompartmentId') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${CompartmentId})\n        $__cmdletization_queryBuilder.FilterByProperty('CompartmentId', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('ValidLifetime') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${ValidLifetime})\n        $__cmdletization_queryBuilder.FilterByProperty('ValidLifetime', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PreferredLifetime') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PreferredLifetime})\n        $__cmdletization_queryBuilder.FilterByProperty('PreferredLifetime', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('State') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${State})\n        $__cmdletization_queryBuilder.FilterByProperty('State', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('InterfaceMetric') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${InterfaceMetric})\n        $__cmdletization_queryBuilder.FilterByProperty('InterfaceMetric', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedIPInterface') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedIPInterface}, 'MSFT_NetIPInterfaceRoute', 'Antecedent', 'Dependent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})\n    }\n    if ($PSBoundParameters.ContainsKey('IncludeAllCompartments') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('IncludeAllCompartments', ${IncludeAllCompartments})"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4104,
      "details": "Bindings = 'Error'; Value = $null; IsValuePresent = $false }\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Find', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo)\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP MSFT_NetRoute.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Find-NetRoute' -Alias '*'\n        \n\nfunction Get-NetRoute\n{\n    [CmdletBinding(DefaultParameterSetName='ByName', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/StandardCimv2/MSFT_NetRoute')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByName', Position=0)]\n    [ValidateNotNull()]\n    [string[]]\n    ${DestinationPrefix},\n\n    [Parameter(ParameterSetName='ByName', ValueFromPipelineByPropertyName=$true)]\n    [Alias('ifIndex')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${InterfaceIndex},\n\n    [Parameter(ParameterSetName='ByName', ValueFromPipelineByPropertyName=$true)]\n    [Alias('ifAlias')]\n    [ValidateNotNull()]\n    [string[]]\n    ${InterfaceAlias},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [string[]]\n    ${NextHop},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetRoute.AddressFamily[]]\n    ${AddressFamily},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetRoute.Publish[]]\n    ${Publish},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [uint16[]]\n    ${RouteMetric},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetRoute.Protocol[]]\n    ${Protocol},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${CompartmentId},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [timespan[]]\n    ${ValidLifetime},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [timespan[]]\n    ${PreferredLifetime},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetRoute.State[]]\n    ${State},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${InterfaceMetric},\n\n    [Parameter(ParameterSetName='ByName', ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIPInterface')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedIPInterface},\n\n    [Parameter(ParameterSetName='ByName')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='ByName')]\n    [switch]\n    ${IncludeAllCompartments},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [switch]\n    ${AsJob})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('DestinationPrefix') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DestinationPrefix})\n        $__cmdletization_queryBuilder.FilterByProperty('DestinationPrefix', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('InterfaceIndex') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${InterfaceIndex})\n        $__cmdletization_queryBuilder.FilterByProperty('InterfaceIndex', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('InterfaceAlias') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${InterfaceAlias})\n        $__cmdletization_queryBuilder.FilterByProperty('InterfaceAlias', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('NextHop') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${NextHop})\n        $__cmdletization_queryBuilder.FilterByProperty('NextHop', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AddressFamily') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${AddressFamily})\n        $__cmdletization_queryBuilder.FilterByProperty('AddressFamily', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Publish') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Publish})\n        $__cmdletization_queryBuilder.FilterByProperty('Publish', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('RouteMetric') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${RouteMetric})\n        $__cmdletization_queryBuilder.FilterByProperty('RouteMetric', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Protocol') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Protocol})\n        $__cmdletization_queryBuilder.FilterByProperty('Protocol', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('CompartmentId') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${CompartmentId})\n        $__cmdletization_queryBuilder.FilterByProperty('CompartmentId', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('ValidLifetime') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${ValidLifetime})\n        $__cmdletization_queryBuilder.FilterByProperty('ValidLifetime', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PreferredLifetime') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PreferredLifetime})\n        $__cmdletization_queryBuilder.FilterByProperty('PreferredLifetime', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('State') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${State})\n        $__cmdletization_queryBuilder.FilterByProperty('State', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('InterfaceMetric') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${InterfaceMetric})\n        $__cmdletization_queryBuilder.FilterByProperty('InterfaceMetric', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedIPInterface') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedIPInterface}, 'MSFT_NetIPInterfaceRoute', 'Antecedent', 'Dependent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})\n    }\n    if ($PSBoundParameters.ContainsKey('IncludeAllCompartments') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('IncludeAllCompartments', ${IncludeAllCompartments})\n    }\n\n\n    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP MSFT_NetRoute.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Get-NetRoute' -Alias '*'\n        \n\nfunction Set-NetRoute\n{\n    [CmdletBinding(DefaultParameterSetName='ByName', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/StandardCimv2/MSFT_NetRoute')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByName', Position=0)]\n    [ValidateNotNull()]\n    [string[]]\n    ${DestinationPrefix},\n\n    [Parameter(ParameterSetName='ByName', ValueFromPipelineByPropertyName=$true)]\n    [Alias('ifIndex')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${InterfaceIndex},\n\n    [Parameter(ParameterSetName='ByName', ValueFromPipelineByPropertyName=$true)]\n    [Alias('ifAlias')]\n    [ValidateNotNull()]\n    [string[]]\n    ${InterfaceAlias},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [string[]]\n    ${NextHop},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetRoute.AddressFamily[]]\n    ${AddressFamily},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetRoute.Protocol[]]\n    ${Protocol},\n\n    [Parameter(ParameterSetName='ByName')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='ByName')]\n    [switch]\n    ${IncludeAllCompartments},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetRoute')]\n    [ValidateNotNull()]\n    [ciminstance[]]\n    ${InputObject},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetRoute.Publish]\n    ${Publish},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [uint16]\n    ${RouteMetric},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [timespan]\n    ${ValidLifetime},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [timespan]\n    ${PreferredLifetime},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${AsJob},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${PassThru})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('DestinationPrefix') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DestinationPrefix})\n        $__cmdletization_queryBuilder.FilterByProperty('DestinationPrefix', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('InterfaceIndex') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${InterfaceIndex})\n        $__cmdletization_queryBuilder.FilterByProperty('InterfaceIndex', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('InterfaceAlias') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${InterfaceAlias})\n        $__cmdletization_queryBuilder.FilterByProperty('InterfaceAlias', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('NextHop') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletizatio"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4104,
      "details": "meters.ContainsKey('DestinationPrefix')) {\n          [object]$__cmdletization_value = ${DestinationPrefix}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DestinationPrefix'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DestinationPrefix'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('InterfaceIndex')) {\n          [object]$__cmdletization_value = ${InterfaceIndex}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InterfaceIndex'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InterfaceIndex'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('AddressFamily')) {\n          [object]$__cmdletization_value = ${AddressFamily}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AddressFamily'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetRoute.AddressFamily'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AddressFamily'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetRoute.AddressFamily'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('NextHop')) {\n          [object]$__cmdletization_value = ${NextHop}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NextHop'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NextHop'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('PolicyStore')) {\n          [object]$__cmdletization_value = ${PolicyStore}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('Publish')) {\n          [object]$__cmdletization_value = ${Publish}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Publish'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetRoute.Publish'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Publish'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetRoute.Publish'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('RouteMetric')) {\n          [object]$__cmdletization_value = ${RouteMetric}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RouteMetric'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RouteMetric'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('Protocol')) {\n          [object]$__cmdletization_value = ${Protocol}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Protocol'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetRoute.Protocol'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Protocol'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetRoute.Protocol'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('ValidLifetime')) {\n          [object]$__cmdletization_value = ${ValidLifetime}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ValidLifetime'; ParameterType = 'System.TimeSpan'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ValidLifetime'; ParameterType = 'System.TimeSpan'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('PreferredLifetime')) {\n          [object]$__cmdletization_value = ${PreferredLifetime}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PreferredLifetime'; ParameterType = 'System.TimeSpan'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PreferredLifetime'; ParameterType = 'System.TimeSpan'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'CmdletOutput'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'Out'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.UInt32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Create', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo)\n        }\n    }\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP MSFT_NetRoute.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'New-NetRoute' -Alias '*'\n        \n\nfunction Find-NetRoute\n{\n    [CmdletBinding(PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance[]])]\n    param(\n    \n    [Parameter(ParameterSetName='Find0')]\n    [uint32]\n    ${InterfaceIndex},\n\n    [Parameter(ParameterSetName='Find0')]\n    [string]\n    ${LocalIPAddress},\n\n    [Parameter(ParameterSetName='Find0', Mandatory=$true)]\n    [string]\n    ${RemoteIPAddress},\n\n    [Parameter(ParameterSetName='Find0')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='Find0')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='Find0')]\n    [switch]\n    ${AsJob})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n      $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('InterfaceIndex')) {\n          [object]$__cmdletization_value = ${InterfaceIndex}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InterfaceIndex'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InterfaceIndex'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('LocalIPAddress')) {\n          [object]$__cmdletization_value = ${LocalIPAddress}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LocalIPAddress'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LocalIPAddress'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('RemoteIPAddress')) {\n          [object]$__cmdletization_value = ${RemoteIPAddress}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteIPAddress'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteIPAddress'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'CmdletOutput'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'Out'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.UInt32';"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4104,
      "details": "#requires -version 3.0\n\ntry { Microsoft.PowerShell.Core\\Set-StrictMode -Off } catch { }\n\n$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module\n\n$script:ClassName = 'ROOT/StandardCimv2/MSFT_NetRoute'\n$script:ClassVersion = '1.0.0'\n$script:ModuleVersion = '1.0.0'\n$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]\n\n$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()\n\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function @()\n        \n\nfunction __cmdletization_BindCommonParameters\n{\n    param(\n        $__cmdletization_objectModelWrapper,\n        $myPSBoundParameters\n    )       \n                \n\n        if ($myPSBoundParameters.ContainsKey('CimSession')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('AsJob')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] \n        }\n                    \n\n}\n                \n\nfunction New-NetRoute\n{\n    [CmdletBinding(DefaultParameterSetName='ByInterfaceAlias', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance[]])][OutputType([Microsoft.Management.Infrastructure.CimInstance[]])]\n    param(\n    \n    [Parameter(ParameterSetName='ByInterfaceAlias', Mandatory=$true, Position=0)]\n    [Parameter(ParameterSetName='ByInterfaceIndex', Mandatory=$true, Position=0)]\n    [string]\n    ${DestinationPrefix},\n\n    [Parameter(ParameterSetName='ByInterfaceAlias', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]\n    [Alias('ifAlias')]\n    [string]\n    ${InterfaceAlias},\n\n    [Parameter(ParameterSetName='ByInterfaceAlias')]\n    [Parameter(ParameterSetName='ByInterfaceIndex')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetRoute.AddressFamily]\n    ${AddressFamily},\n\n    [Parameter(ParameterSetName='ByInterfaceAlias')]\n    [Parameter(ParameterSetName='ByInterfaceIndex')]\n    [string]\n    ${NextHop},\n\n    [Parameter(ParameterSetName='ByInterfaceAlias')]\n    [Parameter(ParameterSetName='ByInterfaceIndex')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='ByInterfaceAlias')]\n    [Parameter(ParameterSetName='ByInterfaceIndex')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetRoute.Publish]\n    ${Publish},\n\n    [Parameter(ParameterSetName='ByInterfaceAlias')]\n    [Parameter(ParameterSetName='ByInterfaceIndex')]\n    [uint16]\n    ${RouteMetric},\n\n    [Parameter(ParameterSetName='ByInterfaceAlias')]\n    [Parameter(ParameterSetName='ByInterfaceIndex')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetRoute.Protocol]\n    ${Protocol},\n\n    [Parameter(ParameterSetName='ByInterfaceAlias')]\n    [Parameter(ParameterSetName='ByInterfaceIndex')]\n    [timespan]\n    ${ValidLifetime},\n\n    [Parameter(ParameterSetName='ByInterfaceAlias')]\n    [Parameter(ParameterSetName='ByInterfaceIndex')]\n    [timespan]\n    ${PreferredLifetime},\n\n    [Parameter(ParameterSetName='ByInterfaceIndex', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]\n    [Alias('ifIndex')]\n    [uint32]\n    ${InterfaceIndex},\n\n    [Parameter(ParameterSetName='ByInterfaceAlias')]\n    [Parameter(ParameterSetName='ByInterfaceIndex')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByInterfaceAlias')]\n    [Parameter(ParameterSetName='ByInterfaceIndex')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByInterfaceAlias')]\n    [Parameter(ParameterSetName='ByInterfaceIndex')]\n    [switch]\n    ${AsJob})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n      $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n\n      switch -exact ($PSCmdlet.ParameterSetName) { \n        { @('ByInterfaceAlias') -contains $_ } {\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('DestinationPrefix')) {\n          [object]$__cmdletization_value = ${DestinationPrefix}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DestinationPrefix'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DestinationPrefix'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('InterfaceAlias')) {\n          [object]$__cmdletization_value = ${InterfaceAlias}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InterfaceAlias'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InterfaceAlias'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('AddressFamily')) {\n          [object]$__cmdletization_value = ${AddressFamily}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AddressFamily'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetRoute.AddressFamily'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AddressFamily'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetRoute.AddressFamily'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('NextHop')) {\n          [object]$__cmdletization_value = ${NextHop}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NextHop'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NextHop'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('PolicyStore')) {\n          [object]$__cmdletization_value = ${PolicyStore}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('Publish')) {\n          [object]$__cmdletization_value = ${Publish}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Publish'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetRoute.Publish'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Publish'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetRoute.Publish'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('RouteMetric')) {\n          [object]$__cmdletization_value = ${RouteMetric}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RouteMetric'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RouteMetric'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('Protocol')) {\n          [object]$__cmdletization_value = ${Protocol}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Protocol'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetRoute.Protocol'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Protocol'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetRoute.Protocol'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('ValidLifetime')) {\n          [object]$__cmdletization_value = ${ValidLifetime}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ValidLifetime'; ParameterType = 'System.TimeSpan'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ValidLifetime'; ParameterType = 'System.TimeSpan'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('PreferredLifetime')) {\n          [object]$__cmdletization_value = ${PreferredLifetime}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PreferredLifetime'; ParameterType = 'System.TimeSpan'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PreferredLifetime'; ParameterType = 'System.TimeSpan'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'CmdletOutput'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'Out'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.UInt32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Create', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo)\n        }\n        { @('ByInterfaceIndex') -contains $_ } {\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundPara"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-NetIPAddress"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-NetIPAddress"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-NetIPAddress"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4104,
      "details": "#requires -version 3.0\n\ntry { Microsoft.PowerShell.Core\\Set-StrictMode -Off } catch { }\n\n$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module\n\n$script:ClassName = 'ROOT/StandardCimv2/MSFT_NetPrefixPolicy'\n$script:ClassVersion = '1.0.0'\n$script:ModuleVersion = '1.0.0'\n$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]\n\n$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()\n\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function @()\n        \n\nfunction __cmdletization_BindCommonParameters\n{\n    param(\n        $__cmdletization_objectModelWrapper,\n        $myPSBoundParameters\n    )       \n                \n\n        if ($myPSBoundParameters.ContainsKey('CimSession')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('AsJob')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] \n        }\n                    \n\n}\n                \n\nfunction Get-NetPrefixPolicy\n{\n    [CmdletBinding(DefaultParameterSetName='ByName', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/StandardCimv2/MSFT_NetPrefixPolicy')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByName', Position=0)]\n    [ValidateNotNull()]\n    [string[]]\n    ${Prefix},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${Precedence},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${Label},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [switch]\n    ${AsJob})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('Prefix') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Prefix})\n        $__cmdletization_queryBuilder.FilterByProperty('Prefix', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Precedence') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Precedence})\n        $__cmdletization_queryBuilder.FilterByProperty('Precedence', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Label') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Label})\n        $__cmdletization_queryBuilder.FilterByProperty('Label', $__cmdletization_values, $false, 'Default')\n    }\n\n\n    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP MSFT_NetPrefixPolicy.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Get-NetPrefixPolicy' -Alias '*'"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-NetIPAddress"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-NetIPAddress"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-NetIPAddress"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-NetIPAddress"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4104,
      "details": "$__cmdletization_returnValue = $null\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:ModifyInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru\n            if ($PSBoundParameters.ContainsKey('InputObject')) {\n                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }\n            } else {\n                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)\n            }\n        }\n    }\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP MSFT_NetOffloadGlobalSetting.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Set-NetOffloadGlobalSetting' -Alias '*'"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4104,
      "details": "#requires -version 3.0\n\ntry { Microsoft.PowerShell.Core\\Set-StrictMode -Off } catch { }\n\n$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module\n\n$script:ClassName = 'ROOT/StandardCimv2/MSFT_NetOffloadGlobalSetting'\n$script:ClassVersion = '1.0.0'\n$script:ModuleVersion = '1.0.0'\n$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]\n\n$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()\n\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function @()\n        \n\nfunction __cmdletization_BindCommonParameters\n{\n    param(\n        $__cmdletization_objectModelWrapper,\n        $myPSBoundParameters\n    )       \n                \n\n        if ($myPSBoundParameters.ContainsKey('CimSession')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('AsJob')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] \n        }\n                    \n\n}\n                \n\nfunction Get-NetOffloadGlobalSetting\n{\n    [CmdletBinding(DefaultParameterSetName='ByName', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/StandardCimv2/MSFT_NetOffloadGlobalSetting')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetOffloadGlobalSetting.EnabledDisabledEnum[]]\n    ${ReceiveSideScaling},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetOffloadGlobalSetting.EnabledDisabledEnum[]]\n    ${ReceiveSegmentCoalescing},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetOffloadGlobalSetting.ChimneyEnum[]]\n    ${Chimney},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetOffloadGlobalSetting.EnabledDisabledEnum[]]\n    ${TaskOffload},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetOffloadGlobalSetting.EnabledDisabledEnum[]]\n    ${NetworkDirect},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetOffloadGlobalSetting.AllowedBlockedEnum[]]\n    ${NetworkDirectAcrossIPSubnets},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetOffloadGlobalSetting.EnabledDisabledEnum[]]\n    ${PacketCoalescingFilter},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [switch]\n    ${AsJob})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('ReceiveSideScaling') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${ReceiveSideScaling})\n        $__cmdletization_queryBuilder.FilterByProperty('ReceiveSideScaling', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('ReceiveSegmentCoalescing') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${ReceiveSegmentCoalescing})\n        $__cmdletization_queryBuilder.FilterByProperty('ReceiveSegmentCoalescing', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Chimney') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Chimney})\n        $__cmdletization_queryBuilder.FilterByProperty('Chimney', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('TaskOffload') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${TaskOffload})\n        $__cmdletization_queryBuilder.FilterByProperty('TaskOffload', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('NetworkDirect') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${NetworkDirect})\n        $__cmdletization_queryBuilder.FilterByProperty('NetworkDirect', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('NetworkDirectAcrossIPSubnets') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${NetworkDirectAcrossIPSubnets})\n        $__cmdletization_queryBuilder.FilterByProperty('NetworkDirectAcrossIPSubnets', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PacketCoalescingFilter') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PacketCoalescingFilter})\n        $__cmdletization_queryBuilder.FilterByProperty('PacketCoalescingFilter', $__cmdletization_values, $false, 'Default')\n    }\n\n\n    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP MSFT_NetOffloadGlobalSetting.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Get-NetOffloadGlobalSetting' -Alias '*'\n        \n\nfunction Set-NetOffloadGlobalSetting\n{\n    [CmdletBinding(DefaultParameterSetName='InputObject (cdxml)', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/StandardCimv2/MSFT_NetOffloadGlobalSetting')]\n\n    param(\n    \n    [Parameter(ParameterSetName='InputObject (cdxml)', ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetOffloadGlobalSetting')]\n    [ValidateNotNull()]\n    [ciminstance[]]\n    ${InputObject},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetOffloadGlobalSetting.EnabledDisabledEnum]\n    ${ReceiveSideScaling},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetOffloadGlobalSetting.EnabledDisabledEnum]\n    ${ReceiveSegmentCoalescing},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetOffloadGlobalSetting.ChimneyEnum]\n    ${Chimney},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetOffloadGlobalSetting.EnabledDisabledEnum]\n    ${TaskOffload},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetOffloadGlobalSetting.EnabledDisabledEnum]\n    ${NetworkDirect},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetOffloadGlobalSetting.AllowedBlockedEnum]\n    ${NetworkDirectAcrossIPSubnets},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetOffloadGlobalSetting.EnabledDisabledEnum]\n    ${PacketCoalescingFilter},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${AsJob},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${PassThru})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n\n\n    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n    switch -exact ($PSCmdlet.ParameterSetName) { \n        { @('InputObject (cdxml)') -contains $_ } {\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('ReceiveSideScaling')) {\n            [object]$__cmdletization_value = ${ReceiveSideScaling}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ReceiveSideScaling'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetOffloadGlobalSetting.EnabledDisabledEnum'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ReceiveSideScaling'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetOffloadGlobalSetting.EnabledDisabledEnum'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('ReceiveSegmentCoalescing')) {\n            [object]$__cmdletization_value = ${ReceiveSegmentCoalescing}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ReceiveSegmentCoalescing'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetOffloadGlobalSetting.EnabledDisabledEnum'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ReceiveSegmentCoalescing'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetOffloadGlobalSetting.EnabledDisabledEnum'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('Chimney')) {\n            [object]$__cmdletization_value = ${Chimney}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Chimney'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetOffloadGlobalSetting.ChimneyEnum'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Chimney'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetOffloadGlobalSetting.ChimneyEnum'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('TaskOffload')) {\n            [object]$__cmdletization_value = ${TaskOffload}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'TaskOffload'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetOffloadGlobalSetting.EnabledDisabledEnum'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'TaskOffload'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetOffloadGlobalSetting.EnabledDisabledEnum'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('NetworkDirect')) {\n            [object]$__cmdletization_value = ${NetworkDirect}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NetworkDirect'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetOffloadGlobalSetting.EnabledDisabledEnum'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NetworkDirect'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetOffloadGlobalSetting.EnabledDisabledEnum'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('NetworkDirectAcrossIPSubnets')) {\n            [object]$__cmdletization_value = ${NetworkDirectAcrossIPSubnets}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NetworkDirectAcrossIPSubnets'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetOffloadGlobalSetting.AllowedBlockedEnum'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NetworkDirectAcrossIPSubnets'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetOffloadGlobalSetting.AllowedBlockedEnum'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('PacketCoalescingFilter')) {\n            [object]$__cmdletization_value = ${PacketCoalescingFilter}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PacketCoalescingFilter'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetOffloadGlobalSetting.EnabledDisabledEnum'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PacketCoalescingFilter'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetOffloadGlobalSetting.EnabledDisabledEnum'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-NetIPAddress"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-NetIPAddress"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-NetIPAddress"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-NetIPAddress"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-NetIPAddress"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-NetIPAddress"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4104,
      "details": "cmdletization_queryBuilder.AddQueryOption('IncludeAllCompartments', ${IncludeAllCompartments})\n    }\n\n\n    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n    switch -exact ($PSCmdlet.ParameterSetName) { \n        { @('ByName', 'InputObject (cdxml)') -contains $_ } {\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('LinkLayerAddress')) {\n            [object]$__cmdletization_value = ${LinkLayerAddress}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LinkLayerAddress'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LinkLayerAddress'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n      $__cmdletization_returnValue = $null\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:ModifyInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru\n            if ($PSBoundParameters.ContainsKey('InputObject')) {\n                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }\n            } else {\n                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)\n            }\n        }\n    }\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP MSFT_NetNeighbor.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Set-NetNeighbor' -Alias '*'\n        \n\nfunction Remove-NetNeighbor\n{\n    [CmdletBinding(DefaultParameterSetName='ByName', SupportsShouldProcess=$true, ConfirmImpact='High', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/StandardCimv2/MSFT_NetNeighbor')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByName', Position=0)]\n    [ValidateNotNull()]\n    [string[]]\n    ${IPAddress},\n\n    [Parameter(ParameterSetName='ByName', ValueFromPipelineByPropertyName=$true)]\n    [Alias('ifIndex')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${InterfaceIndex},\n\n    [Parameter(ParameterSetName='ByName', ValueFromPipelineByPropertyName=$true)]\n    [Alias('ifAlias')]\n    [ValidateNotNull()]\n    [string[]]\n    ${InterfaceAlias},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [string[]]\n    ${LinkLayerAddress},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetNeighbor.State[]]\n    ${State},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetNeighbor.AddressFamily[]]\n    ${AddressFamily},\n\n    [Parameter(ParameterSetName='ByName', ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIPInterface')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedIPInterface},\n\n    [Parameter(ParameterSetName='ByName')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='ByName')]\n    [switch]\n    ${IncludeAllCompartments},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetNeighbor')]\n    [ValidateNotNull()]\n    [ciminstance[]]\n    ${InputObject},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${AsJob},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${PassThru})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('IPAddress') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${IPAddress})\n        $__cmdletization_queryBuilder.FilterByProperty('IPAddress', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('InterfaceIndex') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${InterfaceIndex})\n        $__cmdletization_queryBuilder.FilterByProperty('InterfaceIndex', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('InterfaceAlias') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${InterfaceAlias})\n        $__cmdletization_queryBuilder.FilterByProperty('InterfaceAlias', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('LinkLayerAddress') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${LinkLayerAddress})\n        $__cmdletization_queryBuilder.FilterByProperty('LinkLayerAddress', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('State') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${State})\n        $__cmdletization_queryBuilder.FilterByProperty('State', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AddressFamily') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${AddressFamily})\n        $__cmdletization_queryBuilder.FilterByProperty('AddressFamily', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedIPInterface') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedIPInterface}, 'MSFT_NetIPInterfaceNeighbor', 'Antecedent', 'Dependent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})\n    }\n    if ($PSBoundParameters.ContainsKey('IncludeAllCompartments') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('IncludeAllCompartments', ${IncludeAllCompartments})\n    }\n\n\n    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n    switch -exact ($PSCmdlet.ParameterSetName) { \n        { @('ByName', 'InputObject (cdxml)') -contains $_ } {\n      $__cmdletization_returnValue = $null\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:DeleteInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru\n            if ($PSBoundParameters.ContainsKey('InputObject')) {\n                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }\n            } else {\n                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)\n            }\n        }\n    }\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP MSFT_NetNeighbor.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Remove-NetNeighbor' -Alias '*'"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4104,
      "details": ".PowerShell.Cmdletization.GeneratedTypes.NetNeighbor.State'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'State'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetNeighbor.State'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('AddressFamily')) {\n          [object]$__cmdletization_value = ${AddressFamily}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AddressFamily'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetNeighbor.AddressFamily'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AddressFamily'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetNeighbor.AddressFamily'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'CmdletOutput'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'Out'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.UInt32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Create', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo)\n        }\n    }\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP MSFT_NetNeighbor.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'New-NetNeighbor' -Alias '*'\n        \n\nfunction Get-NetNeighbor\n{\n    [CmdletBinding(DefaultParameterSetName='ByName', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/StandardCimv2/MSFT_NetNeighbor')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByName', Position=0)]\n    [ValidateNotNull()]\n    [string[]]\n    ${IPAddress},\n\n    [Parameter(ParameterSetName='ByName', ValueFromPipelineByPropertyName=$true)]\n    [Alias('ifIndex')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${InterfaceIndex},\n\n    [Parameter(ParameterSetName='ByName', ValueFromPipelineByPropertyName=$true)]\n    [Alias('ifAlias')]\n    [ValidateNotNull()]\n    [string[]]\n    ${InterfaceAlias},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [string[]]\n    ${LinkLayerAddress},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetNeighbor.State[]]\n    ${State},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetNeighbor.AddressFamily[]]\n    ${AddressFamily},\n\n    [Parameter(ParameterSetName='ByName', ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIPInterface')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedIPInterface},\n\n    [Parameter(ParameterSetName='ByName')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='ByName')]\n    [switch]\n    ${IncludeAllCompartments},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [switch]\n    ${AsJob})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('IPAddress') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${IPAddress})\n        $__cmdletization_queryBuilder.FilterByProperty('IPAddress', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('InterfaceIndex') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${InterfaceIndex})\n        $__cmdletization_queryBuilder.FilterByProperty('InterfaceIndex', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('InterfaceAlias') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${InterfaceAlias})\n        $__cmdletization_queryBuilder.FilterByProperty('InterfaceAlias', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('LinkLayerAddress') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${LinkLayerAddress})\n        $__cmdletization_queryBuilder.FilterByProperty('LinkLayerAddress', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('State') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${State})\n        $__cmdletization_queryBuilder.FilterByProperty('State', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AddressFamily') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${AddressFamily})\n        $__cmdletization_queryBuilder.FilterByProperty('AddressFamily', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedIPInterface') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedIPInterface}, 'MSFT_NetIPInterfaceNeighbor', 'Antecedent', 'Dependent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})\n    }\n    if ($PSBoundParameters.ContainsKey('IncludeAllCompartments') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('IncludeAllCompartments', ${IncludeAllCompartments})\n    }\n\n\n    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP MSFT_NetNeighbor.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Get-NetNeighbor' -Alias '*'\n        \n\nfunction Set-NetNeighbor\n{\n    [CmdletBinding(DefaultParameterSetName='ByName', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/StandardCimv2/MSFT_NetNeighbor')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByName', Position=0)]\n    [ValidateNotNull()]\n    [string[]]\n    ${IPAddress},\n\n    [Parameter(ParameterSetName='ByName', ValueFromPipelineByPropertyName=$true)]\n    [Alias('ifIndex')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${InterfaceIndex},\n\n    [Parameter(ParameterSetName='ByName', ValueFromPipelineByPropertyName=$true)]\n    [Alias('ifAlias')]\n    [ValidateNotNull()]\n    [string[]]\n    ${InterfaceAlias},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetNeighbor.State[]]\n    ${State},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetNeighbor.AddressFamily[]]\n    ${AddressFamily},\n\n    [Parameter(ParameterSetName='ByName')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='ByName')]\n    [switch]\n    ${IncludeAllCompartments},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetNeighbor')]\n    [ValidateNotNull()]\n    [ciminstance[]]\n    ${InputObject},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [string]\n    ${LinkLayerAddress},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${AsJob},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${PassThru})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('IPAddress') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${IPAddress})\n        $__cmdletization_queryBuilder.FilterByProperty('IPAddress', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('InterfaceIndex') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${InterfaceIndex})\n        $__cmdletization_queryBuilder.FilterByProperty('InterfaceIndex', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('InterfaceAlias') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${InterfaceAlias})\n        $__cmdletization_queryBuilder.FilterByProperty('InterfaceAlias', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('State') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${State})\n        $__cmdletization_queryBuilder.FilterByProperty('State', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AddressFamily') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${AddressFamily})\n        $__cmdletization_queryBuilder.FilterByProperty('AddressFamily', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})\n    }\n    if ($PSBoundParameters.ContainsKey('IncludeAllCompartments') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n    $__"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4104,
      "details": "#requires -version 3.0\n\ntry { Microsoft.PowerShell.Core\\Set-StrictMode -Off } catch { }\n\n$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module\n\n$script:ClassName = 'ROOT/StandardCimv2/MSFT_NetNeighbor'\n$script:ClassVersion = '1.0.0'\n$script:ModuleVersion = '1.0.0'\n$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]\n\n$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()\n\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function @()\n        \n\nfunction __cmdletization_BindCommonParameters\n{\n    param(\n        $__cmdletization_objectModelWrapper,\n        $myPSBoundParameters\n    )       \n                \n\n        if ($myPSBoundParameters.ContainsKey('CimSession')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('AsJob')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] \n        }\n                    \n\n}\n                \n\nfunction New-NetNeighbor\n{\n    [CmdletBinding(DefaultParameterSetName='ByInterfaceAlias', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance[]])][OutputType([Microsoft.Management.Infrastructure.CimInstance[]])]\n    param(\n    \n    [Parameter(ParameterSetName='ByInterfaceAlias', Mandatory=$true, Position=0)]\n    [Parameter(ParameterSetName='ByInterfaceIndex', Mandatory=$true, Position=0)]\n    [string]\n    ${IPAddress},\n\n    [Parameter(ParameterSetName='ByInterfaceAlias', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]\n    [Alias('ifAlias')]\n    [string]\n    ${InterfaceAlias},\n\n    [Parameter(ParameterSetName='ByInterfaceAlias')]\n    [Parameter(ParameterSetName='ByInterfaceIndex')]\n    [string]\n    ${LinkLayerAddress},\n\n    [Parameter(ParameterSetName='ByInterfaceAlias')]\n    [Parameter(ParameterSetName='ByInterfaceIndex')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='ByInterfaceAlias')]\n    [Parameter(ParameterSetName='ByInterfaceIndex')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetNeighbor.State]\n    ${State},\n\n    [Parameter(ParameterSetName='ByInterfaceAlias')]\n    [Parameter(ParameterSetName='ByInterfaceIndex')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetNeighbor.AddressFamily]\n    ${AddressFamily},\n\n    [Parameter(ParameterSetName='ByInterfaceIndex', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]\n    [Alias('ifIndex')]\n    [uint32]\n    ${InterfaceIndex},\n\n    [Parameter(ParameterSetName='ByInterfaceAlias')]\n    [Parameter(ParameterSetName='ByInterfaceIndex')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByInterfaceAlias')]\n    [Parameter(ParameterSetName='ByInterfaceIndex')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByInterfaceAlias')]\n    [Parameter(ParameterSetName='ByInterfaceIndex')]\n    [switch]\n    ${AsJob})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n      $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n\n      switch -exact ($PSCmdlet.ParameterSetName) { \n        { @('ByInterfaceAlias') -contains $_ } {\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('IPAddress')) {\n          [object]$__cmdletization_value = ${IPAddress}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IPAddress'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IPAddress'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('InterfaceAlias')) {\n          [object]$__cmdletization_value = ${InterfaceAlias}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InterfaceAlias'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InterfaceAlias'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('LinkLayerAddress')) {\n          [object]$__cmdletization_value = ${LinkLayerAddress}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LinkLayerAddress'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LinkLayerAddress'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('PolicyStore')) {\n          [object]$__cmdletization_value = ${PolicyStore}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('State')) {\n          [object]$__cmdletization_value = ${State}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'State'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetNeighbor.State'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'State'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetNeighbor.State'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('AddressFamily')) {\n          [object]$__cmdletization_value = ${AddressFamily}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AddressFamily'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetNeighbor.AddressFamily'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AddressFamily'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetNeighbor.AddressFamily'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'CmdletOutput'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'Out'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.UInt32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Create', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo)\n        }\n        { @('ByInterfaceIndex') -contains $_ } {\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('IPAddress')) {\n          [object]$__cmdletization_value = ${IPAddress}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IPAddress'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IPAddress'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('InterfaceIndex')) {\n          [object]$__cmdletization_value = ${InterfaceIndex}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InterfaceIndex'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InterfaceIndex'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('LinkLayerAddress')) {\n          [object]$__cmdletization_value = ${LinkLayerAddress}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LinkLayerAddress'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LinkLayerAddress'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('PolicyStore')) {\n          [object]$__cmdletization_value = ${PolicyStore}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('State')) {\n          [object]$__cmdletization_value = ${State}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'State'; ParameterType = 'Microsoft"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-NetIPAddress"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-NetIPAddress"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-NetIPAddress"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-NetIPAddress"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4104,
      "details": "on_value = ${UseTemporaryAddresses}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'UseTemporaryAddresses'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.UseTemporaryAddresses'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'UseTemporaryAddresses'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.UseTemporaryAddresses'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('MaxTemporaryDadAttempts')) {\n            [object]$__cmdletization_value = ${MaxTemporaryDadAttempts}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MaxDadAttempts'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MaxDadAttempts'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('MaxTemporaryValidLifetime')) {\n            [object]$__cmdletization_value = ${MaxTemporaryValidLifetime}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MaxValidLifetime'; ParameterType = 'System.TimeSpan'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MaxValidLifetime'; ParameterType = 'System.TimeSpan'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('MaxTemporaryPreferredLifetime')) {\n            [object]$__cmdletization_value = ${MaxTemporaryPreferredLifetime}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MaxPreferredLifetime'; ParameterType = 'System.TimeSpan'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MaxPreferredLifetime'; ParameterType = 'System.TimeSpan'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('TemporaryRegenerateTime')) {\n            [object]$__cmdletization_value = ${TemporaryRegenerateTime}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RegenerateTime'; ParameterType = 'System.TimeSpan'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RegenerateTime'; ParameterType = 'System.TimeSpan'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('MaxTemporaryDesyncTime')) {\n            [object]$__cmdletization_value = ${MaxTemporaryDesyncTime}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MaxRandomTime'; ParameterType = 'System.TimeSpan'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MaxRandomTime'; ParameterType = 'System.TimeSpan'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n      $__cmdletization_returnValue = $null\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:ModifyInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru\n            if ($PSBoundParameters.ContainsKey('InputObject')) {\n                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }\n            } else {\n                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)\n            }\n        }\n    }\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP MSFT_NetIPv6Protocol.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Set-NetIPv6Protocol' -Alias '*'"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4104,
      "details": "bject (cdxml)')]\n    [Alias('MaxValidLifetime')]\n    [timespan]\n    ${MaxTemporaryValidLifetime},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('MaxPreferredLifetime')]\n    [timespan]\n    ${MaxTemporaryPreferredLifetime},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('RegenerateTime')]\n    [timespan]\n    ${TemporaryRegenerateTime},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('MaxRandomTime')]\n    [timespan]\n    ${MaxTemporaryDesyncTime},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${AsJob},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${PassThru})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n\n\n    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n    switch -exact ($PSCmdlet.ParameterSetName) { \n        { @('InputObject (cdxml)') -contains $_ } {\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('DefaultHopLimit')) {\n            [object]$__cmdletization_value = ${DefaultHopLimit}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DefaultHopLimit'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DefaultHopLimit'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('NeighborCacheLimitEntries')) {\n            [object]$__cmdletization_value = ${NeighborCacheLimitEntries}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NeighborCacheLimit'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NeighborCacheLimit'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('RouteCacheLimitEntries')) {\n            [object]$__cmdletization_value = ${RouteCacheLimitEntries}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RouteCacheLimit'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RouteCacheLimit'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('ReassemblyLimitBytes')) {\n            [object]$__cmdletization_value = ${ReassemblyLimitBytes}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ReassemblyLimit'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ReassemblyLimit'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('IcmpRedirects')) {\n            [object]$__cmdletization_value = ${IcmpRedirects}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IcmpRedirects'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.IcmpRedirects'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IcmpRedirects'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.IcmpRedirects'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('SourceRoutingBehavior')) {\n            [object]$__cmdletization_value = ${SourceRoutingBehavior}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SourceRoutingBehavior'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.SourceRoutingBehavior'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SourceRoutingBehavior'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.SourceRoutingBehavior'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('DhcpMediaSense')) {\n            [object]$__cmdletization_value = ${DhcpMediaSense}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DhcpMediaSense'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.DhcpMediaSense'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DhcpMediaSense'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.DhcpMediaSense'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('MediaSenseEventLog')) {\n            [object]$__cmdletization_value = ${MediaSenseEventLog}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MediaSenseEventLog'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.MediaSenseEventLog'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MediaSenseEventLog'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.MediaSenseEventLog'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('MldLevel')) {\n            [object]$__cmdletization_value = ${MldLevel}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MldLevel'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.MldLevel'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MldLevel'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.MldLevel'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('MldVersion')) {\n            [object]$__cmdletization_value = ${MldVersion}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MldVersion'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.MldVersion'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MldVersion'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.MldVersion'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('MulticastForwarding')) {\n            [object]$__cmdletization_value = ${MulticastForwarding}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MulticastForwarding'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.MulticastForwarding'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MulticastForwarding'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.MulticastForwarding'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('GroupForwardedFragments')) {\n            [object]$__cmdletization_value = ${GroupForwardedFragments}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'GroupForwardedFragments'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.GroupForwardedFragments'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'GroupForwardedFragments'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.GroupForwardedFragments'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('RandomizeIdentifiers')) {\n            [object]$__cmdletization_value = ${RandomizeIdentifiers}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RandomizeIdentifiers'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.RandomizeIdentifiers'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RandomizeIdentifiers'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.RandomizeIdentifiers'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('AddressMaskReply')) {\n            [object]$__cmdletization_value = ${AddressMaskReply}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AddressMaskReply'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.AddressMaskReply'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AddressMaskReply'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.AddressMaskReply'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('DeadGatewayDetection')) {\n            [object]$__cmdletization_value = ${DeadGatewayDetection}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DeadGatewayDetection'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.DeadGatewayDetection'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DeadGatewayDetection'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.DeadGatewayDetection'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('UseTemporaryAddresses')) {\n            [object]$__cmdletizati"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4104,
      "details": "#requires -version 3.0\n\ntry { Microsoft.PowerShell.Core\\Set-StrictMode -Off } catch { }\n\n$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module\n\n$script:ClassName = 'ROOT/StandardCimv2/MSFT_NetIPv6Protocol'\n$script:ClassVersion = '1.0.0'\n$script:ModuleVersion = '1.0.0'\n$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]\n\n$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()\n\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function @()\n        \n\nfunction __cmdletization_BindCommonParameters\n{\n    param(\n        $__cmdletization_objectModelWrapper,\n        $myPSBoundParameters\n    )       \n                \n\n        if ($myPSBoundParameters.ContainsKey('CimSession')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('AsJob')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] \n        }\n                    \n\n}\n                \n\nfunction Get-NetIPv6Protocol\n{\n    [CmdletBinding(DefaultParameterSetName='ByName', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/StandardCimv2/MSFT_NetIPv6Protocol')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${DefaultHopLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Alias('NeighborCacheLimit')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${NeighborCacheLimitEntries},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Alias('RouteCacheLimit')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${RouteCacheLimitEntries},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Alias('ReassemblyLimit')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${ReassemblyLimitBytes},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.IcmpRedirects[]]\n    ${IcmpRedirects},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.SourceRoutingBehavior[]]\n    ${SourceRoutingBehavior},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.DhcpMediaSense[]]\n    ${DhcpMediaSense},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.MediaSenseEventLog[]]\n    ${MediaSenseEventLog},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.MldLevel[]]\n    ${MldLevel},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.MldVersion[]]\n    ${MldVersion},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.MulticastForwarding[]]\n    ${MulticastForwarding},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.GroupForwardedFragments[]]\n    ${GroupForwardedFragments},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.RandomizeIdentifiers[]]\n    ${RandomizeIdentifiers},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.AddressMaskReply[]]\n    ${AddressMaskReply},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.DeadGatewayDetection[]]\n    ${DeadGatewayDetection},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.UseTemporaryAddresses[]]\n    ${UseTemporaryAddresses},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Alias('MaxDadAttempts')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${MaxTemporaryDadAttempts},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Alias('MaxValidLifetime')]\n    [ValidateNotNull()]\n    [timespan[]]\n    ${MaxTemporaryValidLifetime},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Alias('MaxPreferredLifetime')]\n    [ValidateNotNull()]\n    [timespan[]]\n    ${MaxTemporaryPreferredLifetime},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Alias('RegenerateTime')]\n    [ValidateNotNull()]\n    [timespan[]]\n    ${TemporaryRegenerateTime},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Alias('MaxRandomTime')]\n    [ValidateNotNull()]\n    [timespan[]]\n    ${MaxTemporaryDesyncTime},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [switch]\n    ${AsJob})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('DefaultHopLimit') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DefaultHopLimit})\n        $__cmdletization_queryBuilder.FilterByProperty('DefaultHopLimit', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('NeighborCacheLimitEntries') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${NeighborCacheLimitEntries})\n        $__cmdletization_queryBuilder.FilterByProperty('NeighborCacheLimit', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('RouteCacheLimitEntries') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${RouteCacheLimitEntries})\n        $__cmdletization_queryBuilder.FilterByProperty('RouteCacheLimit', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('ReassemblyLimitBytes') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${ReassemblyLimitBytes})\n        $__cmdletization_queryBuilder.FilterByProperty('ReassemblyLimit', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('IcmpRedirects') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${IcmpRedirects})\n        $__cmdletization_queryBuilder.FilterByProperty('IcmpRedirects', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('SourceRoutingBehavior') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${SourceRoutingBehavior})\n        $__cmdletization_queryBuilder.FilterByProperty('SourceRoutingBehavior', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DhcpMediaSense') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DhcpMediaSense})\n        $__cmdletization_queryBuilder.FilterByProperty('DhcpMediaSense', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('MediaSenseEventLog') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${MediaSenseEventLog})\n        $__cmdletization_queryBuilder.FilterByProperty('MediaSenseEventLog', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('MldLevel') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${MldLevel})\n        $__cmdletization_queryBuilder.FilterByProperty('MldLevel', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('MldVersion') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${MldVersion})\n        $__cmdletization_queryBuilder.FilterByProperty('MldVersion', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('MulticastForwarding') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${MulticastForwarding})\n        $__cmdletization_queryBuilder.FilterByProperty('MulticastForwarding', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('GroupForwardedFragments') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${GroupForwardedFragments})\n        $__cmdletization_queryBuilder.FilterByProperty('GroupForwardedFragments', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('RandomizeIdentifiers') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${RandomizeIdentifiers})\n        $__cmdletization_queryBuilder.FilterByProperty('RandomizeIdentifiers', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AddressMaskReply') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${AddressMaskReply})\n        $__cmdletization_queryBuilder.FilterByProperty('AddressMaskReply', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DeadGatewayDetection') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DeadGatewayDetection})\n        $__cmdletization_queryBuilder.FilterByProperty('DeadGatewayDetection', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('UseTemporaryAddresses') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${UseTemporaryAddresses})\n        $__cmdletization_queryBuilder.FilterByProperty('UseTemporaryAddresses', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('MaxTemporaryDadAttempts') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${MaxTemporaryDadAttempts})\n        $__cmdletization_queryBuilder.FilterByProperty('MaxDadAttempts', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('MaxTemporaryValidLifetime') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${MaxTemporaryValidLifetime})\n        $__cmdletization_queryBuilder.FilterByProperty('MaxValidLifetime', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('MaxTemporaryPreferredLifetime') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${MaxTemporaryPreferredLifetime})\n        $__cmdletization_queryBuilder.FilterByProperty('MaxPreferredLifetime', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('TemporaryRegenerateTime') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${TemporaryRegenerateTime})\n        $__cmdletization_queryBuilder.FilterByProperty('RegenerateTime', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('MaxTemporaryDesyncTime') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${MaxTemporaryDesyncTime})\n        $__cmdletization_queryBuilder.FilterByProperty('MaxRandomTime', $__cmdletization_values, $false, 'Default')\n    }\n\n\n    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP MSFT_NetIPv6Protocol.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Get-NetIPv6Protocol' -Alias '*'\n        \n\nfunction Set-NetIPv6Protocol\n{\n    [CmdletBinding(DefaultParameterSetName='InputObject (cdxml)', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/StandardCimv2/MSFT_NetIPv6Protocol')]\n\n    param(\n    \n    [Parameter(ParameterSetName='InputObject (cdxml)', ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetIPv6Protocol')]\n    [ValidateNotNull()]\n    [ciminstance[]]\n    ${InputObject},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [uint32]\n    ${DefaultHopLimit},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('NeighborCacheLimit')]\n    [uint32]\n    ${NeighborCacheLimitEntries},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('RouteCacheLimit')]\n    [uint32]\n    ${RouteCacheLimitEntries},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('ReassemblyLimit')]\n    [uint32]\n    ${ReassemblyLimitBytes},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.IcmpRedirects]\n    ${IcmpRedirects},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.SourceRoutingBehavior]\n    ${SourceRoutingBehavior},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.DhcpMediaSense]\n    ${DhcpMediaSense},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.MediaSenseEventLog]\n    ${MediaSenseEventLog},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.MldLevel]\n    ${MldLevel},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.MldVersion]\n    ${MldVersion},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.MulticastForwarding]\n    ${MulticastForwarding},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.GroupForwardedFragments]\n    ${GroupForwardedFragments},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.RandomizeIdentifiers]\n    ${RandomizeIdentifiers},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.AddressMaskReply]\n    ${AddressMaskReply},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.DeadGatewayDetection]\n    ${DeadGatewayDetection},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.UseTemporaryAddresses]\n    ${UseTemporaryAddresses},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('MaxDadAttempts')]\n    [uint32]\n    ${MaxTemporaryDadAttempts},\n\n    [Parameter(ParameterSetName='InputO"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-NetIPAddress"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-NetIPAddress"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-NetIPAddress"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-NetIPAddress"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4104,
      "details": "[object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('AddressMaskReply')) {\n            [object]$__cmdletization_value = ${AddressMaskReply}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AddressMaskReply'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.AddressMaskReply'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AddressMaskReply'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.AddressMaskReply'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('DeadGatewayDetection')) {\n            [object]$__cmdletization_value = ${DeadGatewayDetection}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DeadGatewayDetection'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.DeadGatewayDetection'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DeadGatewayDetection'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.DeadGatewayDetection'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('MinimumMtu')) {\n            [object]$__cmdletization_value = ${MinimumMtu}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MinimumMtu'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MinimumMtu'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n      $__cmdletization_returnValue = $null\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:ModifyInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru\n            if ($PSBoundParameters.ContainsKey('InputObject')) {\n                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }\n            } else {\n                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)\n            }\n        }\n    }\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP MSFT_NetIPv4Protocol.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Set-NetIPv4Protocol' -Alias '*'"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4104,
      "details": "ect (cdxml)')]\n    [uint32]\n    ${MinimumMtu},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${AsJob},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${PassThru})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n\n\n    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n    switch -exact ($PSCmdlet.ParameterSetName) { \n        { @('InputObject (cdxml)') -contains $_ } {\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('DefaultHopLimit')) {\n            [object]$__cmdletization_value = ${DefaultHopLimit}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DefaultHopLimit'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DefaultHopLimit'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('NeighborCacheLimitEntries')) {\n            [object]$__cmdletization_value = ${NeighborCacheLimitEntries}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NeighborCacheLimit'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NeighborCacheLimit'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('RouteCacheLimitEntries')) {\n            [object]$__cmdletization_value = ${RouteCacheLimitEntries}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RouteCacheLimit'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RouteCacheLimit'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('ReassemblyLimitBytes')) {\n            [object]$__cmdletization_value = ${ReassemblyLimitBytes}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ReassemblyLimit'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ReassemblyLimit'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('IcmpRedirects')) {\n            [object]$__cmdletization_value = ${IcmpRedirects}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IcmpRedirects'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.IcmpRedirects'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IcmpRedirects'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.IcmpRedirects'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('SourceRoutingBehavior')) {\n            [object]$__cmdletization_value = ${SourceRoutingBehavior}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SourceRoutingBehavior'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.SourceRoutingBehavior'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SourceRoutingBehavior'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.SourceRoutingBehavior'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('DhcpMediaSense')) {\n            [object]$__cmdletization_value = ${DhcpMediaSense}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DhcpMediaSense'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.DhcpMediaSense'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DhcpMediaSense'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.DhcpMediaSense'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('MediaSenseEventLog')) {\n            [object]$__cmdletization_value = ${MediaSenseEventLog}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MediaSenseEventLog'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.MediaSenseEventLog'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MediaSenseEventLog'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.MediaSenseEventLog'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('IGMPLevel')) {\n            [object]$__cmdletization_value = ${IGMPLevel}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MldLevel'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.MldLevel'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MldLevel'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.MldLevel'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('IGMPVersion')) {\n            [object]$__cmdletization_value = ${IGMPVersion}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MldVersion'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.MldVersion'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MldVersion'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.MldVersion'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('MulticastForwarding')) {\n            [object]$__cmdletization_value = ${MulticastForwarding}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MulticastForwarding'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.MulticastForwarding'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MulticastForwarding'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.MulticastForwarding'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('GroupForwardedFragments')) {\n            [object]$__cmdletization_value = ${GroupForwardedFragments}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'GroupForwardedFragments'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.GroupForwardedFragments'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'GroupForwardedFragments'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.GroupForwardedFragments'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('RandomizeIdentifiers')) {\n            [object]$__cmdletization_value = ${RandomizeIdentifiers}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RandomizeIdentifiers'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.RandomizeIdentifiers'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RandomizeIdentifiers'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.RandomizeIdentifiers'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4104,
      "details": "#requires -version 3.0\n\ntry { Microsoft.PowerShell.Core\\Set-StrictMode -Off } catch { }\n\n$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module\n\n$script:ClassName = 'ROOT/StandardCimv2/MSFT_NetIPv4Protocol'\n$script:ClassVersion = '1.0.0'\n$script:ModuleVersion = '1.0.0'\n$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]\n\n$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()\n\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function @()\n        \n\nfunction __cmdletization_BindCommonParameters\n{\n    param(\n        $__cmdletization_objectModelWrapper,\n        $myPSBoundParameters\n    )       \n                \n\n        if ($myPSBoundParameters.ContainsKey('CimSession')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('AsJob')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] \n        }\n                    \n\n}\n                \n\nfunction Get-NetIPv4Protocol\n{\n    [CmdletBinding(DefaultParameterSetName='ByName', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/StandardCimv2/MSFT_NetIPv4Protocol')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${DefaultHopLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Alias('NeighborCacheLimit')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${NeighborCacheLimitEntries},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Alias('RouteCacheLimit')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${RouteCacheLimitEntries},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Alias('ReassemblyLimit')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${ReassemblyLimitBytes},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.IcmpRedirects[]]\n    ${IcmpRedirects},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.SourceRoutingBehavior[]]\n    ${SourceRoutingBehavior},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.DhcpMediaSense[]]\n    ${DhcpMediaSense},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.MediaSenseEventLog[]]\n    ${MediaSenseEventLog},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Alias('MldLevel')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.MldLevel[]]\n    ${IGMPLevel},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Alias('MldVersion')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.MldVersion[]]\n    ${IGMPVersion},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.MulticastForwarding[]]\n    ${MulticastForwarding},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.GroupForwardedFragments[]]\n    ${GroupForwardedFragments},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.RandomizeIdentifiers[]]\n    ${RandomizeIdentifiers},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.AddressMaskReply[]]\n    ${AddressMaskReply},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.DeadGatewayDetection[]]\n    ${DeadGatewayDetection},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${MinimumMtu},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [switch]\n    ${AsJob})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('DefaultHopLimit') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DefaultHopLimit})\n        $__cmdletization_queryBuilder.FilterByProperty('DefaultHopLimit', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('NeighborCacheLimitEntries') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${NeighborCacheLimitEntries})\n        $__cmdletization_queryBuilder.FilterByProperty('NeighborCacheLimit', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('RouteCacheLimitEntries') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${RouteCacheLimitEntries})\n        $__cmdletization_queryBuilder.FilterByProperty('RouteCacheLimit', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('ReassemblyLimitBytes') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${ReassemblyLimitBytes})\n        $__cmdletization_queryBuilder.FilterByProperty('ReassemblyLimit', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('IcmpRedirects') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${IcmpRedirects})\n        $__cmdletization_queryBuilder.FilterByProperty('IcmpRedirects', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('SourceRoutingBehavior') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${SourceRoutingBehavior})\n        $__cmdletization_queryBuilder.FilterByProperty('SourceRoutingBehavior', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DhcpMediaSense') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DhcpMediaSense})\n        $__cmdletization_queryBuilder.FilterByProperty('DhcpMediaSense', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('MediaSenseEventLog') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${MediaSenseEventLog})\n        $__cmdletization_queryBuilder.FilterByProperty('MediaSenseEventLog', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('IGMPLevel') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${IGMPLevel})\n        $__cmdletization_queryBuilder.FilterByProperty('MldLevel', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('IGMPVersion') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${IGMPVersion})\n        $__cmdletization_queryBuilder.FilterByProperty('MldVersion', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('MulticastForwarding') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${MulticastForwarding})\n        $__cmdletization_queryBuilder.FilterByProperty('MulticastForwarding', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('GroupForwardedFragments') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${GroupForwardedFragments})\n        $__cmdletization_queryBuilder.FilterByProperty('GroupForwardedFragments', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('RandomizeIdentifiers') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${RandomizeIdentifiers})\n        $__cmdletization_queryBuilder.FilterByProperty('RandomizeIdentifiers', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AddressMaskReply') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${AddressMaskReply})\n        $__cmdletization_queryBuilder.FilterByProperty('AddressMaskReply', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DeadGatewayDetection') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DeadGatewayDetection})\n        $__cmdletization_queryBuilder.FilterByProperty('DeadGatewayDetection', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('MinimumMtu') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${MinimumMtu})\n        $__cmdletization_queryBuilder.FilterByProperty('MinimumMtu', $__cmdletization_values, $false, 'Default')\n    }\n\n\n    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP MSFT_NetIPv4Protocol.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Get-NetIPv4Protocol' -Alias '*'\n        \n\nfunction Set-NetIPv4Protocol\n{\n    [CmdletBinding(DefaultParameterSetName='InputObject (cdxml)', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/StandardCimv2/MSFT_NetIPv4Protocol')]\n\n    param(\n    \n    [Parameter(ParameterSetName='InputObject (cdxml)', ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetIPv4Protocol')]\n    [ValidateNotNull()]\n    [ciminstance[]]\n    ${InputObject},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [uint32]\n    ${DefaultHopLimit},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('NeighborCacheLimit')]\n    [uint32]\n    ${NeighborCacheLimitEntries},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('RouteCacheLimit')]\n    [uint32]\n    ${RouteCacheLimitEntries},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('ReassemblyLimit')]\n    [uint32]\n    ${ReassemblyLimitBytes},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.IcmpRedirects]\n    ${IcmpRedirects},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.SourceRoutingBehavior]\n    ${SourceRoutingBehavior},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.DhcpMediaSense]\n    ${DhcpMediaSense},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.MediaSenseEventLog]\n    ${MediaSenseEventLog},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('MldLevel')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.MldLevel]\n    ${IGMPLevel},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('MldVersion')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.MldVersion]\n    ${IGMPVersion},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.MulticastForwarding]\n    ${MulticastForwarding},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.GroupForwardedFragments]\n    ${GroupForwardedFragments},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.RandomizeIdentifiers]\n    ${RandomizeIdentifiers},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.AddressMaskReply]\n    ${AddressMaskReply},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.DeadGatewayDetection]\n    ${DeadGatewayDetection},\n\n    [Parameter(ParameterSetName='InputObj"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-NetIPAddress"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-NetIPAddress"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-NetIPAddress"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-NetIPAddress"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4104,
      "details": "eneratedTypes.NetIPInterface.Dhcp'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('AutomaticMetric')) {\n            [object]$__cmdletization_value = ${AutomaticMetric}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AutomaticMetric'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.AutomaticMetric'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AutomaticMetric'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.AutomaticMetric'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n      $__cmdletization_returnValue = $null\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:ModifyInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru\n            if ($PSBoundParameters.ContainsKey('InputObject')) {\n                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }\n            } else {\n                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)\n            }\n        }\n    }\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP MSFT_NetIPInterface.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Set-NetIPInterface' -Alias '*'"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4104,
      "details": "AddressConfiguration'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.ManagedAddressConfiguration'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('OtherStatefulConfiguration')) {\n            [object]$__cmdletization_value = ${OtherStatefulConfiguration}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'OtherStatefulConfiguration'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.OtherStatefulConfiguration'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'OtherStatefulConfiguration'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.OtherStatefulConfiguration'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('WeakHostSend')) {\n            [object]$__cmdletization_value = ${WeakHostSend}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'WeakHostSend'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.WeakHostSend'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'WeakHostSend'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.WeakHostSend'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('WeakHostReceive')) {\n            [object]$__cmdletization_value = ${WeakHostReceive}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'WeakHostReceive'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.WeakHostReceive'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'WeakHostReceive'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.WeakHostReceive'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('IgnoreDefaultRoutes')) {\n            [object]$__cmdletization_value = ${IgnoreDefaultRoutes}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IgnoreDefaultRoutes'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.IgnoreDefaultRoutes'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IgnoreDefaultRoutes'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.IgnoreDefaultRoutes'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('AdvertisedRouterLifetime')) {\n            [object]$__cmdletization_value = ${AdvertisedRouterLifetime}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AdvertisedRouterLifetime'; ParameterType = 'System.TimeSpan'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AdvertisedRouterLifetime'; ParameterType = 'System.TimeSpan'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('AdvertiseDefaultRoute')) {\n            [object]$__cmdletization_value = ${AdvertiseDefaultRoute}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AdvertiseDefaultRoute'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.AdvertiseDefaultRoute'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AdvertiseDefaultRoute'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.AdvertiseDefaultRoute'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('CurrentHopLimit')) {\n            [object]$__cmdletization_value = ${CurrentHopLimit}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'CurrentHopLimit'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'CurrentHopLimit'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('ForceArpNdWolPattern')) {\n            [object]$__cmdletization_value = ${ForceArpNdWolPattern}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ForceArpNdWolPattern'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.ForceArpNdWolPattern'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ForceArpNdWolPattern'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.ForceArpNdWolPattern'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('DirectedMacWolPattern')) {\n            [object]$__cmdletization_value = ${DirectedMacWolPattern}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DirectedMacWolPattern'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.DirectedMacWolPattern'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DirectedMacWolPattern'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.DirectedMacWolPattern'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('EcnMarking')) {\n            [object]$__cmdletization_value = ${EcnMarking}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EcnMarking'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.EcnMarking'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EcnMarking'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.EcnMarking'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('Dhcp')) {\n            [object]$__cmdletization_value = ${Dhcp}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Dhcp'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.Dhcp'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Dhcp'; ParameterType = 'Microsoft.PowerShell.Cmdletization.G"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4104,
      "details": "(cdxml)') -contains $_ } {\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('Forwarding')) {\n            [object]$__cmdletization_value = ${Forwarding}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Forwarding'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.Forwarding'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Forwarding'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.Forwarding'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('ClampMss')) {\n            [object]$__cmdletization_value = ${ClampMss}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ClampMss'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.ClampMss'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ClampMss'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.ClampMss'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('Advertising')) {\n            [object]$__cmdletization_value = ${Advertising}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Advertising'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.Advertising'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Advertising'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.Advertising'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('NlMtuBytes')) {\n            [object]$__cmdletization_value = ${NlMtuBytes}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NlMtu'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NlMtu'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('InterfaceMetric')) {\n            [object]$__cmdletization_value = ${InterfaceMetric}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InterfaceMetric'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InterfaceMetric'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('NeighborUnreachabilityDetection')) {\n            [object]$__cmdletization_value = ${NeighborUnreachabilityDetection}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NeighborUnreachabilityDetection'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.NeighborUnreachabilityDetection'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NeighborUnreachabilityDetection'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.NeighborUnreachabilityDetection'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('BaseReachableTimeMs')) {\n            [object]$__cmdletization_value = ${BaseReachableTimeMs}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'BaseReachableTime'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'BaseReachableTime'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('RetransmitTimeMs')) {\n            [object]$__cmdletization_value = ${RetransmitTimeMs}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RetransmitTime'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RetransmitTime'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('DadTransmits')) {\n            [object]$__cmdletization_value = ${DadTransmits}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DadTransmits'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DadTransmits'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('DadRetransmitTimeMs')) {\n            [object]$__cmdletization_value = ${DadRetransmitTimeMs}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DadRetransmitTime'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DadRetransmitTime'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('RouterDiscovery')) {\n            [object]$__cmdletization_value = ${RouterDiscovery}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RouterDiscovery'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.RouterDiscovery'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RouterDiscovery'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.RouterDiscovery'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('ManagedAddressConfiguration')) {\n            [object]$__cmdletization_value = ${ManagedAddressConfiguration}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ManagedAddressConfiguration'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.ManagedAddressConfiguration'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Managed"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4104,
      "details": "Microsoft.PowerShell.Core\\Export-ModuleMember -Function 'Get-NetIPInterface' -Alias '*'\n        \n\nfunction Set-NetIPInterface\n{\n    [CmdletBinding(DefaultParameterSetName='ByName', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/StandardCimv2/MSFT_NetIPInterface')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByName', ValueFromPipelineByPropertyName=$true)]\n    [Alias('ifIndex')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${InterfaceIndex},\n\n    [Parameter(ParameterSetName='ByName', Position=0, ValueFromPipelineByPropertyName=$true)]\n    [Alias('ifAlias')]\n    [ValidateNotNull()]\n    [string[]]\n    ${InterfaceAlias},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.AddressFamily[]]\n    ${AddressFamily},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${ReachableTime},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.NeighborDiscoverySupported[]]\n    ${NeighborDiscoverySupported},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${CompartmentId},\n\n    [Parameter(ParameterSetName='ByName')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='ByName')]\n    [switch]\n    ${IncludeAllCompartments},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetIPInterface')]\n    [ValidateNotNull()]\n    [ciminstance[]]\n    ${InputObject},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.Forwarding]\n    ${Forwarding},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.ClampMss]\n    ${ClampMss},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.Advertising]\n    ${Advertising},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [uint32]\n    ${NlMtuBytes},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [uint32]\n    ${InterfaceMetric},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.NeighborUnreachabilityDetection]\n    ${NeighborUnreachabilityDetection},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('BaseReachableTime')]\n    [uint32]\n    ${BaseReachableTimeMs},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('RetransmitTime')]\n    [uint32]\n    ${RetransmitTimeMs},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [uint32]\n    ${DadTransmits},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('DadRetransmitTime')]\n    [uint32]\n    ${DadRetransmitTimeMs},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.RouterDiscovery]\n    ${RouterDiscovery},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.ManagedAddressConfiguration]\n    ${ManagedAddressConfiguration},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.OtherStatefulConfiguration]\n    ${OtherStatefulConfiguration},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.WeakHostSend]\n    ${WeakHostSend},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.WeakHostReceive]\n    ${WeakHostReceive},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.IgnoreDefaultRoutes]\n    ${IgnoreDefaultRoutes},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [timespan]\n    ${AdvertisedRouterLifetime},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.AdvertiseDefaultRoute]\n    ${AdvertiseDefaultRoute},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [uint32]\n    ${CurrentHopLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.ForceArpNdWolPattern]\n    ${ForceArpNdWolPattern},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.DirectedMacWolPattern]\n    ${DirectedMacWolPattern},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.EcnMarking]\n    ${EcnMarking},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.Dhcp]\n    ${Dhcp},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.AutomaticMetric]\n    ${AutomaticMetric},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${AsJob},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${PassThru})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('InterfaceIndex') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${InterfaceIndex})\n        $__cmdletization_queryBuilder.FilterByProperty('InterfaceIndex', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('InterfaceAlias') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${InterfaceAlias})\n        $__cmdletization_queryBuilder.FilterByProperty('InterfaceAlias', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AddressFamily') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${AddressFamily})\n        $__cmdletization_queryBuilder.FilterByProperty('AddressFamily', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('ReachableTime') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${ReachableTime})\n        $__cmdletization_queryBuilder.FilterByProperty('ReachableTime', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('NeighborDiscoverySupported') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${NeighborDiscoverySupported})\n        $__cmdletization_queryBuilder.FilterByProperty('NeighborDiscoverySupported', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('CompartmentId') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${CompartmentId})\n        $__cmdletization_queryBuilder.FilterByProperty('CompartmentId', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})\n    }\n    if ($PSBoundParameters.ContainsKey('IncludeAllCompartments') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('IncludeAllCompartments', ${IncludeAllCompartments})\n    }\n\n\n    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n    switch -exact ($PSCmdlet.ParameterSetName) { \n        { @('ByName', 'InputObject"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4104,
      "details": "', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AddressFamily') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${AddressFamily})\n        $__cmdletization_queryBuilder.FilterByProperty('AddressFamily', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Forwarding') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Forwarding})\n        $__cmdletization_queryBuilder.FilterByProperty('Forwarding', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('ClampMss') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${ClampMss})\n        $__cmdletization_queryBuilder.FilterByProperty('ClampMss', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Advertising') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Advertising})\n        $__cmdletization_queryBuilder.FilterByProperty('Advertising', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('NlMtuBytes') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${NlMtuBytes})\n        $__cmdletization_queryBuilder.FilterByProperty('NlMtu', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('InterfaceMetric') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${InterfaceMetric})\n        $__cmdletization_queryBuilder.FilterByProperty('InterfaceMetric', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('NeighborUnreachabilityDetection') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${NeighborUnreachabilityDetection})\n        $__cmdletization_queryBuilder.FilterByProperty('NeighborUnreachabilityDetection', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('BaseReachableTimeMs') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${BaseReachableTimeMs})\n        $__cmdletization_queryBuilder.FilterByProperty('BaseReachableTime', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('ReachableTimeMs') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${ReachableTimeMs})\n        $__cmdletization_queryBuilder.FilterByProperty('ReachableTime', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('RetransmitTimeMs') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${RetransmitTimeMs})\n        $__cmdletization_queryBuilder.FilterByProperty('RetransmitTime', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DadTransmits') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DadTransmits})\n        $__cmdletization_queryBuilder.FilterByProperty('DadTransmits', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DadRetransmitTimeMs') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DadRetransmitTimeMs})\n        $__cmdletization_queryBuilder.FilterByProperty('DadRetransmitTime', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('RouterDiscovery') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${RouterDiscovery})\n        $__cmdletization_queryBuilder.FilterByProperty('RouterDiscovery', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('ManagedAddressConfiguration') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${ManagedAddressConfiguration})\n        $__cmdletization_queryBuilder.FilterByProperty('ManagedAddressConfiguration', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('OtherStatefulConfiguration') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${OtherStatefulConfiguration})\n        $__cmdletization_queryBuilder.FilterByProperty('OtherStatefulConfiguration', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('WeakHostSend') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${WeakHostSend})\n        $__cmdletization_queryBuilder.FilterByProperty('WeakHostSend', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('WeakHostReceive') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${WeakHostReceive})\n        $__cmdletization_queryBuilder.FilterByProperty('WeakHostReceive', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('IgnoreDefaultRoutes') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${IgnoreDefaultRoutes})\n        $__cmdletization_queryBuilder.FilterByProperty('IgnoreDefaultRoutes', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AdvertisedRouterLifetime') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${AdvertisedRouterLifetime})\n        $__cmdletization_queryBuilder.FilterByProperty('AdvertisedRouterLifetime', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AdvertiseDefaultRoute') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${AdvertiseDefaultRoute})\n        $__cmdletization_queryBuilder.FilterByProperty('AdvertiseDefaultRoute', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('CurrentHopLimit') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${CurrentHopLimit})\n        $__cmdletization_queryBuilder.FilterByProperty('CurrentHopLimit', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('ForceArpNdWolPattern') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${ForceArpNdWolPattern})\n        $__cmdletization_queryBuilder.FilterByProperty('ForceArpNdWolPattern', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DirectedMacWolPattern') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DirectedMacWolPattern})\n        $__cmdletization_queryBuilder.FilterByProperty('DirectedMacWolPattern', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('EcnMarking') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${EcnMarking})\n        $__cmdletization_queryBuilder.FilterByProperty('EcnMarking', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Dhcp') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Dhcp})\n        $__cmdletization_queryBuilder.FilterByProperty('Dhcp', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('ConnectionState') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${ConnectionState})\n        $__cmdletization_queryBuilder.FilterByProperty('ConnectionState', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AutomaticMetric') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${AutomaticMetric})\n        $__cmdletization_queryBuilder.FilterByProperty('AutomaticMetric', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('NeighborDiscoverySupported') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${NeighborDiscoverySupported})\n        $__cmdletization_queryBuilder.FilterByProperty('NeighborDiscoverySupported', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('CompartmentId') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${CompartmentId})\n        $__cmdletization_queryBuilder.FilterByProperty('CompartmentId', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedRoute') -and (@('ByRoute') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedRoute}, 'MSFT_NetIPInterfaceRoute', 'Dependent', 'Antecedent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedIPAddress') -and (@('ByIPAddress') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedIPAddress}, 'MSFT_NetIPInterfaceIPAddress', 'Dependent', 'Antecedent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNeighbor') -and (@('ByNeighbor') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNeighbor}, 'MSFT_NetIPInterfaceNeighbor', 'Dependent', 'Antecedent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedAdapter') -and (@('ByAdapter') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedAdapter}, 'MSFT_NetIPInterfaceAdapter', 'Dependent', 'Antecedent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})\n    }\n    if ($PSBoundParameters.ContainsKey('IncludeAllCompartments') -and (@('ByName', 'ByRoute', 'ByIPAddress', 'ByNeighbor', 'ByAdapter') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('IncludeAllCompartments', ${IncludeAllCompartments})\n    }\n\n\n    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP MSFT_NetIPInterface.cdxml-Help.xml\n}"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4104,
      "details": "#requires -version 3.0\n\ntry { Microsoft.PowerShell.Core\\Set-StrictMode -Off } catch { }\n\n$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module\n\n$script:ClassName = 'ROOT/StandardCimv2/MSFT_NetIPInterface'\n$script:ClassVersion = '1.0.0'\n$script:ModuleVersion = '1.0.0'\n$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]\n\n$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()\n\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function @()\n        \n\nfunction __cmdletization_BindCommonParameters\n{\n    param(\n        $__cmdletization_objectModelWrapper,\n        $myPSBoundParameters\n    )       \n                \n\n        if ($myPSBoundParameters.ContainsKey('CimSession')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('AsJob')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] \n        }\n                    \n\n}\n                \n\nfunction Get-NetIPInterface\n{\n    [CmdletBinding(DefaultParameterSetName='ByName', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/StandardCimv2/MSFT_NetIPInterface')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByName', ValueFromPipelineByPropertyName=$true)]\n    [Alias('ifIndex')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${InterfaceIndex},\n\n    [Parameter(ParameterSetName='ByName', Position=0, ValueFromPipelineByPropertyName=$true)]\n    [Alias('ifAlias')]\n    [ValidateNotNull()]\n    [string[]]\n    ${InterfaceAlias},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.AddressFamily[]]\n    ${AddressFamily},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.Forwarding[]]\n    ${Forwarding},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.ClampMss[]]\n    ${ClampMss},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.Advertising[]]\n    ${Advertising},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${NlMtuBytes},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${InterfaceMetric},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.NeighborUnreachabilityDetection[]]\n    ${NeighborUnreachabilityDetection},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Alias('BaseReachableTime')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${BaseReachableTimeMs},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Alias('ReachableTime')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${ReachableTimeMs},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Alias('RetransmitTime')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${RetransmitTimeMs},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${DadTransmits},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Alias('DadRetransmitTime')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${DadRetransmitTimeMs},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.RouterDiscovery[]]\n    ${RouterDiscovery},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.ManagedAddressConfiguration[]]\n    ${ManagedAddressConfiguration},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.OtherStatefulConfiguration[]]\n    ${OtherStatefulConfiguration},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.WeakHostSend[]]\n    ${WeakHostSend},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.WeakHostReceive[]]\n    ${WeakHostReceive},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.IgnoreDefaultRoutes[]]\n    ${IgnoreDefaultRoutes},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [timespan[]]\n    ${AdvertisedRouterLifetime},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.AdvertiseDefaultRoute[]]\n    ${AdvertiseDefaultRoute},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${CurrentHopLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.ForceArpNdWolPattern[]]\n    ${ForceArpNdWolPattern},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.DirectedMacWolPattern[]]\n    ${DirectedMacWolPattern},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.EcnMarking[]]\n    ${EcnMarking},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.Dhcp[]]\n    ${Dhcp},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.ConnectionState[]]\n    ${ConnectionState},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.AutomaticMetric[]]\n    ${AutomaticMetric},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.NeighborDiscoverySupported[]]\n    ${NeighborDiscoverySupported},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${CompartmentId},\n\n    [Parameter(ParameterSetName='ByRoute', ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetRoute')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedRoute},\n\n    [Parameter(ParameterSetName='ByIPAddress', ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIPAddress')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedIPAddress},\n\n    [Parameter(ParameterSetName='ByNeighbor', ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetNeighbor')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNeighbor},\n\n    [Parameter(ParameterSetName='ByAdapter', ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetAdapter')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedAdapter},\n\n    [Parameter(ParameterSetName='ByName')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByRoute')]\n    [Parameter(ParameterSetName='ByIPAddress')]\n    [Parameter(ParameterSetName='ByNeighbor')]\n    [Parameter(ParameterSetName='ByAdapter')]\n    [switch]\n    ${IncludeAllCompartments},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByRoute')]\n    [Parameter(ParameterSetName='ByIPAddress')]\n    [Parameter(ParameterSetName='ByNeighbor')]\n    [Parameter(ParameterSetName='ByAdapter')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByRoute')]\n    [Parameter(ParameterSetName='ByIPAddress')]\n    [Parameter(ParameterSetName='ByNeighbor')]\n    [Parameter(ParameterSetName='ByAdapter')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByRoute')]\n    [Parameter(ParameterSetName='ByIPAddress')]\n    [Parameter(ParameterSetName='ByNeighbor')]\n    [Parameter(ParameterSetName='ByAdapter')]\n    [switch]\n    ${AsJob})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('InterfaceIndex') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${InterfaceIndex})\n        $__cmdletization_queryBuilder.FilterByProperty('InterfaceIndex', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('InterfaceAlias') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${InterfaceAlias})\n        $__cmdletization_queryBuilder.FilterByProperty('InterfaceAlias"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-NetIPAddress"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-NetIPAddress"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-NetIPAddress"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-NetIPAddress"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-NetIPAddress"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-NetIPAddress"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4104,
      "details": "${AddressState},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [ValidateNotNull()]\n    [timespan[]]\n    ${ValidLifetime},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [ValidateNotNull()]\n    [timespan[]]\n    ${PreferredLifetime},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [ValidateNotNull()]\n    [bool[]]\n    ${SkipAsSource},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [string]\n    ${DefaultGateway},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [switch]\n    ${IncludeAllCompartments},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetIPAddress')]\n    [ValidateNotNull()]\n    [ciminstance[]]\n    ${InputObject},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${AsJob},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${PassThru})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('IPAddress') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${IPAddress})\n        $__cmdletization_queryBuilder.FilterByProperty('IPAddress', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('InterfaceIndex') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${InterfaceIndex})\n        $__cmdletization_queryBuilder.FilterByProperty('InterfaceIndex', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('InterfaceAlias') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${InterfaceAlias})\n        $__cmdletization_queryBuilder.FilterByProperty('InterfaceAlias', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AddressFamily') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${AddressFamily})\n        $__cmdletization_queryBuilder.FilterByProperty('AddressFamily', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Type') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Type})\n        $__cmdletization_queryBuilder.FilterByProperty('Type', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PrefixLength') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PrefixLength})\n        $__cmdletization_queryBuilder.FilterByProperty('PrefixLength', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PrefixOrigin') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PrefixOrigin})\n        $__cmdletization_queryBuilder.FilterByProperty('PrefixOrigin', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('SuffixOrigin') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${SuffixOrigin})\n        $__cmdletization_queryBuilder.FilterByProperty('SuffixOrigin', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AddressState') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${AddressState})\n        $__cmdletization_queryBuilder.FilterByProperty('AddressState', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('ValidLifetime') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${ValidLifetime})\n        $__cmdletization_queryBuilder.FilterByProperty('ValidLifetime', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PreferredLifetime') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PreferredLifetime})\n        $__cmdletization_queryBuilder.FilterByProperty('PreferredLifetime', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('SkipAsSource') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${SkipAsSource})\n        $__cmdletization_queryBuilder.FilterByProperty('SkipAsSource', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})\n    }\n    if ($PSBoundParameters.ContainsKey('DefaultGateway') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('DefaultGateway', ${DefaultGateway})\n    }\n    if ($PSBoundParameters.ContainsKey('IncludeAllCompartments') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('IncludeAllCompartments', ${IncludeAllCompartments})\n    }\n\n\n    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n    switch -exact ($PSCmdlet.ParameterSetName) { \n        { @('Query (cdxml)', 'InputObject (cdxml)') -contains $_ } {\n      $__cmdletization_returnValue = $null\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:DeleteInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru\n            if ($PSBoundParameters.ContainsKey('InputObject')) {\n                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }\n            } else {\n                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)\n            }\n        }\n    }\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP MSFT_NetIPAddress.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Remove-NetIPAddress' -Alias '*'"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4104,
      "details": "tization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('IPAddress') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${IPAddress})\n        $__cmdletization_queryBuilder.FilterByProperty('IPAddress', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('InterfaceIndex') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${InterfaceIndex})\n        $__cmdletization_queryBuilder.FilterByProperty('InterfaceIndex', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('InterfaceAlias') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${InterfaceAlias})\n        $__cmdletization_queryBuilder.FilterByProperty('InterfaceAlias', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AddressFamily') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${AddressFamily})\n        $__cmdletization_queryBuilder.FilterByProperty('AddressFamily', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Type') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Type})\n        $__cmdletization_queryBuilder.FilterByProperty('Type', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PrefixOrigin') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PrefixOrigin})\n        $__cmdletization_queryBuilder.FilterByProperty('PrefixOrigin', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('SuffixOrigin') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${SuffixOrigin})\n        $__cmdletization_queryBuilder.FilterByProperty('SuffixOrigin', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AddressState') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${AddressState})\n        $__cmdletization_queryBuilder.FilterByProperty('AddressState', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})\n    }\n    if ($PSBoundParameters.ContainsKey('IncludeAllCompartments') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('IncludeAllCompartments', ${IncludeAllCompartments})\n    }\n\n\n    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n    switch -exact ($PSCmdlet.ParameterSetName) { \n        { @('Query (cdxml)', 'InputObject (cdxml)') -contains $_ } {\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('PrefixLength')) {\n            [object]$__cmdletization_value = ${PrefixLength}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PrefixLength'; ParameterType = 'System.Byte'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PrefixLength'; ParameterType = 'System.Byte'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('ValidLifetime')) {\n            [object]$__cmdletization_value = ${ValidLifetime}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ValidLifetime'; ParameterType = 'System.TimeSpan'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ValidLifetime'; ParameterType = 'System.TimeSpan'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('PreferredLifetime')) {\n            [object]$__cmdletization_value = ${PreferredLifetime}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PreferredLifetime'; ParameterType = 'System.TimeSpan'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PreferredLifetime'; ParameterType = 'System.TimeSpan'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('SkipAsSource')) {\n            [object]$__cmdletization_value = ${SkipAsSource}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SkipAsSource'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SkipAsSource'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n      $__cmdletization_returnValue = $null\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:ModifyInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru\n            if ($PSBoundParameters.ContainsKey('InputObject')) {\n                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }\n            } else {\n                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)\n            }\n        }\n    }\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP MSFT_NetIPAddress.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Set-NetIPAddress' -Alias '*'\n        \n\nfunction Remove-NetIPAddress\n{\n    [CmdletBinding(DefaultParameterSetName='Query (cdxml)', SupportsShouldProcess=$true, ConfirmImpact='High', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/StandardCimv2/MSFT_NetIPAddress')]\n\n    param(\n    \n    [Parameter(ParameterSetName='Query (cdxml)', Position=0, ValueFromPipelineByPropertyName=$true)]\n    [Alias('LocalAddress')]\n    [ValidateNotNull()]\n    [string[]]\n    ${IPAddress},\n\n    [Parameter(ParameterSetName='Query (cdxml)', ValueFromPipelineByPropertyName=$true)]\n    [Alias('ifIndex')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${InterfaceIndex},\n\n    [Parameter(ParameterSetName='Query (cdxml)', ValueFromPipelineByPropertyName=$true)]\n    [Alias('ifAlias')]\n    [ValidateNotNull()]\n    [string[]]\n    ${InterfaceAlias},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPAddress.AddressFamily[]]\n    ${AddressFamily},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPAddress.Type[]]\n    ${Type},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [ValidateNotNull()]\n    [byte[]]\n    ${PrefixLength},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPAddress.PrefixOrigin[]]\n    ${PrefixOrigin},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPAddress.SuffixOrigin[]]\n    ${SuffixOrigin},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPAddress.AddressState[]]"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4104,
      "details": "}\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('IPAddress') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${IPAddress})\n        $__cmdletization_queryBuilder.FilterByProperty('IPAddress', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('InterfaceIndex') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${InterfaceIndex})\n        $__cmdletization_queryBuilder.FilterByProperty('InterfaceIndex', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('InterfaceAlias') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${InterfaceAlias})\n        $__cmdletization_queryBuilder.FilterByProperty('InterfaceAlias', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AddressFamily') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${AddressFamily})\n        $__cmdletization_queryBuilder.FilterByProperty('AddressFamily', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Type') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Type})\n        $__cmdletization_queryBuilder.FilterByProperty('Type', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PrefixLength') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PrefixLength})\n        $__cmdletization_queryBuilder.FilterByProperty('PrefixLength', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PrefixOrigin') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PrefixOrigin})\n        $__cmdletization_queryBuilder.FilterByProperty('PrefixOrigin', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('SuffixOrigin') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${SuffixOrigin})\n        $__cmdletization_queryBuilder.FilterByProperty('SuffixOrigin', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AddressState') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${AddressState})\n        $__cmdletization_queryBuilder.FilterByProperty('AddressState', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('ValidLifetime') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${ValidLifetime})\n        $__cmdletization_queryBuilder.FilterByProperty('ValidLifetime', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PreferredLifetime') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PreferredLifetime})\n        $__cmdletization_queryBuilder.FilterByProperty('PreferredLifetime', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('SkipAsSource') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${SkipAsSource})\n        $__cmdletization_queryBuilder.FilterByProperty('SkipAsSource', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedIPInterface') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedIPInterface}, 'MSFT_NetIPInterfaceIPAddress', 'Antecedent', 'Dependent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})\n    }\n    if ($PSBoundParameters.ContainsKey('IncludeAllCompartments') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('IncludeAllCompartments', ${IncludeAllCompartments})\n    }\n\n\n    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP MSFT_NetIPAddress.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Get-NetIPAddress' -Alias '*'\n        \n\nfunction Set-NetIPAddress\n{\n    [CmdletBinding(DefaultParameterSetName='Query (cdxml)', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/StandardCimv2/MSFT_NetIPAddress')]\n\n    param(\n    \n    [Parameter(ParameterSetName='Query (cdxml)', Position=0, ValueFromPipelineByPropertyName=$true)]\n    [Alias('LocalAddress')]\n    [ValidateNotNull()]\n    [string[]]\n    ${IPAddress},\n\n    [Parameter(ParameterSetName='Query (cdxml)', ValueFromPipelineByPropertyName=$true)]\n    [Alias('ifIndex')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${InterfaceIndex},\n\n    [Parameter(ParameterSetName='Query (cdxml)', ValueFromPipelineByPropertyName=$true)]\n    [Alias('ifAlias')]\n    [ValidateNotNull()]\n    [string[]]\n    ${InterfaceAlias},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPAddress.AddressFamily[]]\n    ${AddressFamily},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPAddress.Type[]]\n    ${Type},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPAddress.PrefixOrigin[]]\n    ${PrefixOrigin},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPAddress.SuffixOrigin[]]\n    ${SuffixOrigin},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPAddress.AddressState[]]\n    ${AddressState},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [switch]\n    ${IncludeAllCompartments},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetIPAddress')]\n    [ValidateNotNull()]\n    [ciminstance[]]\n    ${InputObject},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [byte]\n    ${PrefixLength},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [timespan]\n    ${ValidLifetime},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [timespan]\n    ${PreferredLifetime},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [bool]\n    ${SkipAsSource},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${AsJob},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${PassThru})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdle"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4104,
      "details": "l\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('PrefixLength')) {\n          [object]$__cmdletization_value = ${PrefixLength}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PrefixLength'; ParameterType = 'System.Byte'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PrefixLength'; ParameterType = 'System.Byte'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('ValidLifetime')) {\n          [object]$__cmdletization_value = ${ValidLifetime}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ValidLifetime'; ParameterType = 'System.TimeSpan'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ValidLifetime'; ParameterType = 'System.TimeSpan'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('PreferredLifetime')) {\n          [object]$__cmdletization_value = ${PreferredLifetime}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PreferredLifetime'; ParameterType = 'System.TimeSpan'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PreferredLifetime'; ParameterType = 'System.TimeSpan'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('SkipAsSource')) {\n          [object]$__cmdletization_value = ${SkipAsSource}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SkipAsSource'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SkipAsSource'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('PolicyStore')) {\n          [object]$__cmdletization_value = ${PolicyStore}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'CmdletOutput'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'Out'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.UInt32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Create', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo)\n        }\n    }\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP MSFT_NetIPAddress.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'New-NetIPAddress' -Alias '*'\n        \n\nfunction Get-NetIPAddress\n{\n    [CmdletBinding(DefaultParameterSetName='Query (cdxml)', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/StandardCimv2/MSFT_NetIPAddress')]\n\n    param(\n    \n    [Parameter(ParameterSetName='Query (cdxml)', Position=0, ValueFromPipelineByPropertyName=$true)]\n    [Alias('LocalAddress')]\n    [ValidateNotNull()]\n    [string[]]\n    ${IPAddress},\n\n    [Parameter(ParameterSetName='Query (cdxml)', ValueFromPipelineByPropertyName=$true)]\n    [Alias('ifIndex')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${InterfaceIndex},\n\n    [Parameter(ParameterSetName='Query (cdxml)', ValueFromPipelineByPropertyName=$true)]\n    [Alias('ifAlias')]\n    [ValidateNotNull()]\n    [string[]]\n    ${InterfaceAlias},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPAddress.AddressFamily[]]\n    ${AddressFamily},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPAddress.Type[]]\n    ${Type},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [ValidateNotNull()]\n    [byte[]]\n    ${PrefixLength},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPAddress.PrefixOrigin[]]\n    ${PrefixOrigin},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPAddress.SuffixOrigin[]]\n    ${SuffixOrigin},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPAddress.AddressState[]]\n    ${AddressState},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [ValidateNotNull()]\n    [timespan[]]\n    ${ValidLifetime},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [ValidateNotNull()]\n    [timespan[]]\n    ${PreferredLifetime},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [ValidateNotNull()]\n    [bool[]]\n    ${SkipAsSource},\n\n    [Parameter(ParameterSetName='Query (cdxml)', ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIPInterface')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedIPInterface},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [switch]\n    ${IncludeAllCompartments},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [switch]\n    ${AsJob})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw"
    }
  ],
  "PS-023": [
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4104,
      "details": "$global:?"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-NetRoute"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-NetRoute"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4104,
      "details": "function __cmdletization_BindCommonParameters\n{\n    param(\n        $__cmdletization_objectModelWrapper,\n        $myPSBoundParameters\n    )       \n                \n\n        if ($myPSBoundParameters.ContainsKey('CimSession')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('AsJob')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] \n        }\n                    \n\n}"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-NetRoute"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-NetRoute"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-NetRoute"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-NetRoute"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-NetRoute"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-NetRoute"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-NetRoute"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-NetRoute"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4104,
      "details": "#requires -version 3.0\n\ntry { Microsoft.PowerShell.Core\\Set-StrictMode -Off } catch { }\n\n$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module\n\n$script:ClassName = 'ROOT/StandardCimv2/MSFT_NetUDPSetting'\n$script:ClassVersion = '1.0.0'\n$script:ModuleVersion = '1.0.0'\n$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]\n\n$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()\n\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function @()\n        \n\nfunction __cmdletization_BindCommonParameters\n{\n    param(\n        $__cmdletization_objectModelWrapper,\n        $myPSBoundParameters\n    )       \n                \n\n        if ($myPSBoundParameters.ContainsKey('CimSession')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('AsJob')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] \n        }\n                    \n\n}\n                \n\nfunction Get-NetUDPSetting\n{\n    [CmdletBinding(DefaultParameterSetName='ByName', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/StandardCimv2/MSFT_NetUDPSetting')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByName', Position=0)]\n    [ValidateNotNull()]\n    [uint16[]]\n    ${DynamicPortRangeStartPort},\n\n    [Parameter(ParameterSetName='ByName', Position=1)]\n    [ValidateNotNull()]\n    [uint16[]]\n    ${DynamicPortRangeNumberOfPorts},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [switch]\n    ${AsJob})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('DynamicPortRangeStartPort') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DynamicPortRangeStartPort})\n        $__cmdletization_queryBuilder.FilterByProperty('DynamicPortRangeStartPort', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DynamicPortRangeNumberOfPorts') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DynamicPortRangeNumberOfPorts})\n        $__cmdletization_queryBuilder.FilterByProperty('DynamicPortRangeNumberOfPorts', $__cmdletization_values, $false, 'Default')\n    }\n\n\n    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP MSFT_NetUDPSetting.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Get-NetUDPSetting' -Alias '*'\n        \n\nfunction Set-NetUDPSetting\n{\n    [CmdletBinding(DefaultParameterSetName='InputObject (cdxml)', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/StandardCimv2/MSFT_NetUDPSetting')]\n\n    param(\n    \n    [Parameter(ParameterSetName='InputObject (cdxml)', ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetUDPSetting')]\n    [ValidateNotNull()]\n    [ciminstance[]]\n    ${InputObject},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [uint16]\n    ${DynamicPortRangeStartPort},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [uint16]\n    ${DynamicPortRangeNumberOfPorts},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${AsJob},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${PassThru})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n\n\n    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n    switch -exact ($PSCmdlet.ParameterSetName) { \n        { @('InputObject (cdxml)') -contains $_ } {\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('DynamicPortRangeStartPort')) {\n            [object]$__cmdletization_value = ${DynamicPortRangeStartPort}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DynamicPortRangeStartPort'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DynamicPortRangeStartPort'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('DynamicPortRangeNumberOfPorts')) {\n            [object]$__cmdletization_value = ${DynamicPortRangeNumberOfPorts}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DynamicPortRangeNumberOfPorts'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DynamicPortRangeNumberOfPorts'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n      $__cmdletization_returnValue = $null\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:ModifyInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru\n            if ($PSBoundParameters.ContainsKey('InputObject')) {\n                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }\n            } else {\n                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)\n            }\n        }\n    }\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP MSFT_NetUDPSetting.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Set-NetUDPSetting' -Alias '*'"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-NetRoute"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-NetRoute"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-NetRoute"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4104,
      "details": "#requires -version 3.0\n\ntry { Microsoft.PowerShell.Core\\Set-StrictMode -Off } catch { }\n\n$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module\n\n$script:ClassName = 'ROOT/StandardCimv2/MSFT_NetUDPEndpoint'\n$script:ClassVersion = '1.0.0'\n$script:ModuleVersion = '1.0.0'\n$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]\n\n$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()\n\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function @()\n        \n\nfunction __cmdletization_BindCommonParameters\n{\n    param(\n        $__cmdletization_objectModelWrapper,\n        $myPSBoundParameters\n    )       \n                \n\n        if ($myPSBoundParameters.ContainsKey('CimSession')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('AsJob')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] \n        }\n                    \n\n}\n                \n\nfunction Get-NetUDPEndpoint\n{\n    [CmdletBinding(DefaultParameterSetName='ByName', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/StandardCimv2/MSFT_NetUDPEndpoint')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByName', Position=0, ValueFromPipelineByPropertyName=$true)]\n    [Alias('IPAddress')]\n    [ValidateNotNull()]\n    [string[]]\n    ${LocalAddress},\n\n    [Parameter(ParameterSetName='ByName', Position=1)]\n    [ValidateNotNull()]\n    [uint16[]]\n    ${LocalPort},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${OwningProcess},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [datetime[]]\n    ${CreationTime},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [switch]\n    ${AsJob})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('LocalAddress') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${LocalAddress})\n        $__cmdletization_queryBuilder.FilterByProperty('LocalAddress', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('LocalPort') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${LocalPort})\n        $__cmdletization_queryBuilder.FilterByProperty('LocalPort', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('OwningProcess') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${OwningProcess})\n        $__cmdletization_queryBuilder.FilterByProperty('OwningProcess', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('CreationTime') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${CreationTime})\n        $__cmdletization_queryBuilder.FilterByProperty('CreationTime', $__cmdletization_values, $false, 'Default')\n    }\n\n\n    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP MSFT_NetUDPEndpoint.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Get-NetUDPEndpoint' -Alias '*'"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-NetRoute"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-NetRoute"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-NetRoute"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-NetRoute"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-NetRoute"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4104,
      "details": "se {\n                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)\n            }\n        }\n    }\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP MSFT_NetTransportFilter.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Remove-NetTransportFilter' -Alias '*'"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4104,
      "details": "()]\n    [uint16[]]\n    ${RemotePortStart},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [uint16[]]\n    ${RemotePortEnd},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [string[]]\n    ${DestinationPrefix},\n\n    [Parameter(ParameterSetName='ByName', ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetTCPSetting')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedTCPSetting},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [switch]\n    ${AsJob})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('SettingName') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${SettingName})\n        $__cmdletization_queryBuilder.FilterByProperty('SettingName', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Protocol') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Protocol})\n        $__cmdletization_queryBuilder.FilterByProperty('Protocol', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('LocalPortStart') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${LocalPortStart})\n        $__cmdletization_queryBuilder.FilterByProperty('LocalPortStart', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('LocalPortEnd') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${LocalPortEnd})\n        $__cmdletization_queryBuilder.FilterByProperty('LocalPortEnd', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('RemotePortStart') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${RemotePortStart})\n        $__cmdletization_queryBuilder.FilterByProperty('RemotePortStart', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('RemotePortEnd') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${RemotePortEnd})\n        $__cmdletization_queryBuilder.FilterByProperty('RemotePortEnd', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DestinationPrefix') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DestinationPrefix})\n        $__cmdletization_queryBuilder.FilterByProperty('DestinationPrefix', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedTCPSetting') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedTCPSetting}, 'MSFT_NetTransportFilterTCPSetting', 'Dependent', 'Antecedent', 'Default')\n    }\n\n\n    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP MSFT_NetTransportFilter.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Get-NetTransportFilter' -Alias '*'\n        \n\nfunction Remove-NetTransportFilter\n{\n    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='High', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/StandardCimv2/MSFT_NetTransportFilter')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [string[]]\n    ${SettingName},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTransportFilter.Protocol[]]\n    ${Protocol},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [uint16[]]\n    ${LocalPortStart},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [uint16[]]\n    ${LocalPortEnd},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [uint16[]]\n    ${RemotePortStart},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [uint16[]]\n    ${RemotePortEnd},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [string[]]\n    ${DestinationPrefix},\n\n    [Parameter(ParameterSetName='ByName', ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetTCPSetting')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedTCPSetting},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetTransportFilter')]\n    [ValidateNotNull()]\n    [ciminstance[]]\n    ${InputObject},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${AsJob},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${PassThru})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('SettingName') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${SettingName})\n        $__cmdletization_queryBuilder.FilterByProperty('SettingName', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Protocol') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Protocol})\n        $__cmdletization_queryBuilder.FilterByProperty('Protocol', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('LocalPortStart') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${LocalPortStart})\n        $__cmdletization_queryBuilder.FilterByProperty('LocalPortStart', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('LocalPortEnd') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${LocalPortEnd})\n        $__cmdletization_queryBuilder.FilterByProperty('LocalPortEnd', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('RemotePortStart') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${RemotePortStart})\n        $__cmdletization_queryBuilder.FilterByProperty('RemotePortStart', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('RemotePortEnd') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${RemotePortEnd})\n        $__cmdletization_queryBuilder.FilterByProperty('RemotePortEnd', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DestinationPrefix') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DestinationPrefix})\n        $__cmdletization_queryBuilder.FilterByProperty('DestinationPrefix', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedTCPSetting') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedTCPSetting}, 'MSFT_NetTransportFilterTCPSetting', 'Dependent', 'Antecedent', 'Default')\n    }\n\n\n    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n    switch -exact ($PSCmdlet.ParameterSetName) { \n        { @('ByName', 'InputObject (cdxml)') -contains $_ } {\n      $__cmdletization_returnValue = $null\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:DeleteInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru\n            if ($PSBoundParameters.ContainsKey('InputObject')) {\n                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }\n            } el"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4104,
      "details": "#requires -version 3.0\n\ntry { Microsoft.PowerShell.Core\\Set-StrictMode -Off } catch { }\n\n$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module\n\n$script:ClassName = 'ROOT/StandardCimv2/MSFT_NetTransportFilter'\n$script:ClassVersion = '1.0.0'\n$script:ModuleVersion = '1.0.0'\n$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]\n\n$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()\n\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function @()\n        \n\nfunction __cmdletization_BindCommonParameters\n{\n    param(\n        $__cmdletization_objectModelWrapper,\n        $myPSBoundParameters\n    )       \n                \n\n        if ($myPSBoundParameters.ContainsKey('CimSession')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('AsJob')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] \n        }\n                    \n\n}\n                \n\nfunction New-NetTransportFilter\n{\n    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]\n    \n    \n    param(\n    \n    [Parameter(ParameterSetName='cim:CreateInstance0', Mandatory=$true)]\n    [string]\n    ${SettingName},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTransportFilter.Protocol]\n    ${Protocol},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [uint16]\n    ${LocalPortStart},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [uint16]\n    ${LocalPortEnd},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [uint16]\n    ${RemotePortStart},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [uint16]\n    ${RemotePortEnd},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [string]\n    ${DestinationPrefix},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [switch]\n    ${AsJob})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n      $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('SettingName')) {\n          [object]$__cmdletization_value = ${SettingName}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SettingName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SettingName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('Protocol')) {\n          [object]$__cmdletization_value = ${Protocol}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Protocol'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTransportFilter.Protocol'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Protocol'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTransportFilter.Protocol'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('LocalPortStart')) {\n          [object]$__cmdletization_value = ${LocalPortStart}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LocalPortStart'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LocalPortStart'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('LocalPortEnd')) {\n          [object]$__cmdletization_value = ${LocalPortEnd}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LocalPortEnd'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LocalPortEnd'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('RemotePortStart')) {\n          [object]$__cmdletization_value = ${RemotePortStart}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemotePortStart'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemotePortStart'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('RemotePortEnd')) {\n          [object]$__cmdletization_value = ${RemotePortEnd}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemotePortEnd'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemotePortEnd'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('DestinationPrefix')) {\n          [object]$__cmdletization_value = ${DestinationPrefix}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DestinationPrefix'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DestinationPrefix'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:CreateInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo)\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP MSFT_NetTransportFilter.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'New-NetTransportFilter' -Alias '*'\n        \n\nfunction Get-NetTransportFilter\n{\n    [CmdletBinding(PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/StandardCimv2/MSFT_NetTransportFilter')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [string[]]\n    ${SettingName},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTransportFilter.Protocol[]]\n    ${Protocol},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [uint16[]]\n    ${LocalPortStart},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [uint16[]]\n    ${LocalPortEnd},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-NetRoute"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-NetRoute"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-NetRoute"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-NetRoute"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4104,
      "details": "l.Cmdletization.GeneratedTypes.NetTCPSetting.AutoTuningLevelLocal'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('EcnCapability')) {\n            [object]$__cmdletization_value = ${EcnCapability}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EcnCapability'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.EcnCapability'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EcnCapability'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.EcnCapability'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('Timestamps')) {\n            [object]$__cmdletization_value = ${Timestamps}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Timestamps'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.Timestamps'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Timestamps'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.Timestamps'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('InitialRtoMs')) {\n            [object]$__cmdletization_value = ${InitialRtoMs}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InitialRto'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InitialRto'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('ScalingHeuristics')) {\n            [object]$__cmdletization_value = ${ScalingHeuristics}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScalingHeuristics'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.ScalingHeuristics'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScalingHeuristics'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.ScalingHeuristics'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('DynamicPortRangeStartPort')) {\n            [object]$__cmdletization_value = ${DynamicPortRangeStartPort}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DynamicPortRangeStartPort'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DynamicPortRangeStartPort'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('DynamicPortRangeNumberOfPorts')) {\n            [object]$__cmdletization_value = ${DynamicPortRangeNumberOfPorts}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DynamicPortRangeNumberOfPorts'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DynamicPortRangeNumberOfPorts'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('AutomaticUseCustom')) {\n            [object]$__cmdletization_value = ${AutomaticUseCustom}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AutomaticUseCustom'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.AutomaticUseCustom'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AutomaticUseCustom'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.AutomaticUseCustom'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('NonSackRttResiliency')) {\n            [object]$__cmdletization_value = ${NonSackRttResiliency}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NonSackRttResiliency'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.NonSackRttResiliency'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NonSackRttResiliency'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.NonSackRttResiliency'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('ForceWS')) {\n            [object]$__cmdletization_value = ${ForceWS}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ForceWS'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.ForceWS'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ForceWS'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.ForceWS'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('MaxSynRetransmissions')) {\n            [object]$__cmdletization_value = ${MaxSynRetransmissions}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MaxSynRetransmissions'; ParameterType = 'System.Byte'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MaxSynRetransmissions'; ParameterType = 'System.Byte'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('AutoReusePortRangeStartPort')) {\n            [object]$__cmdletization_value = ${AutoReusePortRangeStartPort}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AutoReusePortRangeStartPort'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AutoReusePortRangeStartPort'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('AutoReusePortRangeNumberOfPorts')) {\n            [object]$__cmdletization_value = ${AutoReusePortRangeNumberOfPorts}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AutoReusePortRangeNumberOfPorts'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AutoReusePortRangeNumberOfPorts'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n      $__cmdletization_returnValue = $null\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:ModifyInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru\n            if ($PSBoundParameters.ContainsKey('InputObject')) {\n                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }\n            } else {\n                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)\n            }\n        }\n    }\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP MSFT_NetTCPSetting.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Set-NetTCPSetting' -Alias '*'"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4104,
      "details": "{\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP MSFT_NetTCPSetting.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Get-NetTCPSetting' -Alias '*'\n        \n\nfunction Set-NetTCPSetting\n{\n    [CmdletBinding(DefaultParameterSetName='ByName', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/StandardCimv2/MSFT_NetTCPSetting')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByName', Position=0)]\n    [ValidateNotNull()]\n    [string[]]\n    ${SettingName},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetTCPSetting')]\n    [ValidateNotNull()]\n    [ciminstance[]]\n    ${InputObject},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('MinRto')]\n    [uint32]\n    ${MinRtoMs},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('InitialCongestionWindow')]\n    [uint32]\n    ${InitialCongestionWindowMss},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.CongestionProvider]\n    ${CongestionProvider},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.CwndRestart]\n    ${CwndRestart},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('DelayedAckTimeout')]\n    [uint32]\n    ${DelayedAckTimeoutMs},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [byte]\n    ${DelayedAckFrequency},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.MemoryPressureProtection]\n    ${MemoryPressureProtection},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.AutoTuningLevelLocal]\n    ${AutoTuningLevelLocal},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.EcnCapability]\n    ${EcnCapability},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.Timestamps]\n    ${Timestamps},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('InitialRto')]\n    [uint32]\n    ${InitialRtoMs},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.ScalingHeuristics]\n    ${ScalingHeuristics},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [uint16]\n    ${DynamicPortRangeStartPort},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [uint16]\n    ${DynamicPortRangeNumberOfPorts},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.AutomaticUseCustom]\n    ${AutomaticUseCustom},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.NonSackRttResiliency]\n    ${NonSackRttResiliency},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.ForceWS]\n    ${ForceWS},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [byte]\n    ${MaxSynRetransmissions},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [uint16]\n    ${AutoReusePortRangeStartPort},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [uint16]\n    ${AutoReusePortRangeNumberOfPorts},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${AsJob},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${PassThru})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('SettingName') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${SettingName})\n        $__cmdletization_queryBuilder.FilterByProperty('SettingName', $__cmdletization_values, $true, 'Default')\n    }\n\n\n    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n    switch -exact ($PSCmdlet.ParameterSetName) { \n        { @('ByName', 'InputObject (cdxml)') -contains $_ } {\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('MinRtoMs')) {\n            [object]$__cmdletization_value = ${MinRtoMs}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MinRto'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MinRto'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('InitialCongestionWindowMss')) {\n            [object]$__cmdletization_value = ${InitialCongestionWindowMss}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InitialCongestionWindow'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InitialCongestionWindow'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('CongestionProvider')) {\n            [object]$__cmdletization_value = ${CongestionProvider}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'CongestionProvider'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.CongestionProvider'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'CongestionProvider'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.CongestionProvider'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('CwndRestart')) {\n            [object]$__cmdletization_value = ${CwndRestart}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'CwndRestart'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.CwndRestart'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'CwndRestart'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.CwndRestart'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('DelayedAckTimeoutMs')) {\n            [object]$__cmdletization_value = ${DelayedAckTimeoutMs}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DelayedAckTimeout'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DelayedAckTimeout'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('DelayedAckFrequency')) {\n            [object]$__cmdletization_value = ${DelayedAckFrequency}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DelayedAckFrequency'; ParameterType = 'System.Byte'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DelayedAckFrequency'; ParameterType = 'System.Byte'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('MemoryPressureProtection')) {\n            [object]$__cmdletization_value = ${MemoryPressureProtection}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MemoryPressureProtection'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.MemoryPressureProtection'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MemoryPressureProtection'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.MemoryPressureProtection'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('AutoTuningLevelLocal')) {\n            [object]$__cmdletization_value = ${AutoTuningLevelLocal}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AutoTuningLevelLocal'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.AutoTuningLevelLocal'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AutoTuningLevelLocal'; ParameterType = 'Microsoft.PowerShel"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4104,
      "details": "#requires -version 3.0\n\ntry { Microsoft.PowerShell.Core\\Set-StrictMode -Off } catch { }\n\n$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module\n\n$script:ClassName = 'ROOT/StandardCimv2/MSFT_NetTCPSetting'\n$script:ClassVersion = '1.0.0'\n$script:ModuleVersion = '1.0.0'\n$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]\n\n$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()\n\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function @()\n        \n\nfunction __cmdletization_BindCommonParameters\n{\n    param(\n        $__cmdletization_objectModelWrapper,\n        $myPSBoundParameters\n    )       \n                \n\n        if ($myPSBoundParameters.ContainsKey('CimSession')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('AsJob')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] \n        }\n                    \n\n}\n                \n\nfunction Get-NetTCPSetting\n{\n    [CmdletBinding(DefaultParameterSetName='ByName', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/StandardCimv2/MSFT_NetTCPSetting')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByName', Position=0)]\n    [ValidateNotNull()]\n    [string[]]\n    ${SettingName},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Alias('MinRto')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${MinRtoMs},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Alias('InitialCongestionWindow')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${InitialCongestionWindowMss},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.CongestionProvider[]]\n    ${CongestionProvider},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.CwndRestart[]]\n    ${CwndRestart},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Alias('DelayedAckTimeout')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${DelayedAckTimeoutMs},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [byte[]]\n    ${DelayedAckFrequency},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.MemoryPressureProtection[]]\n    ${MemoryPressureProtection},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.AutoTuningLevelLocal[]]\n    ${AutoTuningLevelLocal},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.AutoTuningLevelGroupPolicy[]]\n    ${AutoTuningLevelGroupPolicy},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.AutoTuningLevelEffective[]]\n    ${AutoTuningLevelEffective},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.EcnCapability[]]\n    ${EcnCapability},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.Timestamps[]]\n    ${Timestamps},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Alias('InitialRto')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${InitialRtoMs},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.ScalingHeuristics[]]\n    ${ScalingHeuristics},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [uint16[]]\n    ${DynamicPortRangeStartPort},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [uint16[]]\n    ${DynamicPortRangeNumberOfPorts},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.AutomaticUseCustom[]]\n    ${AutomaticUseCustom},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.NonSackRttResiliency[]]\n    ${NonSackRttResiliency},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.ForceWS[]]\n    ${ForceWS},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [byte[]]\n    ${MaxSynRetransmissions},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [uint16[]]\n    ${AutoReusePortRangeStartPort},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [uint16[]]\n    ${AutoReusePortRangeNumberOfPorts},\n\n    [Parameter(ParameterSetName='ByName', ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetTransportFilter')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedTransportFilter},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [switch]\n    ${AsJob})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('SettingName') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${SettingName})\n        $__cmdletization_queryBuilder.FilterByProperty('SettingName', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('MinRtoMs') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${MinRtoMs})\n        $__cmdletization_queryBuilder.FilterByProperty('MinRto', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('InitialCongestionWindowMss') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${InitialCongestionWindowMss})\n        $__cmdletization_queryBuilder.FilterByProperty('InitialCongestionWindow', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('CongestionProvider') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${CongestionProvider})\n        $__cmdletization_queryBuilder.FilterByProperty('CongestionProvider', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('CwndRestart') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${CwndRestart})\n        $__cmdletization_queryBuilder.FilterByProperty('CwndRestart', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DelayedAckTimeoutMs') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DelayedAckTimeoutMs})\n        $__cmdletization_queryBuilder.FilterByProperty('DelayedAckTimeout', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DelayedAckFrequency') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DelayedAckFrequency})\n        $__cmdletization_queryBuilder.FilterByProperty('DelayedAckFrequency', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('MemoryPressureProtection') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${MemoryPressureProtection})\n        $__cmdletization_queryBuilder.FilterByProperty('MemoryPressureProtection', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AutoTuningLevelLocal') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${AutoTuningLevelLocal})\n        $__cmdletization_queryBuilder.FilterByProperty('AutoTuningLevelLocal', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AutoTuningLevelGroupPolicy') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${AutoTuningLevelGroupPolicy})\n        $__cmdletization_queryBuilder.FilterByProperty('AutoTuningLevelGroupPolicy', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AutoTuningLevelEffective') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${AutoTuningLevelEffective})\n        $__cmdletization_queryBuilder.FilterByProperty('AutoTuningLevelEffective', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('EcnCapability') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${EcnCapability})\n        $__cmdletization_queryBuilder.FilterByProperty('EcnCapability', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Timestamps') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Timestamps})\n        $__cmdletization_queryBuilder.FilterByProperty('Timestamps', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('InitialRtoMs') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${InitialRtoMs})\n        $__cmdletization_queryBuilder.FilterByProperty('InitialRto', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('ScalingHeuristics') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${ScalingHeuristics})\n        $__cmdletization_queryBuilder.FilterByProperty('ScalingHeuristics', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DynamicPortRangeStartPort') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DynamicPortRangeStartPort})\n        $__cmdletization_queryBuilder.FilterByProperty('DynamicPortRangeStartPort', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DynamicPortRangeNumberOfPorts') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DynamicPortRangeNumberOfPorts})\n        $__cmdletization_queryBuilder.FilterByProperty('DynamicPortRangeNumberOfPorts', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AutomaticUseCustom') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${AutomaticUseCustom})\n        $__cmdletization_queryBuilder.FilterByProperty('AutomaticUseCustom', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('NonSackRttResiliency') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${NonSackRttResiliency})\n        $__cmdletization_queryBuilder.FilterByProperty('NonSackRttResiliency', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('ForceWS') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${ForceWS})\n        $__cmdletization_queryBuilder.FilterByProperty('ForceWS', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('MaxSynRetransmissions') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${MaxSynRetransmissions})\n        $__cmdletization_queryBuilder.FilterByProperty('MaxSynRetransmissions', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AutoReusePortRangeStartPort') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${AutoReusePortRangeStartPort})\n        $__cmdletization_queryBuilder.FilterByProperty('AutoReusePortRangeStartPort', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AutoReusePortRangeNumberOfPorts') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${AutoReusePortRangeNumberOfPorts})\n        $__cmdletization_queryBuilder.FilterByProperty('AutoReusePortRangeNumberOfPorts', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedTransportFilter') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedTransportFilter}, 'MSFT_NetTransportFilterTCPSetting', 'Antecedent', 'Dependent', 'Default')\n    }\n\n\n    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)\n            }\n        }\n        catch"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-NetRoute"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-NetRoute"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-NetRoute"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4104,
      "details": "#requires -version 3.0\n\ntry { Microsoft.PowerShell.Core\\Set-StrictMode -Off } catch { }\n\n$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module\n\n$script:ClassName = 'ROOT/StandardCimv2/MSFT_NetTCPConnection'\n$script:ClassVersion = '1.0.0'\n$script:ModuleVersion = '1.0.0'\n$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]\n\n$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()\n\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function @()\n        \n\nfunction __cmdletization_BindCommonParameters\n{\n    param(\n        $__cmdletization_objectModelWrapper,\n        $myPSBoundParameters\n    )       \n                \n\n        if ($myPSBoundParameters.ContainsKey('CimSession')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('AsJob')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] \n        }\n                    \n\n}\n                \n\nfunction Get-NetTCPConnection\n{\n    [CmdletBinding(DefaultParameterSetName='ByName', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/StandardCimv2/MSFT_NetTCPConnection')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByName', Position=0, ValueFromPipelineByPropertyName=$true)]\n    [Alias('IPAddress')]\n    [ValidateNotNull()]\n    [string[]]\n    ${LocalAddress},\n\n    [Parameter(ParameterSetName='ByName', Position=1)]\n    [ValidateNotNull()]\n    [uint16[]]\n    ${LocalPort},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [string[]]\n    ${RemoteAddress},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [uint16[]]\n    ${RemotePort},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPConnection.State[]]\n    ${State},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPConnection.AppliedSetting[]]\n    ${AppliedSetting},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${OwningProcess},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [datetime[]]\n    ${CreationTime},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPConnection.OffloadState[]]\n    ${OffloadState},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [switch]\n    ${AsJob})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('LocalAddress') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${LocalAddress})\n        $__cmdletization_queryBuilder.FilterByProperty('LocalAddress', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('LocalPort') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${LocalPort})\n        $__cmdletization_queryBuilder.FilterByProperty('LocalPort', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('RemoteAddress') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${RemoteAddress})\n        $__cmdletization_queryBuilder.FilterByProperty('RemoteAddress', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('RemotePort') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${RemotePort})\n        $__cmdletization_queryBuilder.FilterByProperty('RemotePort', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('State') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${State})\n        $__cmdletization_queryBuilder.FilterByProperty('State', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AppliedSetting') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${AppliedSetting})\n        $__cmdletization_queryBuilder.FilterByProperty('AppliedSetting', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('OwningProcess') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${OwningProcess})\n        $__cmdletization_queryBuilder.FilterByProperty('OwningProcess', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('CreationTime') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${CreationTime})\n        $__cmdletization_queryBuilder.FilterByProperty('CreationTime', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('OffloadState') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${OffloadState})\n        $__cmdletization_queryBuilder.FilterByProperty('OffloadState', $__cmdletization_values, $false, 'Default')\n    }\n\n\n    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP MSFT_NetTCPConnection.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Get-NetTCPConnection' -Alias '*'"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-NetRoute"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-NetRoute"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-NetRoute"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-NetRoute"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-NetRoute"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-NetRoute"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-NetRoute"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4104,
      "details": "ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${InterfaceMetric},\n\n    [Parameter(ParameterSetName='ByName', ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIPInterface')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedIPInterface},\n\n    [Parameter(ParameterSetName='ByName')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='ByName')]\n    [switch]\n    ${IncludeAllCompartments},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetRoute')]\n    [ValidateNotNull()]\n    [ciminstance[]]\n    ${InputObject},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${AsJob},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${PassThru})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('DestinationPrefix') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DestinationPrefix})\n        $__cmdletization_queryBuilder.FilterByProperty('DestinationPrefix', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('InterfaceIndex') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${InterfaceIndex})\n        $__cmdletization_queryBuilder.FilterByProperty('InterfaceIndex', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('InterfaceAlias') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${InterfaceAlias})\n        $__cmdletization_queryBuilder.FilterByProperty('InterfaceAlias', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('NextHop') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${NextHop})\n        $__cmdletization_queryBuilder.FilterByProperty('NextHop', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AddressFamily') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${AddressFamily})\n        $__cmdletization_queryBuilder.FilterByProperty('AddressFamily', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Publish') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Publish})\n        $__cmdletization_queryBuilder.FilterByProperty('Publish', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('RouteMetric') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${RouteMetric})\n        $__cmdletization_queryBuilder.FilterByProperty('RouteMetric', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Protocol') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Protocol})\n        $__cmdletization_queryBuilder.FilterByProperty('Protocol', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('CompartmentId') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${CompartmentId})\n        $__cmdletization_queryBuilder.FilterByProperty('CompartmentId', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('ValidLifetime') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${ValidLifetime})\n        $__cmdletization_queryBuilder.FilterByProperty('ValidLifetime', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PreferredLifetime') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PreferredLifetime})\n        $__cmdletization_queryBuilder.FilterByProperty('PreferredLifetime', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('State') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${State})\n        $__cmdletization_queryBuilder.FilterByProperty('State', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('InterfaceMetric') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${InterfaceMetric})\n        $__cmdletization_queryBuilder.FilterByProperty('InterfaceMetric', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedIPInterface') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedIPInterface}, 'MSFT_NetIPInterfaceRoute', 'Antecedent', 'Dependent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})\n    }\n    if ($PSBoundParameters.ContainsKey('IncludeAllCompartments') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('IncludeAllCompartments', ${IncludeAllCompartments})\n    }\n\n\n    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n    switch -exact ($PSCmdlet.ParameterSetName) { \n        { @('ByName', 'InputObject (cdxml)') -contains $_ } {\n      $__cmdletization_returnValue = $null\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:DeleteInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru\n            if ($PSBoundParameters.ContainsKey('InputObject')) {\n                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }\n            } else {\n                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)\n            }\n        }\n    }\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP MSFT_NetRoute.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Remove-NetRoute' -Alias '*'"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4104,
      "details": "Name='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${AsJob},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${PassThru})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('DestinationPrefix') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DestinationPrefix})\n        $__cmdletization_queryBuilder.FilterByProperty('DestinationPrefix', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('InterfaceIndex') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${InterfaceIndex})\n        $__cmdletization_queryBuilder.FilterByProperty('InterfaceIndex', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('InterfaceAlias') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${InterfaceAlias})\n        $__cmdletization_queryBuilder.FilterByProperty('InterfaceAlias', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('NextHop') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${NextHop})\n        $__cmdletization_queryBuilder.FilterByProperty('NextHop', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AddressFamily') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${AddressFamily})\n        $__cmdletization_queryBuilder.FilterByProperty('AddressFamily', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Protocol') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Protocol})\n        $__cmdletization_queryBuilder.FilterByProperty('Protocol', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})\n    }\n    if ($PSBoundParameters.ContainsKey('IncludeAllCompartments') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('IncludeAllCompartments', ${IncludeAllCompartments})\n    }\n\n\n    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n    switch -exact ($PSCmdlet.ParameterSetName) { \n        { @('ByName', 'InputObject (cdxml)') -contains $_ } {\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('Publish')) {\n            [object]$__cmdletization_value = ${Publish}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Publish'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetRoute.Publish'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Publish'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetRoute.Publish'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('RouteMetric')) {\n            [object]$__cmdletization_value = ${RouteMetric}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RouteMetric'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RouteMetric'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('ValidLifetime')) {\n            [object]$__cmdletization_value = ${ValidLifetime}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ValidLifetime'; ParameterType = 'System.TimeSpan'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ValidLifetime'; ParameterType = 'System.TimeSpan'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('PreferredLifetime')) {\n            [object]$__cmdletization_value = ${PreferredLifetime}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PreferredLifetime'; ParameterType = 'System.TimeSpan'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PreferredLifetime'; ParameterType = 'System.TimeSpan'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n      $__cmdletization_returnValue = $null\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:ModifyInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru\n            if ($PSBoundParameters.ContainsKey('InputObject')) {\n                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }\n            } else {\n                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)\n            }\n        }\n    }\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP MSFT_NetRoute.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Set-NetRoute' -Alias '*'\n        \n\nfunction Remove-NetRoute\n{\n    [CmdletBinding(DefaultParameterSetName='ByName', SupportsShouldProcess=$true, ConfirmImpact='High', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/StandardCimv2/MSFT_NetRoute')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByName', Position=0)]\n    [ValidateNotNull()]\n    [string[]]\n    ${DestinationPrefix},\n\n    [Parameter(ParameterSetName='ByName', ValueFromPipelineByPropertyName=$true)]\n    [Alias('ifIndex')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${InterfaceIndex},\n\n    [Parameter(ParameterSetName='ByName', ValueFromPipelineByPropertyName=$true)]\n    [Alias('ifAlias')]\n    [ValidateNotNull()]\n    [string[]]\n    ${InterfaceAlias},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [string[]]\n    ${NextHop},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetRoute.AddressFamily[]]\n    ${AddressFamily},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetRoute.Publish[]]\n    ${Publish},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [uint16[]]\n    ${RouteMetric},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetRoute.Protocol[]]\n    ${Protocol},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${CompartmentId},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [timespan[]]\n    ${ValidLifetime},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [timespan[]]\n    ${PreferredLifetime},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetRoute.State[]]\n    ${State},\n\n    [Parameter("
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4104,
      "details": "on.GeneratedTypes.NetRoute.AddressFamily[]]\n    ${AddressFamily},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetRoute.Publish[]]\n    ${Publish},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [uint16[]]\n    ${RouteMetric},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetRoute.Protocol[]]\n    ${Protocol},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${CompartmentId},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [timespan[]]\n    ${ValidLifetime},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [timespan[]]\n    ${PreferredLifetime},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetRoute.State[]]\n    ${State},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${InterfaceMetric},\n\n    [Parameter(ParameterSetName='ByName', ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIPInterface')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedIPInterface},\n\n    [Parameter(ParameterSetName='ByName')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='ByName')]\n    [switch]\n    ${IncludeAllCompartments},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [switch]\n    ${AsJob})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('DestinationPrefix') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DestinationPrefix})\n        $__cmdletization_queryBuilder.FilterByProperty('DestinationPrefix', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('InterfaceIndex') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${InterfaceIndex})\n        $__cmdletization_queryBuilder.FilterByProperty('InterfaceIndex', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('InterfaceAlias') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${InterfaceAlias})\n        $__cmdletization_queryBuilder.FilterByProperty('InterfaceAlias', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('NextHop') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${NextHop})\n        $__cmdletization_queryBuilder.FilterByProperty('NextHop', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AddressFamily') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${AddressFamily})\n        $__cmdletization_queryBuilder.FilterByProperty('AddressFamily', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Publish') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Publish})\n        $__cmdletization_queryBuilder.FilterByProperty('Publish', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('RouteMetric') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${RouteMetric})\n        $__cmdletization_queryBuilder.FilterByProperty('RouteMetric', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Protocol') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Protocol})\n        $__cmdletization_queryBuilder.FilterByProperty('Protocol', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('CompartmentId') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${CompartmentId})\n        $__cmdletization_queryBuilder.FilterByProperty('CompartmentId', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('ValidLifetime') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${ValidLifetime})\n        $__cmdletization_queryBuilder.FilterByProperty('ValidLifetime', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PreferredLifetime') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PreferredLifetime})\n        $__cmdletization_queryBuilder.FilterByProperty('PreferredLifetime', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('State') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${State})\n        $__cmdletization_queryBuilder.FilterByProperty('State', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('InterfaceMetric') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${InterfaceMetric})\n        $__cmdletization_queryBuilder.FilterByProperty('InterfaceMetric', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedIPInterface') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedIPInterface}, 'MSFT_NetIPInterfaceRoute', 'Antecedent', 'Dependent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})\n    }\n    if ($PSBoundParameters.ContainsKey('IncludeAllCompartments') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('IncludeAllCompartments', ${IncludeAllCompartments})\n    }\n\n\n    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP MSFT_NetRoute.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Get-NetRoute' -Alias '*'\n        \n\nfunction Set-NetRoute\n{\n    [CmdletBinding(DefaultParameterSetName='ByName', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/StandardCimv2/MSFT_NetRoute')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByName', Position=0)]\n    [ValidateNotNull()]\n    [string[]]\n    ${DestinationPrefix},\n\n    [Parameter(ParameterSetName='ByName', ValueFromPipelineByPropertyName=$true)]\n    [Alias('ifIndex')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${InterfaceIndex},\n\n    [Parameter(ParameterSetName='ByName', ValueFromPipelineByPropertyName=$true)]\n    [Alias('ifAlias')]\n    [ValidateNotNull()]\n    [string[]]\n    ${InterfaceAlias},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [string[]]\n    ${NextHop},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetRoute.AddressFamily[]]\n    ${AddressFamily},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetRoute.Protocol[]]\n    ${Protocol},\n\n    [Parameter(ParameterSetName='ByName')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='ByName')]\n    [switch]\n    ${IncludeAllCompartments},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetRoute')]\n    [ValidateNotNull()]\n    [ciminstance[]]\n    ${InputObject},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetRoute.Publish]\n    ${Publish},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [uint16]\n    ${RouteMetric},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [timespan]\n    ${ValidLifetime},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [timespan]\n    ${PreferredLifetime},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSet"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4104,
      "details": "Present = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Protocol'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetRoute.Protocol'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('ValidLifetime')) {\n          [object]$__cmdletization_value = ${ValidLifetime}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ValidLifetime'; ParameterType = 'System.TimeSpan'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ValidLifetime'; ParameterType = 'System.TimeSpan'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('PreferredLifetime')) {\n          [object]$__cmdletization_value = ${PreferredLifetime}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PreferredLifetime'; ParameterType = 'System.TimeSpan'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PreferredLifetime'; ParameterType = 'System.TimeSpan'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'CmdletOutput'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'Out'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.UInt32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Create', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo)\n        }\n    }\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP MSFT_NetRoute.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'New-NetRoute' -Alias '*'\n        \n\nfunction Find-NetRoute\n{\n    [CmdletBinding(PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance[]])]\n    param(\n    \n    [Parameter(ParameterSetName='Find0')]\n    [uint32]\n    ${InterfaceIndex},\n\n    [Parameter(ParameterSetName='Find0')]\n    [string]\n    ${LocalIPAddress},\n\n    [Parameter(ParameterSetName='Find0', Mandatory=$true)]\n    [string]\n    ${RemoteIPAddress},\n\n    [Parameter(ParameterSetName='Find0')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='Find0')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='Find0')]\n    [switch]\n    ${AsJob})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n      $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('InterfaceIndex')) {\n          [object]$__cmdletization_value = ${InterfaceIndex}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InterfaceIndex'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InterfaceIndex'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('LocalIPAddress')) {\n          [object]$__cmdletization_value = ${LocalIPAddress}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LocalIPAddress'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LocalIPAddress'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('RemoteIPAddress')) {\n          [object]$__cmdletization_value = ${RemoteIPAddress}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteIPAddress'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteIPAddress'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'CmdletOutput'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'Out'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.UInt32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Find', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo)\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP MSFT_NetRoute.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Find-NetRoute' -Alias '*'\n        \n\nfunction Get-NetRoute\n{\n    [CmdletBinding(DefaultParameterSetName='ByName', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/StandardCimv2/MSFT_NetRoute')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByName', Position=0)]\n    [ValidateNotNull()]\n    [string[]]\n    ${DestinationPrefix},\n\n    [Parameter(ParameterSetName='ByName', ValueFromPipelineByPropertyName=$true)]\n    [Alias('ifIndex')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${InterfaceIndex},\n\n    [Parameter(ParameterSetName='ByName', ValueFromPipelineByPropertyName=$true)]\n    [Alias('ifAlias')]\n    [ValidateNotNull()]\n    [string[]]\n    ${InterfaceAlias},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [string[]]\n    ${NextHop},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletizati"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4104,
      "details": "se\n        if ($PSBoundParameters.ContainsKey('RouteMetric')) {\n          [object]$__cmdletization_value = ${RouteMetric}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RouteMetric'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RouteMetric'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('Protocol')) {\n          [object]$__cmdletization_value = ${Protocol}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Protocol'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetRoute.Protocol'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Protocol'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetRoute.Protocol'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('ValidLifetime')) {\n          [object]$__cmdletization_value = ${ValidLifetime}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ValidLifetime'; ParameterType = 'System.TimeSpan'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ValidLifetime'; ParameterType = 'System.TimeSpan'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('PreferredLifetime')) {\n          [object]$__cmdletization_value = ${PreferredLifetime}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PreferredLifetime'; ParameterType = 'System.TimeSpan'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PreferredLifetime'; ParameterType = 'System.TimeSpan'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'CmdletOutput'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'Out'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.UInt32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Create', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo)\n        }\n        { @('ByInterfaceIndex') -contains $_ } {\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('DestinationPrefix')) {\n          [object]$__cmdletization_value = ${DestinationPrefix}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DestinationPrefix'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DestinationPrefix'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('InterfaceIndex')) {\n          [object]$__cmdletization_value = ${InterfaceIndex}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InterfaceIndex'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InterfaceIndex'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('AddressFamily')) {\n          [object]$__cmdletization_value = ${AddressFamily}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AddressFamily'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetRoute.AddressFamily'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AddressFamily'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetRoute.AddressFamily'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('NextHop')) {\n          [object]$__cmdletization_value = ${NextHop}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NextHop'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NextHop'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('PolicyStore')) {\n          [object]$__cmdletization_value = ${PolicyStore}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('Publish')) {\n          [object]$__cmdletization_value = ${Publish}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Publish'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetRoute.Publish'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Publish'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetRoute.Publish'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('RouteMetric')) {\n          [object]$__cmdletization_value = ${RouteMetric}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RouteMetric'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RouteMetric'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('Protocol')) {\n          [object]$__cmdletization_value = ${Protocol}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Protocol'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetRoute.Protocol'; Bindings = 'In'; Value = $__cmdletization_value; IsValue"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4104,
      "details": "#requires -version 3.0\n\ntry { Microsoft.PowerShell.Core\\Set-StrictMode -Off } catch { }\n\n$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module\n\n$script:ClassName = 'ROOT/StandardCimv2/MSFT_NetRoute'\n$script:ClassVersion = '1.0.0'\n$script:ModuleVersion = '1.0.0'\n$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]\n\n$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()\n\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function @()\n        \n\nfunction __cmdletization_BindCommonParameters\n{\n    param(\n        $__cmdletization_objectModelWrapper,\n        $myPSBoundParameters\n    )       \n                \n\n        if ($myPSBoundParameters.ContainsKey('CimSession')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('AsJob')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] \n        }\n                    \n\n}\n                \n\nfunction New-NetRoute\n{\n    [CmdletBinding(DefaultParameterSetName='ByInterfaceAlias', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance[]])][OutputType([Microsoft.Management.Infrastructure.CimInstance[]])]\n    param(\n    \n    [Parameter(ParameterSetName='ByInterfaceAlias', Mandatory=$true, Position=0)]\n    [Parameter(ParameterSetName='ByInterfaceIndex', Mandatory=$true, Position=0)]\n    [string]\n    ${DestinationPrefix},\n\n    [Parameter(ParameterSetName='ByInterfaceAlias', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]\n    [Alias('ifAlias')]\n    [string]\n    ${InterfaceAlias},\n\n    [Parameter(ParameterSetName='ByInterfaceAlias')]\n    [Parameter(ParameterSetName='ByInterfaceIndex')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetRoute.AddressFamily]\n    ${AddressFamily},\n\n    [Parameter(ParameterSetName='ByInterfaceAlias')]\n    [Parameter(ParameterSetName='ByInterfaceIndex')]\n    [string]\n    ${NextHop},\n\n    [Parameter(ParameterSetName='ByInterfaceAlias')]\n    [Parameter(ParameterSetName='ByInterfaceIndex')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='ByInterfaceAlias')]\n    [Parameter(ParameterSetName='ByInterfaceIndex')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetRoute.Publish]\n    ${Publish},\n\n    [Parameter(ParameterSetName='ByInterfaceAlias')]\n    [Parameter(ParameterSetName='ByInterfaceIndex')]\n    [uint16]\n    ${RouteMetric},\n\n    [Parameter(ParameterSetName='ByInterfaceAlias')]\n    [Parameter(ParameterSetName='ByInterfaceIndex')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetRoute.Protocol]\n    ${Protocol},\n\n    [Parameter(ParameterSetName='ByInterfaceAlias')]\n    [Parameter(ParameterSetName='ByInterfaceIndex')]\n    [timespan]\n    ${ValidLifetime},\n\n    [Parameter(ParameterSetName='ByInterfaceAlias')]\n    [Parameter(ParameterSetName='ByInterfaceIndex')]\n    [timespan]\n    ${PreferredLifetime},\n\n    [Parameter(ParameterSetName='ByInterfaceIndex', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]\n    [Alias('ifIndex')]\n    [uint32]\n    ${InterfaceIndex},\n\n    [Parameter(ParameterSetName='ByInterfaceAlias')]\n    [Parameter(ParameterSetName='ByInterfaceIndex')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByInterfaceAlias')]\n    [Parameter(ParameterSetName='ByInterfaceIndex')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByInterfaceAlias')]\n    [Parameter(ParameterSetName='ByInterfaceIndex')]\n    [switch]\n    ${AsJob})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n      $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n\n      switch -exact ($PSCmdlet.ParameterSetName) { \n        { @('ByInterfaceAlias') -contains $_ } {\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('DestinationPrefix')) {\n          [object]$__cmdletization_value = ${DestinationPrefix}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DestinationPrefix'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DestinationPrefix'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('InterfaceAlias')) {\n          [object]$__cmdletization_value = ${InterfaceAlias}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InterfaceAlias'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InterfaceAlias'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('AddressFamily')) {\n          [object]$__cmdletization_value = ${AddressFamily}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AddressFamily'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetRoute.AddressFamily'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AddressFamily'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetRoute.AddressFamily'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('NextHop')) {\n          [object]$__cmdletization_value = ${NextHop}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NextHop'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NextHop'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('PolicyStore')) {\n          [object]$__cmdletization_value = ${PolicyStore}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('Publish')) {\n          [object]$__cmdletization_value = ${Publish}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Publish'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetRoute.Publish'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Publish'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetRoute.Publish'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $fal"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-NetRoute"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-NetRoute"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-NetRoute"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4104,
      "details": "#requires -version 3.0\n\ntry { Microsoft.PowerShell.Core\\Set-StrictMode -Off } catch { }\n\n$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module\n\n$script:ClassName = 'ROOT/StandardCimv2/MSFT_NetPrefixPolicy'\n$script:ClassVersion = '1.0.0'\n$script:ModuleVersion = '1.0.0'\n$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]\n\n$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()\n\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function @()\n        \n\nfunction __cmdletization_BindCommonParameters\n{\n    param(\n        $__cmdletization_objectModelWrapper,\n        $myPSBoundParameters\n    )       \n                \n\n        if ($myPSBoundParameters.ContainsKey('CimSession')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('AsJob')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] \n        }\n                    \n\n}\n                \n\nfunction Get-NetPrefixPolicy\n{\n    [CmdletBinding(DefaultParameterSetName='ByName', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/StandardCimv2/MSFT_NetPrefixPolicy')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByName', Position=0)]\n    [ValidateNotNull()]\n    [string[]]\n    ${Prefix},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${Precedence},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${Label},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [switch]\n    ${AsJob})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('Prefix') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Prefix})\n        $__cmdletization_queryBuilder.FilterByProperty('Prefix', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Precedence') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Precedence})\n        $__cmdletization_queryBuilder.FilterByProperty('Precedence', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Label') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Label})\n        $__cmdletization_queryBuilder.FilterByProperty('Label', $__cmdletization_values, $false, 'Default')\n    }\n\n\n    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP MSFT_NetPrefixPolicy.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Get-NetPrefixPolicy' -Alias '*'"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-NetRoute"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-NetRoute"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-NetRoute"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-NetRoute"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4104,
      "details": "askOffload'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetOffloadGlobalSetting.EnabledDisabledEnum'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('NetworkDirect')) {\n            [object]$__cmdletization_value = ${NetworkDirect}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NetworkDirect'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetOffloadGlobalSetting.EnabledDisabledEnum'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NetworkDirect'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetOffloadGlobalSetting.EnabledDisabledEnum'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('NetworkDirectAcrossIPSubnets')) {\n            [object]$__cmdletization_value = ${NetworkDirectAcrossIPSubnets}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NetworkDirectAcrossIPSubnets'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetOffloadGlobalSetting.AllowedBlockedEnum'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NetworkDirectAcrossIPSubnets'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetOffloadGlobalSetting.AllowedBlockedEnum'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('PacketCoalescingFilter')) {\n            [object]$__cmdletization_value = ${PacketCoalescingFilter}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PacketCoalescingFilter'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetOffloadGlobalSetting.EnabledDisabledEnum'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PacketCoalescingFilter'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetOffloadGlobalSetting.EnabledDisabledEnum'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n      $__cmdletization_returnValue = $null\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:ModifyInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru\n            if ($PSBoundParameters.ContainsKey('InputObject')) {\n                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }\n            } else {\n                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)\n            }\n        }\n    }\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP MSFT_NetOffloadGlobalSetting.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Set-NetOffloadGlobalSetting' -Alias '*'"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4104,
      "details": "#requires -version 3.0\n\ntry { Microsoft.PowerShell.Core\\Set-StrictMode -Off } catch { }\n\n$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module\n\n$script:ClassName = 'ROOT/StandardCimv2/MSFT_NetOffloadGlobalSetting'\n$script:ClassVersion = '1.0.0'\n$script:ModuleVersion = '1.0.0'\n$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]\n\n$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()\n\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function @()\n        \n\nfunction __cmdletization_BindCommonParameters\n{\n    param(\n        $__cmdletization_objectModelWrapper,\n        $myPSBoundParameters\n    )       \n                \n\n        if ($myPSBoundParameters.ContainsKey('CimSession')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('AsJob')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] \n        }\n                    \n\n}\n                \n\nfunction Get-NetOffloadGlobalSetting\n{\n    [CmdletBinding(DefaultParameterSetName='ByName', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/StandardCimv2/MSFT_NetOffloadGlobalSetting')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetOffloadGlobalSetting.EnabledDisabledEnum[]]\n    ${ReceiveSideScaling},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetOffloadGlobalSetting.EnabledDisabledEnum[]]\n    ${ReceiveSegmentCoalescing},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetOffloadGlobalSetting.ChimneyEnum[]]\n    ${Chimney},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetOffloadGlobalSetting.EnabledDisabledEnum[]]\n    ${TaskOffload},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetOffloadGlobalSetting.EnabledDisabledEnum[]]\n    ${NetworkDirect},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetOffloadGlobalSetting.AllowedBlockedEnum[]]\n    ${NetworkDirectAcrossIPSubnets},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetOffloadGlobalSetting.EnabledDisabledEnum[]]\n    ${PacketCoalescingFilter},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [switch]\n    ${AsJob})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('ReceiveSideScaling') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${ReceiveSideScaling})\n        $__cmdletization_queryBuilder.FilterByProperty('ReceiveSideScaling', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('ReceiveSegmentCoalescing') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${ReceiveSegmentCoalescing})\n        $__cmdletization_queryBuilder.FilterByProperty('ReceiveSegmentCoalescing', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Chimney') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Chimney})\n        $__cmdletization_queryBuilder.FilterByProperty('Chimney', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('TaskOffload') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${TaskOffload})\n        $__cmdletization_queryBuilder.FilterByProperty('TaskOffload', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('NetworkDirect') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${NetworkDirect})\n        $__cmdletization_queryBuilder.FilterByProperty('NetworkDirect', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('NetworkDirectAcrossIPSubnets') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${NetworkDirectAcrossIPSubnets})\n        $__cmdletization_queryBuilder.FilterByProperty('NetworkDirectAcrossIPSubnets', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PacketCoalescingFilter') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PacketCoalescingFilter})\n        $__cmdletization_queryBuilder.FilterByProperty('PacketCoalescingFilter', $__cmdletization_values, $false, 'Default')\n    }\n\n\n    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP MSFT_NetOffloadGlobalSetting.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Get-NetOffloadGlobalSetting' -Alias '*'\n        \n\nfunction Set-NetOffloadGlobalSetting\n{\n    [CmdletBinding(DefaultParameterSetName='InputObject (cdxml)', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/StandardCimv2/MSFT_NetOffloadGlobalSetting')]\n\n    param(\n    \n    [Parameter(ParameterSetName='InputObject (cdxml)', ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetOffloadGlobalSetting')]\n    [ValidateNotNull()]\n    [ciminstance[]]\n    ${InputObject},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetOffloadGlobalSetting.EnabledDisabledEnum]\n    ${ReceiveSideScaling},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetOffloadGlobalSetting.EnabledDisabledEnum]\n    ${ReceiveSegmentCoalescing},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetOffloadGlobalSetting.ChimneyEnum]\n    ${Chimney},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetOffloadGlobalSetting.EnabledDisabledEnum]\n    ${TaskOffload},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetOffloadGlobalSetting.EnabledDisabledEnum]\n    ${NetworkDirect},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetOffloadGlobalSetting.AllowedBlockedEnum]\n    ${NetworkDirectAcrossIPSubnets},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetOffloadGlobalSetting.EnabledDisabledEnum]\n    ${PacketCoalescingFilter},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${AsJob},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${PassThru})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n\n\n    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n    switch -exact ($PSCmdlet.ParameterSetName) { \n        { @('InputObject (cdxml)') -contains $_ } {\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('ReceiveSideScaling')) {\n            [object]$__cmdletization_value = ${ReceiveSideScaling}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ReceiveSideScaling'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetOffloadGlobalSetting.EnabledDisabledEnum'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ReceiveSideScaling'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetOffloadGlobalSetting.EnabledDisabledEnum'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('ReceiveSegmentCoalescing')) {\n            [object]$__cmdletization_value = ${ReceiveSegmentCoalescing}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ReceiveSegmentCoalescing'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetOffloadGlobalSetting.EnabledDisabledEnum'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ReceiveSegmentCoalescing'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetOffloadGlobalSetting.EnabledDisabledEnum'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('Chimney')) {\n            [object]$__cmdletization_value = ${Chimney}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Chimney'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetOffloadGlobalSetting.ChimneyEnum'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Chimney'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetOffloadGlobalSetting.ChimneyEnum'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('TaskOffload')) {\n            [object]$__cmdletization_value = ${TaskOffload}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'TaskOffload'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetOffloadGlobalSetting.EnabledDisabledEnum'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'T"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-NetRoute"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-NetRoute"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-NetRoute"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-NetRoute"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-NetRoute"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-NetRoute"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4104,
      "details": "()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP MSFT_NetNeighbor.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Remove-NetNeighbor' -Alias '*'"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4104,
      "details": "{\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('IPAddress') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${IPAddress})\n        $__cmdletization_queryBuilder.FilterByProperty('IPAddress', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('InterfaceIndex') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${InterfaceIndex})\n        $__cmdletization_queryBuilder.FilterByProperty('InterfaceIndex', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('InterfaceAlias') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${InterfaceAlias})\n        $__cmdletization_queryBuilder.FilterByProperty('InterfaceAlias', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('State') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${State})\n        $__cmdletization_queryBuilder.FilterByProperty('State', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AddressFamily') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${AddressFamily})\n        $__cmdletization_queryBuilder.FilterByProperty('AddressFamily', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})\n    }\n    if ($PSBoundParameters.ContainsKey('IncludeAllCompartments') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('IncludeAllCompartments', ${IncludeAllCompartments})\n    }\n\n\n    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n    switch -exact ($PSCmdlet.ParameterSetName) { \n        { @('ByName', 'InputObject (cdxml)') -contains $_ } {\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('LinkLayerAddress')) {\n            [object]$__cmdletization_value = ${LinkLayerAddress}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LinkLayerAddress'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LinkLayerAddress'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n      $__cmdletization_returnValue = $null\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:ModifyInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru\n            if ($PSBoundParameters.ContainsKey('InputObject')) {\n                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }\n            } else {\n                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)\n            }\n        }\n    }\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP MSFT_NetNeighbor.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Set-NetNeighbor' -Alias '*'\n        \n\nfunction Remove-NetNeighbor\n{\n    [CmdletBinding(DefaultParameterSetName='ByName', SupportsShouldProcess=$true, ConfirmImpact='High', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/StandardCimv2/MSFT_NetNeighbor')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByName', Position=0)]\n    [ValidateNotNull()]\n    [string[]]\n    ${IPAddress},\n\n    [Parameter(ParameterSetName='ByName', ValueFromPipelineByPropertyName=$true)]\n    [Alias('ifIndex')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${InterfaceIndex},\n\n    [Parameter(ParameterSetName='ByName', ValueFromPipelineByPropertyName=$true)]\n    [Alias('ifAlias')]\n    [ValidateNotNull()]\n    [string[]]\n    ${InterfaceAlias},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [string[]]\n    ${LinkLayerAddress},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetNeighbor.State[]]\n    ${State},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetNeighbor.AddressFamily[]]\n    ${AddressFamily},\n\n    [Parameter(ParameterSetName='ByName', ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIPInterface')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedIPInterface},\n\n    [Parameter(ParameterSetName='ByName')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='ByName')]\n    [switch]\n    ${IncludeAllCompartments},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetNeighbor')]\n    [ValidateNotNull()]\n    [ciminstance[]]\n    ${InputObject},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${AsJob},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${PassThru})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('IPAddress') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${IPAddress})\n        $__cmdletization_queryBuilder.FilterByProperty('IPAddress', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('InterfaceIndex') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${InterfaceIndex})\n        $__cmdletization_queryBuilder.FilterByProperty('InterfaceIndex', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('InterfaceAlias') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${InterfaceAlias})\n        $__cmdletization_queryBuilder.FilterByProperty('InterfaceAlias', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('LinkLayerAddress') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${LinkLayerAddress})\n        $__cmdletization_queryBuilder.FilterByProperty('LinkLayerAddress', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('State') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${State})\n        $__cmdletization_queryBuilder.FilterByProperty('State', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AddressFamily') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${AddressFamily})\n        $__cmdletization_queryBuilder.FilterByProperty('AddressFamily', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedIPInterface') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedIPInterface}, 'MSFT_NetIPInterfaceNeighbor', 'Antecedent', 'Dependent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})\n    }\n    if ($PSBoundParameters.ContainsKey('IncludeAllCompartments') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('IncludeAllCompartments', ${IncludeAllCompartments})\n    }\n\n\n    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n    switch -exact ($PSCmdlet.ParameterSetName) { \n        { @('ByName', 'InputObject (cdxml)') -contains $_ } {\n      $__cmdletization_returnValue = $null\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:DeleteInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru\n            if ($PSBoundParameters.ContainsKey('InputObject')) {\n                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }\n            } else {\n                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)\n            }\n        }\n    }\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4104,
      "details": "{\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LinkLayerAddress'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('PolicyStore')) {\n          [object]$__cmdletization_value = ${PolicyStore}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('State')) {\n          [object]$__cmdletization_value = ${State}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'State'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetNeighbor.State'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'State'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetNeighbor.State'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('AddressFamily')) {\n          [object]$__cmdletization_value = ${AddressFamily}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AddressFamily'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetNeighbor.AddressFamily'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AddressFamily'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetNeighbor.AddressFamily'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'CmdletOutput'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'Out'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.UInt32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Create', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo)\n        }\n    }\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP MSFT_NetNeighbor.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'New-NetNeighbor' -Alias '*'\n        \n\nfunction Get-NetNeighbor\n{\n    [CmdletBinding(DefaultParameterSetName='ByName', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/StandardCimv2/MSFT_NetNeighbor')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByName', Position=0)]\n    [ValidateNotNull()]\n    [string[]]\n    ${IPAddress},\n\n    [Parameter(ParameterSetName='ByName', ValueFromPipelineByPropertyName=$true)]\n    [Alias('ifIndex')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${InterfaceIndex},\n\n    [Parameter(ParameterSetName='ByName', ValueFromPipelineByPropertyName=$true)]\n    [Alias('ifAlias')]\n    [ValidateNotNull()]\n    [string[]]\n    ${InterfaceAlias},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [string[]]\n    ${LinkLayerAddress},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetNeighbor.State[]]\n    ${State},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetNeighbor.AddressFamily[]]\n    ${AddressFamily},\n\n    [Parameter(ParameterSetName='ByName', ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIPInterface')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedIPInterface},\n\n    [Parameter(ParameterSetName='ByName')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='ByName')]\n    [switch]\n    ${IncludeAllCompartments},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [switch]\n    ${AsJob})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('IPAddress') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${IPAddress})\n        $__cmdletization_queryBuilder.FilterByProperty('IPAddress', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('InterfaceIndex') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${InterfaceIndex})\n        $__cmdletization_queryBuilder.FilterByProperty('InterfaceIndex', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('InterfaceAlias') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${InterfaceAlias})\n        $__cmdletization_queryBuilder.FilterByProperty('InterfaceAlias', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('LinkLayerAddress') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${LinkLayerAddress})\n        $__cmdletization_queryBuilder.FilterByProperty('LinkLayerAddress', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('State') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${State})\n        $__cmdletization_queryBuilder.FilterByProperty('State', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AddressFamily') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${AddressFamily})\n        $__cmdletization_queryBuilder.FilterByProperty('AddressFamily', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedIPInterface') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedIPInterface}, 'MSFT_NetIPInterfaceNeighbor', 'Antecedent', 'Dependent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})\n    }\n    if ($PSBoundParameters.ContainsKey('IncludeAllCompartments') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('IncludeAllCompartments', ${IncludeAllCompartments})\n    }\n\n\n    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP MSFT_NetNeighbor.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Get-NetNeighbor' -Alias '*'\n        \n\nfunction Set-NetNeighbor\n{\n    [CmdletBinding(DefaultParameterSetName='ByName', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/StandardCimv2/MSFT_NetNeighbor')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByName', Position=0)]\n    [ValidateNotNull()]\n    [string[]]\n    ${IPAddress},\n\n    [Parameter(ParameterSetName='ByName', ValueFromPipelineByPropertyName=$true)]\n    [Alias('ifIndex')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${InterfaceIndex},\n\n    [Parameter(ParameterSetName='ByName', ValueFromPipelineByPropertyName=$true)]\n    [Alias('ifAlias')]\n    [ValidateNotNull()]\n    [string[]]\n    ${InterfaceAlias},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetNeighbor.State[]]\n    ${State},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetNeighbor.AddressFamily[]]\n    ${AddressFamily},\n\n    [Parameter(ParameterSetName='ByName')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='ByName')]\n    [switch]\n    ${IncludeAllCompartments},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetNeighbor')]\n    [ValidateNotNull()]\n    [ciminstance[]]\n    ${InputObject},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [string]\n    ${LinkLayerAddress},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${AsJob},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${PassThru})\n\n    DynamicParam {\n        try"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4104,
      "details": "#requires -version 3.0\n\ntry { Microsoft.PowerShell.Core\\Set-StrictMode -Off } catch { }\n\n$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module\n\n$script:ClassName = 'ROOT/StandardCimv2/MSFT_NetNeighbor'\n$script:ClassVersion = '1.0.0'\n$script:ModuleVersion = '1.0.0'\n$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]\n\n$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()\n\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function @()\n        \n\nfunction __cmdletization_BindCommonParameters\n{\n    param(\n        $__cmdletization_objectModelWrapper,\n        $myPSBoundParameters\n    )       \n                \n\n        if ($myPSBoundParameters.ContainsKey('CimSession')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('AsJob')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] \n        }\n                    \n\n}\n                \n\nfunction New-NetNeighbor\n{\n    [CmdletBinding(DefaultParameterSetName='ByInterfaceAlias', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance[]])][OutputType([Microsoft.Management.Infrastructure.CimInstance[]])]\n    param(\n    \n    [Parameter(ParameterSetName='ByInterfaceAlias', Mandatory=$true, Position=0)]\n    [Parameter(ParameterSetName='ByInterfaceIndex', Mandatory=$true, Position=0)]\n    [string]\n    ${IPAddress},\n\n    [Parameter(ParameterSetName='ByInterfaceAlias', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]\n    [Alias('ifAlias')]\n    [string]\n    ${InterfaceAlias},\n\n    [Parameter(ParameterSetName='ByInterfaceAlias')]\n    [Parameter(ParameterSetName='ByInterfaceIndex')]\n    [string]\n    ${LinkLayerAddress},\n\n    [Parameter(ParameterSetName='ByInterfaceAlias')]\n    [Parameter(ParameterSetName='ByInterfaceIndex')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='ByInterfaceAlias')]\n    [Parameter(ParameterSetName='ByInterfaceIndex')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetNeighbor.State]\n    ${State},\n\n    [Parameter(ParameterSetName='ByInterfaceAlias')]\n    [Parameter(ParameterSetName='ByInterfaceIndex')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetNeighbor.AddressFamily]\n    ${AddressFamily},\n\n    [Parameter(ParameterSetName='ByInterfaceIndex', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]\n    [Alias('ifIndex')]\n    [uint32]\n    ${InterfaceIndex},\n\n    [Parameter(ParameterSetName='ByInterfaceAlias')]\n    [Parameter(ParameterSetName='ByInterfaceIndex')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByInterfaceAlias')]\n    [Parameter(ParameterSetName='ByInterfaceIndex')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByInterfaceAlias')]\n    [Parameter(ParameterSetName='ByInterfaceIndex')]\n    [switch]\n    ${AsJob})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n      $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n\n      switch -exact ($PSCmdlet.ParameterSetName) { \n        { @('ByInterfaceAlias') -contains $_ } {\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('IPAddress')) {\n          [object]$__cmdletization_value = ${IPAddress}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IPAddress'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IPAddress'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('InterfaceAlias')) {\n          [object]$__cmdletization_value = ${InterfaceAlias}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InterfaceAlias'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InterfaceAlias'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('LinkLayerAddress')) {\n          [object]$__cmdletization_value = ${LinkLayerAddress}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LinkLayerAddress'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LinkLayerAddress'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('PolicyStore')) {\n          [object]$__cmdletization_value = ${PolicyStore}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('State')) {\n          [object]$__cmdletization_value = ${State}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'State'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetNeighbor.State'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'State'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetNeighbor.State'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('AddressFamily')) {\n          [object]$__cmdletization_value = ${AddressFamily}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AddressFamily'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetNeighbor.AddressFamily'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AddressFamily'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetNeighbor.AddressFamily'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'CmdletOutput'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'Out'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.UInt32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Create', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo)\n        }\n        { @('ByInterfaceIndex') -contains $_ } {\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('IPAddress')) {\n          [object]$__cmdletization_value = ${IPAddress}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IPAddress'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IPAddress'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('InterfaceIndex')) {\n          [object]$__cmdletization_value = ${InterfaceIndex}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InterfaceIndex'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InterfaceIndex'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('LinkLayerAddress')) {\n          [object]$__cmdletization_value = ${LinkLayerAddress}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LinkLayerAddress'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-NetRoute"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-NetRoute"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-NetRoute"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-NetRoute"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4104,
      "details": "ocol.RandomizeIdentifiers'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('AddressMaskReply')) {\n            [object]$__cmdletization_value = ${AddressMaskReply}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AddressMaskReply'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.AddressMaskReply'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AddressMaskReply'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.AddressMaskReply'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('DeadGatewayDetection')) {\n            [object]$__cmdletization_value = ${DeadGatewayDetection}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DeadGatewayDetection'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.DeadGatewayDetection'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DeadGatewayDetection'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.DeadGatewayDetection'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('UseTemporaryAddresses')) {\n            [object]$__cmdletization_value = ${UseTemporaryAddresses}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'UseTemporaryAddresses'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.UseTemporaryAddresses'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'UseTemporaryAddresses'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.UseTemporaryAddresses'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('MaxTemporaryDadAttempts')) {\n            [object]$__cmdletization_value = ${MaxTemporaryDadAttempts}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MaxDadAttempts'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MaxDadAttempts'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('MaxTemporaryValidLifetime')) {\n            [object]$__cmdletization_value = ${MaxTemporaryValidLifetime}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MaxValidLifetime'; ParameterType = 'System.TimeSpan'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MaxValidLifetime'; ParameterType = 'System.TimeSpan'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('MaxTemporaryPreferredLifetime')) {\n            [object]$__cmdletization_value = ${MaxTemporaryPreferredLifetime}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MaxPreferredLifetime'; ParameterType = 'System.TimeSpan'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MaxPreferredLifetime'; ParameterType = 'System.TimeSpan'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('TemporaryRegenerateTime')) {\n            [object]$__cmdletization_value = ${TemporaryRegenerateTime}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RegenerateTime'; ParameterType = 'System.TimeSpan'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RegenerateTime'; ParameterType = 'System.TimeSpan'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('MaxTemporaryDesyncTime')) {\n            [object]$__cmdletization_value = ${MaxTemporaryDesyncTime}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MaxRandomTime'; ParameterType = 'System.TimeSpan'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MaxRandomTime'; ParameterType = 'System.TimeSpan'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n      $__cmdletization_returnValue = $null\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:ModifyInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru\n            if ($PSBoundParameters.ContainsKey('InputObject')) {\n                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }\n            } else {\n                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)\n            }\n        }\n    }\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP MSFT_NetIPv6Protocol.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Set-NetIPv6Protocol' -Alias '*'"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4104,
      "details": "[Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.MulticastForwarding]\n    ${MulticastForwarding},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.GroupForwardedFragments]\n    ${GroupForwardedFragments},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.RandomizeIdentifiers]\n    ${RandomizeIdentifiers},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.AddressMaskReply]\n    ${AddressMaskReply},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.DeadGatewayDetection]\n    ${DeadGatewayDetection},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.UseTemporaryAddresses]\n    ${UseTemporaryAddresses},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('MaxDadAttempts')]\n    [uint32]\n    ${MaxTemporaryDadAttempts},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('MaxValidLifetime')]\n    [timespan]\n    ${MaxTemporaryValidLifetime},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('MaxPreferredLifetime')]\n    [timespan]\n    ${MaxTemporaryPreferredLifetime},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('RegenerateTime')]\n    [timespan]\n    ${TemporaryRegenerateTime},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('MaxRandomTime')]\n    [timespan]\n    ${MaxTemporaryDesyncTime},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${AsJob},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${PassThru})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n\n\n    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n    switch -exact ($PSCmdlet.ParameterSetName) { \n        { @('InputObject (cdxml)') -contains $_ } {\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('DefaultHopLimit')) {\n            [object]$__cmdletization_value = ${DefaultHopLimit}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DefaultHopLimit'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DefaultHopLimit'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('NeighborCacheLimitEntries')) {\n            [object]$__cmdletization_value = ${NeighborCacheLimitEntries}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NeighborCacheLimit'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NeighborCacheLimit'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('RouteCacheLimitEntries')) {\n            [object]$__cmdletization_value = ${RouteCacheLimitEntries}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RouteCacheLimit'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RouteCacheLimit'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('ReassemblyLimitBytes')) {\n            [object]$__cmdletization_value = ${ReassemblyLimitBytes}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ReassemblyLimit'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ReassemblyLimit'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('IcmpRedirects')) {\n            [object]$__cmdletization_value = ${IcmpRedirects}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IcmpRedirects'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.IcmpRedirects'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IcmpRedirects'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.IcmpRedirects'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('SourceRoutingBehavior')) {\n            [object]$__cmdletization_value = ${SourceRoutingBehavior}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SourceRoutingBehavior'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.SourceRoutingBehavior'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SourceRoutingBehavior'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.SourceRoutingBehavior'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('DhcpMediaSense')) {\n            [object]$__cmdletization_value = ${DhcpMediaSense}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DhcpMediaSense'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.DhcpMediaSense'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DhcpMediaSense'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.DhcpMediaSense'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('MediaSenseEventLog')) {\n            [object]$__cmdletization_value = ${MediaSenseEventLog}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MediaSenseEventLog'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.MediaSenseEventLog'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MediaSenseEventLog'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.MediaSenseEventLog'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('MldLevel')) {\n            [object]$__cmdletization_value = ${MldLevel}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MldLevel'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.MldLevel'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MldLevel'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.MldLevel'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('MldVersion')) {\n            [object]$__cmdletization_value = ${MldVersion}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MldVersion'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.MldVersion'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MldVersion'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.MldVersion'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('MulticastForwarding')) {\n            [object]$__cmdletization_value = ${MulticastForwarding}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MulticastForwarding'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.MulticastForwarding'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MulticastForwarding'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.MulticastForwarding'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('GroupForwardedFragments')) {\n            [object]$__cmdletization_value = ${GroupForwardedFragments}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'GroupForwardedFragments'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.GroupForwardedFragments'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'GroupForwardedFragments'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.GroupForwardedFragments'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('RandomizeIdentifiers')) {\n            [object]$__cmdletization_value = ${RandomizeIdentifiers}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RandomizeIdentifiers'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.RandomizeIdentifiers'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RandomizeIdentifiers'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Prot"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4104,
      "details": "#requires -version 3.0\n\ntry { Microsoft.PowerShell.Core\\Set-StrictMode -Off } catch { }\n\n$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module\n\n$script:ClassName = 'ROOT/StandardCimv2/MSFT_NetIPv6Protocol'\n$script:ClassVersion = '1.0.0'\n$script:ModuleVersion = '1.0.0'\n$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]\n\n$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()\n\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function @()\n        \n\nfunction __cmdletization_BindCommonParameters\n{\n    param(\n        $__cmdletization_objectModelWrapper,\n        $myPSBoundParameters\n    )       \n                \n\n        if ($myPSBoundParameters.ContainsKey('CimSession')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('AsJob')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] \n        }\n                    \n\n}\n                \n\nfunction Get-NetIPv6Protocol\n{\n    [CmdletBinding(DefaultParameterSetName='ByName', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/StandardCimv2/MSFT_NetIPv6Protocol')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${DefaultHopLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Alias('NeighborCacheLimit')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${NeighborCacheLimitEntries},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Alias('RouteCacheLimit')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${RouteCacheLimitEntries},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Alias('ReassemblyLimit')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${ReassemblyLimitBytes},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.IcmpRedirects[]]\n    ${IcmpRedirects},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.SourceRoutingBehavior[]]\n    ${SourceRoutingBehavior},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.DhcpMediaSense[]]\n    ${DhcpMediaSense},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.MediaSenseEventLog[]]\n    ${MediaSenseEventLog},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.MldLevel[]]\n    ${MldLevel},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.MldVersion[]]\n    ${MldVersion},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.MulticastForwarding[]]\n    ${MulticastForwarding},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.GroupForwardedFragments[]]\n    ${GroupForwardedFragments},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.RandomizeIdentifiers[]]\n    ${RandomizeIdentifiers},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.AddressMaskReply[]]\n    ${AddressMaskReply},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.DeadGatewayDetection[]]\n    ${DeadGatewayDetection},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.UseTemporaryAddresses[]]\n    ${UseTemporaryAddresses},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Alias('MaxDadAttempts')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${MaxTemporaryDadAttempts},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Alias('MaxValidLifetime')]\n    [ValidateNotNull()]\n    [timespan[]]\n    ${MaxTemporaryValidLifetime},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Alias('MaxPreferredLifetime')]\n    [ValidateNotNull()]\n    [timespan[]]\n    ${MaxTemporaryPreferredLifetime},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Alias('RegenerateTime')]\n    [ValidateNotNull()]\n    [timespan[]]\n    ${TemporaryRegenerateTime},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Alias('MaxRandomTime')]\n    [ValidateNotNull()]\n    [timespan[]]\n    ${MaxTemporaryDesyncTime},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [switch]\n    ${AsJob})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('DefaultHopLimit') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DefaultHopLimit})\n        $__cmdletization_queryBuilder.FilterByProperty('DefaultHopLimit', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('NeighborCacheLimitEntries') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${NeighborCacheLimitEntries})\n        $__cmdletization_queryBuilder.FilterByProperty('NeighborCacheLimit', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('RouteCacheLimitEntries') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${RouteCacheLimitEntries})\n        $__cmdletization_queryBuilder.FilterByProperty('RouteCacheLimit', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('ReassemblyLimitBytes') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${ReassemblyLimitBytes})\n        $__cmdletization_queryBuilder.FilterByProperty('ReassemblyLimit', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('IcmpRedirects') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${IcmpRedirects})\n        $__cmdletization_queryBuilder.FilterByProperty('IcmpRedirects', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('SourceRoutingBehavior') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${SourceRoutingBehavior})\n        $__cmdletization_queryBuilder.FilterByProperty('SourceRoutingBehavior', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DhcpMediaSense') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DhcpMediaSense})\n        $__cmdletization_queryBuilder.FilterByProperty('DhcpMediaSense', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('MediaSenseEventLog') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${MediaSenseEventLog})\n        $__cmdletization_queryBuilder.FilterByProperty('MediaSenseEventLog', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('MldLevel') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${MldLevel})\n        $__cmdletization_queryBuilder.FilterByProperty('MldLevel', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('MldVersion') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${MldVersion})\n        $__cmdletization_queryBuilder.FilterByProperty('MldVersion', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('MulticastForwarding') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${MulticastForwarding})\n        $__cmdletization_queryBuilder.FilterByProperty('MulticastForwarding', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('GroupForwardedFragments') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${GroupForwardedFragments})\n        $__cmdletization_queryBuilder.FilterByProperty('GroupForwardedFragments', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('RandomizeIdentifiers') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${RandomizeIdentifiers})\n        $__cmdletization_queryBuilder.FilterByProperty('RandomizeIdentifiers', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AddressMaskReply') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${AddressMaskReply})\n        $__cmdletization_queryBuilder.FilterByProperty('AddressMaskReply', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DeadGatewayDetection') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DeadGatewayDetection})\n        $__cmdletization_queryBuilder.FilterByProperty('DeadGatewayDetection', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('UseTemporaryAddresses') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${UseTemporaryAddresses})\n        $__cmdletization_queryBuilder.FilterByProperty('UseTemporaryAddresses', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('MaxTemporaryDadAttempts') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${MaxTemporaryDadAttempts})\n        $__cmdletization_queryBuilder.FilterByProperty('MaxDadAttempts', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('MaxTemporaryValidLifetime') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${MaxTemporaryValidLifetime})\n        $__cmdletization_queryBuilder.FilterByProperty('MaxValidLifetime', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('MaxTemporaryPreferredLifetime') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${MaxTemporaryPreferredLifetime})\n        $__cmdletization_queryBuilder.FilterByProperty('MaxPreferredLifetime', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('TemporaryRegenerateTime') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${TemporaryRegenerateTime})\n        $__cmdletization_queryBuilder.FilterByProperty('RegenerateTime', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('MaxTemporaryDesyncTime') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${MaxTemporaryDesyncTime})\n        $__cmdletization_queryBuilder.FilterByProperty('MaxRandomTime', $__cmdletization_values, $false, 'Default')\n    }\n\n\n    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP MSFT_NetIPv6Protocol.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Get-NetIPv6Protocol' -Alias '*'\n        \n\nfunction Set-NetIPv6Protocol\n{\n    [CmdletBinding(DefaultParameterSetName='InputObject (cdxml)', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/StandardCimv2/MSFT_NetIPv6Protocol')]\n\n    param(\n    \n    [Parameter(ParameterSetName='InputObject (cdxml)', ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetIPv6Protocol')]\n    [ValidateNotNull()]\n    [ciminstance[]]\n    ${InputObject},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [uint32]\n    ${DefaultHopLimit},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('NeighborCacheLimit')]\n    [uint32]\n    ${NeighborCacheLimitEntries},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('RouteCacheLimit')]\n    [uint32]\n    ${RouteCacheLimitEntries},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('ReassemblyLimit')]\n    [uint32]\n    ${ReassemblyLimitBytes},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.IcmpRedirects]\n    ${IcmpRedirects},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.SourceRoutingBehavior]\n    ${SourceRoutingBehavior},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.DhcpMediaSense]\n    ${DhcpMediaSense},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.MediaSenseEventLog]\n    ${MediaSenseEventLog},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.MldLevel]\n    ${MldLevel},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.MldVersion]\n    ${MldVersion},"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-NetRoute"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-NetRoute"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-NetRoute"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-NetRoute"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4104,
      "details": "lue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('NeighborCacheLimitEntries')) {\n            [object]$__cmdletization_value = ${NeighborCacheLimitEntries}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NeighborCacheLimit'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NeighborCacheLimit'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('RouteCacheLimitEntries')) {\n            [object]$__cmdletization_value = ${RouteCacheLimitEntries}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RouteCacheLimit'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RouteCacheLimit'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('ReassemblyLimitBytes')) {\n            [object]$__cmdletization_value = ${ReassemblyLimitBytes}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ReassemblyLimit'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ReassemblyLimit'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('IcmpRedirects')) {\n            [object]$__cmdletization_value = ${IcmpRedirects}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IcmpRedirects'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.IcmpRedirects'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IcmpRedirects'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.IcmpRedirects'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('SourceRoutingBehavior')) {\n            [object]$__cmdletization_value = ${SourceRoutingBehavior}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SourceRoutingBehavior'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.SourceRoutingBehavior'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SourceRoutingBehavior'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.SourceRoutingBehavior'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('DhcpMediaSense')) {\n            [object]$__cmdletization_value = ${DhcpMediaSense}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DhcpMediaSense'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.DhcpMediaSense'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DhcpMediaSense'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.DhcpMediaSense'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('MediaSenseEventLog')) {\n            [object]$__cmdletization_value = ${MediaSenseEventLog}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MediaSenseEventLog'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.MediaSenseEventLog'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MediaSenseEventLog'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.MediaSenseEventLog'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('IGMPLevel')) {\n            [object]$__cmdletization_value = ${IGMPLevel}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MldLevel'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.MldLevel'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MldLevel'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.MldLevel'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('IGMPVersion')) {\n            [object]$__cmdletization_value = ${IGMPVersion}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MldVersion'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.MldVersion'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MldVersion'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.MldVersion'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('MulticastForwarding')) {\n            [object]$__cmdletization_value = ${MulticastForwarding}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MulticastForwarding'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.MulticastForwarding'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MulticastForwarding'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.MulticastForwarding'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('GroupForwardedFragments')) {\n            [object]$__cmdletization_value = ${GroupForwardedFragments}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'GroupForwardedFragments'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.GroupForwardedFragments'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'GroupForwardedFragments'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.GroupForwardedFragments'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('RandomizeIdentifiers')) {\n            [object]$__cmdletization_value = ${RandomizeIdentifiers}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RandomizeIdentifiers'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.RandomizeIdentifiers'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RandomizeIdentifiers'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.RandomizeIdentifiers'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('AddressMaskReply')) {\n            [object]$__cmdletization_value = ${AddressMaskReply}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AddressMaskReply'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.AddressMaskReply'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AddressMaskReply'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.AddressMaskReply'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('DeadGatewayDetection')) {\n            [object]$__cmdletization_value = ${DeadGatewayDetection}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DeadGatewayDetection'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.DeadGatewayDetection'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DeadGatewayDetection'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.DeadGatewayDetection'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('MinimumMtu')) {\n            [object]$__cmdletization_value = ${MinimumMtu}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MinimumMtu'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MinimumMtu'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n      $__cmdletization_returnValue = $null\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:ModifyInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru\n            if ($PSBoundParameters.ContainsKey('InputObject')) {\n                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }\n            } else {\n                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)\n            }\n        }\n    }\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP MSFT_NetIPv4Protocol.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Set-NetIPv4Protocol' -Alias '*'"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4104,
      "details": "#requires -version 3.0\n\ntry { Microsoft.PowerShell.Core\\Set-StrictMode -Off } catch { }\n\n$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module\n\n$script:ClassName = 'ROOT/StandardCimv2/MSFT_NetIPv4Protocol'\n$script:ClassVersion = '1.0.0'\n$script:ModuleVersion = '1.0.0'\n$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]\n\n$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()\n\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function @()\n        \n\nfunction __cmdletization_BindCommonParameters\n{\n    param(\n        $__cmdletization_objectModelWrapper,\n        $myPSBoundParameters\n    )       \n                \n\n        if ($myPSBoundParameters.ContainsKey('CimSession')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('AsJob')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] \n        }\n                    \n\n}\n                \n\nfunction Get-NetIPv4Protocol\n{\n    [CmdletBinding(DefaultParameterSetName='ByName', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/StandardCimv2/MSFT_NetIPv4Protocol')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${DefaultHopLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Alias('NeighborCacheLimit')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${NeighborCacheLimitEntries},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Alias('RouteCacheLimit')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${RouteCacheLimitEntries},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Alias('ReassemblyLimit')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${ReassemblyLimitBytes},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.IcmpRedirects[]]\n    ${IcmpRedirects},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.SourceRoutingBehavior[]]\n    ${SourceRoutingBehavior},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.DhcpMediaSense[]]\n    ${DhcpMediaSense},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.MediaSenseEventLog[]]\n    ${MediaSenseEventLog},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Alias('MldLevel')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.MldLevel[]]\n    ${IGMPLevel},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Alias('MldVersion')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.MldVersion[]]\n    ${IGMPVersion},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.MulticastForwarding[]]\n    ${MulticastForwarding},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.GroupForwardedFragments[]]\n    ${GroupForwardedFragments},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.RandomizeIdentifiers[]]\n    ${RandomizeIdentifiers},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.AddressMaskReply[]]\n    ${AddressMaskReply},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.DeadGatewayDetection[]]\n    ${DeadGatewayDetection},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${MinimumMtu},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [switch]\n    ${AsJob})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('DefaultHopLimit') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DefaultHopLimit})\n        $__cmdletization_queryBuilder.FilterByProperty('DefaultHopLimit', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('NeighborCacheLimitEntries') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${NeighborCacheLimitEntries})\n        $__cmdletization_queryBuilder.FilterByProperty('NeighborCacheLimit', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('RouteCacheLimitEntries') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${RouteCacheLimitEntries})\n        $__cmdletization_queryBuilder.FilterByProperty('RouteCacheLimit', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('ReassemblyLimitBytes') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${ReassemblyLimitBytes})\n        $__cmdletization_queryBuilder.FilterByProperty('ReassemblyLimit', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('IcmpRedirects') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${IcmpRedirects})\n        $__cmdletization_queryBuilder.FilterByProperty('IcmpRedirects', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('SourceRoutingBehavior') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${SourceRoutingBehavior})\n        $__cmdletization_queryBuilder.FilterByProperty('SourceRoutingBehavior', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DhcpMediaSense') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DhcpMediaSense})\n        $__cmdletization_queryBuilder.FilterByProperty('DhcpMediaSense', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('MediaSenseEventLog') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${MediaSenseEventLog})\n        $__cmdletization_queryBuilder.FilterByProperty('MediaSenseEventLog', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('IGMPLevel') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${IGMPLevel})\n        $__cmdletization_queryBuilder.FilterByProperty('MldLevel', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('IGMPVersion') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${IGMPVersion})\n        $__cmdletization_queryBuilder.FilterByProperty('MldVersion', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('MulticastForwarding') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${MulticastForwarding})\n        $__cmdletization_queryBuilder.FilterByProperty('MulticastForwarding', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('GroupForwardedFragments') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${GroupForwardedFragments})\n        $__cmdletization_queryBuilder.FilterByProperty('GroupForwardedFragments', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('RandomizeIdentifiers') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${RandomizeIdentifiers})\n        $__cmdletization_queryBuilder.FilterByProperty('RandomizeIdentifiers', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AddressMaskReply') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${AddressMaskReply})\n        $__cmdletization_queryBuilder.FilterByProperty('AddressMaskReply', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DeadGatewayDetection') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DeadGatewayDetection})\n        $__cmdletization_queryBuilder.FilterByProperty('DeadGatewayDetection', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('MinimumMtu') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${MinimumMtu})\n        $__cmdletization_queryBuilder.FilterByProperty('MinimumMtu', $__cmdletization_values, $false, 'Default')\n    }\n\n\n    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP MSFT_NetIPv4Protocol.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Get-NetIPv4Protocol' -Alias '*'\n        \n\nfunction Set-NetIPv4Protocol\n{\n    [CmdletBinding(DefaultParameterSetName='InputObject (cdxml)', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/StandardCimv2/MSFT_NetIPv4Protocol')]\n\n    param(\n    \n    [Parameter(ParameterSetName='InputObject (cdxml)', ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetIPv4Protocol')]\n    [ValidateNotNull()]\n    [ciminstance[]]\n    ${InputObject},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [uint32]\n    ${DefaultHopLimit},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('NeighborCacheLimit')]\n    [uint32]\n    ${NeighborCacheLimitEntries},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('RouteCacheLimit')]\n    [uint32]\n    ${RouteCacheLimitEntries},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('ReassemblyLimit')]\n    [uint32]\n    ${ReassemblyLimitBytes},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.IcmpRedirects]\n    ${IcmpRedirects},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.SourceRoutingBehavior]\n    ${SourceRoutingBehavior},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.DhcpMediaSense]\n    ${DhcpMediaSense},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.MediaSenseEventLog]\n    ${MediaSenseEventLog},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('MldLevel')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.MldLevel]\n    ${IGMPLevel},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('MldVersion')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.MldVersion]\n    ${IGMPVersion},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.MulticastForwarding]\n    ${MulticastForwarding},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.GroupForwardedFragments]\n    ${GroupForwardedFragments},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.RandomizeIdentifiers]\n    ${RandomizeIdentifiers},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.AddressMaskReply]\n    ${AddressMaskReply},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.DeadGatewayDetection]\n    ${DeadGatewayDetection},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [uint32]\n    ${MinimumMtu},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${AsJob},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${PassThru})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n\n\n    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n    switch -exact ($PSCmdlet.ParameterSetName) { \n        { @('InputObject (cdxml)') -contains $_ } {\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('DefaultHopLimit')) {\n            [object]$__cmdletization_value = ${DefaultHopLimit}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DefaultHopLimit'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DefaultHopLimit'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultVa"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-NetRoute"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-NetRoute"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-NetRoute"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-NetRoute"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4104,
      "details": "meter]@{Name = 'AdvertiseDefaultRoute'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.AdvertiseDefaultRoute'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AdvertiseDefaultRoute'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.AdvertiseDefaultRoute'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('CurrentHopLimit')) {\n            [object]$__cmdletization_value = ${CurrentHopLimit}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'CurrentHopLimit'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'CurrentHopLimit'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('ForceArpNdWolPattern')) {\n            [object]$__cmdletization_value = ${ForceArpNdWolPattern}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ForceArpNdWolPattern'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.ForceArpNdWolPattern'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ForceArpNdWolPattern'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.ForceArpNdWolPattern'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('DirectedMacWolPattern')) {\n            [object]$__cmdletization_value = ${DirectedMacWolPattern}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DirectedMacWolPattern'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.DirectedMacWolPattern'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DirectedMacWolPattern'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.DirectedMacWolPattern'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('EcnMarking')) {\n            [object]$__cmdletization_value = ${EcnMarking}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EcnMarking'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.EcnMarking'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EcnMarking'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.EcnMarking'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('Dhcp')) {\n            [object]$__cmdletization_value = ${Dhcp}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Dhcp'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.Dhcp'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Dhcp'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.Dhcp'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('AutomaticMetric')) {\n            [object]$__cmdletization_value = ${AutomaticMetric}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AutomaticMetric'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.AutomaticMetric'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AutomaticMetric'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.AutomaticMetric'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n      $__cmdletization_returnValue = $null\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:ModifyInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru\n            if ($PSBoundParameters.ContainsKey('InputObject')) {\n                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }\n            } else {\n                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)\n            }\n        }\n    }\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP MSFT_NetIPInterface.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Set-NetIPInterface' -Alias '*'"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4104,
      "details": "} else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InterfaceMetric'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('NeighborUnreachabilityDetection')) {\n            [object]$__cmdletization_value = ${NeighborUnreachabilityDetection}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NeighborUnreachabilityDetection'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.NeighborUnreachabilityDetection'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NeighborUnreachabilityDetection'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.NeighborUnreachabilityDetection'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('BaseReachableTimeMs')) {\n            [object]$__cmdletization_value = ${BaseReachableTimeMs}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'BaseReachableTime'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'BaseReachableTime'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('RetransmitTimeMs')) {\n            [object]$__cmdletization_value = ${RetransmitTimeMs}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RetransmitTime'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RetransmitTime'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('DadTransmits')) {\n            [object]$__cmdletization_value = ${DadTransmits}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DadTransmits'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DadTransmits'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('DadRetransmitTimeMs')) {\n            [object]$__cmdletization_value = ${DadRetransmitTimeMs}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DadRetransmitTime'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DadRetransmitTime'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('RouterDiscovery')) {\n            [object]$__cmdletization_value = ${RouterDiscovery}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RouterDiscovery'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.RouterDiscovery'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RouterDiscovery'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.RouterDiscovery'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('ManagedAddressConfiguration')) {\n            [object]$__cmdletization_value = ${ManagedAddressConfiguration}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ManagedAddressConfiguration'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.ManagedAddressConfiguration'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ManagedAddressConfiguration'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.ManagedAddressConfiguration'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('OtherStatefulConfiguration')) {\n            [object]$__cmdletization_value = ${OtherStatefulConfiguration}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'OtherStatefulConfiguration'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.OtherStatefulConfiguration'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'OtherStatefulConfiguration'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.OtherStatefulConfiguration'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('WeakHostSend')) {\n            [object]$__cmdletization_value = ${WeakHostSend}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'WeakHostSend'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.WeakHostSend'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'WeakHostSend'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.WeakHostSend'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('WeakHostReceive')) {\n            [object]$__cmdletization_value = ${WeakHostReceive}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'WeakHostReceive'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.WeakHostReceive'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'WeakHostReceive'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.WeakHostReceive'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('IgnoreDefaultRoutes')) {\n            [object]$__cmdletization_value = ${IgnoreDefaultRoutes}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IgnoreDefaultRoutes'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.IgnoreDefaultRoutes'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IgnoreDefaultRoutes'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.IgnoreDefaultRoutes'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('AdvertisedRouterLifetime')) {\n            [object]$__cmdletization_value = ${AdvertisedRouterLifetime}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AdvertisedRouterLifetime'; ParameterType = 'System.TimeSpan'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AdvertisedRouterLifetime'; ParameterType = 'System.TimeSpan'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('AdvertiseDefaultRoute')) {\n            [object]$__cmdletization_value = ${AdvertiseDefaultRoute}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodPara"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4104,
      "details": "ll.Cmdletization.GeneratedTypes.NetIPInterface.NeighborUnreachabilityDetection]\n    ${NeighborUnreachabilityDetection},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('BaseReachableTime')]\n    [uint32]\n    ${BaseReachableTimeMs},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('RetransmitTime')]\n    [uint32]\n    ${RetransmitTimeMs},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [uint32]\n    ${DadTransmits},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('DadRetransmitTime')]\n    [uint32]\n    ${DadRetransmitTimeMs},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.RouterDiscovery]\n    ${RouterDiscovery},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.ManagedAddressConfiguration]\n    ${ManagedAddressConfiguration},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.OtherStatefulConfiguration]\n    ${OtherStatefulConfiguration},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.WeakHostSend]\n    ${WeakHostSend},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.WeakHostReceive]\n    ${WeakHostReceive},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.IgnoreDefaultRoutes]\n    ${IgnoreDefaultRoutes},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [timespan]\n    ${AdvertisedRouterLifetime},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.AdvertiseDefaultRoute]\n    ${AdvertiseDefaultRoute},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [uint32]\n    ${CurrentHopLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.ForceArpNdWolPattern]\n    ${ForceArpNdWolPattern},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.DirectedMacWolPattern]\n    ${DirectedMacWolPattern},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.EcnMarking]\n    ${EcnMarking},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.Dhcp]\n    ${Dhcp},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.AutomaticMetric]\n    ${AutomaticMetric},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${AsJob},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${PassThru})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('InterfaceIndex') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${InterfaceIndex})\n        $__cmdletization_queryBuilder.FilterByProperty('InterfaceIndex', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('InterfaceAlias') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${InterfaceAlias})\n        $__cmdletization_queryBuilder.FilterByProperty('InterfaceAlias', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AddressFamily') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${AddressFamily})\n        $__cmdletization_queryBuilder.FilterByProperty('AddressFamily', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('ReachableTime') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${ReachableTime})\n        $__cmdletization_queryBuilder.FilterByProperty('ReachableTime', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('NeighborDiscoverySupported') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${NeighborDiscoverySupported})\n        $__cmdletization_queryBuilder.FilterByProperty('NeighborDiscoverySupported', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('CompartmentId') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${CompartmentId})\n        $__cmdletization_queryBuilder.FilterByProperty('CompartmentId', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})\n    }\n    if ($PSBoundParameters.ContainsKey('IncludeAllCompartments') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('IncludeAllCompartments', ${IncludeAllCompartments})\n    }\n\n\n    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n    switch -exact ($PSCmdlet.ParameterSetName) { \n        { @('ByName', 'InputObject (cdxml)') -contains $_ } {\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('Forwarding')) {\n            [object]$__cmdletization_value = ${Forwarding}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Forwarding'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.Forwarding'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Forwarding'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.Forwarding'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('ClampMss')) {\n            [object]$__cmdletization_value = ${ClampMss}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ClampMss'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.ClampMss'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ClampMss'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.ClampMss'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('Advertising')) {\n            [object]$__cmdletization_value = ${Advertising}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Advertising'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.Advertising'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Advertising'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.Advertising'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('NlMtuBytes')) {\n            [object]$__cmdletization_value = ${NlMtuBytes}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NlMtu'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NlMtu'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('InterfaceMetric')) {\n            [object]$__cmdletization_value = ${InterfaceMetric}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InterfaceMetric'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4104,
      "details": "dletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('InterfaceMetric') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${InterfaceMetric})\n        $__cmdletization_queryBuilder.FilterByProperty('InterfaceMetric', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('NeighborUnreachabilityDetection') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${NeighborUnreachabilityDetection})\n        $__cmdletization_queryBuilder.FilterByProperty('NeighborUnreachabilityDetection', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('BaseReachableTimeMs') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${BaseReachableTimeMs})\n        $__cmdletization_queryBuilder.FilterByProperty('BaseReachableTime', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('ReachableTimeMs') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${ReachableTimeMs})\n        $__cmdletization_queryBuilder.FilterByProperty('ReachableTime', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('RetransmitTimeMs') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${RetransmitTimeMs})\n        $__cmdletization_queryBuilder.FilterByProperty('RetransmitTime', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DadTransmits') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DadTransmits})\n        $__cmdletization_queryBuilder.FilterByProperty('DadTransmits', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DadRetransmitTimeMs') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DadRetransmitTimeMs})\n        $__cmdletization_queryBuilder.FilterByProperty('DadRetransmitTime', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('RouterDiscovery') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${RouterDiscovery})\n        $__cmdletization_queryBuilder.FilterByProperty('RouterDiscovery', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('ManagedAddressConfiguration') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${ManagedAddressConfiguration})\n        $__cmdletization_queryBuilder.FilterByProperty('ManagedAddressConfiguration', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('OtherStatefulConfiguration') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${OtherStatefulConfiguration})\n        $__cmdletization_queryBuilder.FilterByProperty('OtherStatefulConfiguration', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('WeakHostSend') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${WeakHostSend})\n        $__cmdletization_queryBuilder.FilterByProperty('WeakHostSend', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('WeakHostReceive') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${WeakHostReceive})\n        $__cmdletization_queryBuilder.FilterByProperty('WeakHostReceive', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('IgnoreDefaultRoutes') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${IgnoreDefaultRoutes})\n        $__cmdletization_queryBuilder.FilterByProperty('IgnoreDefaultRoutes', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AdvertisedRouterLifetime') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${AdvertisedRouterLifetime})\n        $__cmdletization_queryBuilder.FilterByProperty('AdvertisedRouterLifetime', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AdvertiseDefaultRoute') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${AdvertiseDefaultRoute})\n        $__cmdletization_queryBuilder.FilterByProperty('AdvertiseDefaultRoute', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('CurrentHopLimit') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${CurrentHopLimit})\n        $__cmdletization_queryBuilder.FilterByProperty('CurrentHopLimit', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('ForceArpNdWolPattern') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${ForceArpNdWolPattern})\n        $__cmdletization_queryBuilder.FilterByProperty('ForceArpNdWolPattern', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DirectedMacWolPattern') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DirectedMacWolPattern})\n        $__cmdletization_queryBuilder.FilterByProperty('DirectedMacWolPattern', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('EcnMarking') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${EcnMarking})\n        $__cmdletization_queryBuilder.FilterByProperty('EcnMarking', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Dhcp') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Dhcp})\n        $__cmdletization_queryBuilder.FilterByProperty('Dhcp', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('ConnectionState') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${ConnectionState})\n        $__cmdletization_queryBuilder.FilterByProperty('ConnectionState', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AutomaticMetric') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${AutomaticMetric})\n        $__cmdletization_queryBuilder.FilterByProperty('AutomaticMetric', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('NeighborDiscoverySupported') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${NeighborDiscoverySupported})\n        $__cmdletization_queryBuilder.FilterByProperty('NeighborDiscoverySupported', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('CompartmentId') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${CompartmentId})\n        $__cmdletization_queryBuilder.FilterByProperty('CompartmentId', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedRoute') -and (@('ByRoute') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedRoute}, 'MSFT_NetIPInterfaceRoute', 'Dependent', 'Antecedent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedIPAddress') -and (@('ByIPAddress') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedIPAddress}, 'MSFT_NetIPInterfaceIPAddress', 'Dependent', 'Antecedent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNeighbor') -and (@('ByNeighbor') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNeighbor}, 'MSFT_NetIPInterfaceNeighbor', 'Dependent', 'Antecedent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedAdapter') -and (@('ByAdapter') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedAdapter}, 'MSFT_NetIPInterfaceAdapter', 'Dependent', 'Antecedent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})\n    }\n    if ($PSBoundParameters.ContainsKey('IncludeAllCompartments') -and (@('ByName', 'ByRoute', 'ByIPAddress', 'ByNeighbor', 'ByAdapter') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('IncludeAllCompartments', ${IncludeAllCompartments})\n    }\n\n\n    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP MSFT_NetIPInterface.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Get-NetIPInterface' -Alias '*'\n        \n\nfunction Set-NetIPInterface\n{\n    [CmdletBinding(DefaultParameterSetName='ByName', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/StandardCimv2/MSFT_NetIPInterface')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByName', ValueFromPipelineByPropertyName=$true)]\n    [Alias('ifIndex')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${InterfaceIndex},\n\n    [Parameter(ParameterSetName='ByName', Position=0, ValueFromPipelineByPropertyName=$true)]\n    [Alias('ifAlias')]\n    [ValidateNotNull()]\n    [string[]]\n    ${InterfaceAlias},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.AddressFamily[]]\n    ${AddressFamily},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${ReachableTime},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.NeighborDiscoverySupported[]]\n    ${NeighborDiscoverySupported},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${CompartmentId},\n\n    [Parameter(ParameterSetName='ByName')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='ByName')]\n    [switch]\n    ${IncludeAllCompartments},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetIPInterface')]\n    [ValidateNotNull()]\n    [ciminstance[]]\n    ${InputObject},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.Forwarding]\n    ${Forwarding},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.ClampMss]\n    ${ClampMss},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.Advertising]\n    ${Advertising},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [uint32]\n    ${NlMtuBytes},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [uint32]\n    ${InterfaceMetric},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShe"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4104,
      "details": "#requires -version 3.0\n\ntry { Microsoft.PowerShell.Core\\Set-StrictMode -Off } catch { }\n\n$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module\n\n$script:ClassName = 'ROOT/StandardCimv2/MSFT_NetIPInterface'\n$script:ClassVersion = '1.0.0'\n$script:ModuleVersion = '1.0.0'\n$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]\n\n$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()\n\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function @()\n        \n\nfunction __cmdletization_BindCommonParameters\n{\n    param(\n        $__cmdletization_objectModelWrapper,\n        $myPSBoundParameters\n    )       \n                \n\n        if ($myPSBoundParameters.ContainsKey('CimSession')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('AsJob')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] \n        }\n                    \n\n}\n                \n\nfunction Get-NetIPInterface\n{\n    [CmdletBinding(DefaultParameterSetName='ByName', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/StandardCimv2/MSFT_NetIPInterface')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByName', ValueFromPipelineByPropertyName=$true)]\n    [Alias('ifIndex')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${InterfaceIndex},\n\n    [Parameter(ParameterSetName='ByName', Position=0, ValueFromPipelineByPropertyName=$true)]\n    [Alias('ifAlias')]\n    [ValidateNotNull()]\n    [string[]]\n    ${InterfaceAlias},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.AddressFamily[]]\n    ${AddressFamily},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.Forwarding[]]\n    ${Forwarding},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.ClampMss[]]\n    ${ClampMss},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.Advertising[]]\n    ${Advertising},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${NlMtuBytes},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${InterfaceMetric},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.NeighborUnreachabilityDetection[]]\n    ${NeighborUnreachabilityDetection},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Alias('BaseReachableTime')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${BaseReachableTimeMs},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Alias('ReachableTime')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${ReachableTimeMs},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Alias('RetransmitTime')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${RetransmitTimeMs},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${DadTransmits},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Alias('DadRetransmitTime')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${DadRetransmitTimeMs},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.RouterDiscovery[]]\n    ${RouterDiscovery},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.ManagedAddressConfiguration[]]\n    ${ManagedAddressConfiguration},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.OtherStatefulConfiguration[]]\n    ${OtherStatefulConfiguration},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.WeakHostSend[]]\n    ${WeakHostSend},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.WeakHostReceive[]]\n    ${WeakHostReceive},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.IgnoreDefaultRoutes[]]\n    ${IgnoreDefaultRoutes},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [timespan[]]\n    ${AdvertisedRouterLifetime},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.AdvertiseDefaultRoute[]]\n    ${AdvertiseDefaultRoute},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${CurrentHopLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.ForceArpNdWolPattern[]]\n    ${ForceArpNdWolPattern},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.DirectedMacWolPattern[]]\n    ${DirectedMacWolPattern},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.EcnMarking[]]\n    ${EcnMarking},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.Dhcp[]]\n    ${Dhcp},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.ConnectionState[]]\n    ${ConnectionState},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.AutomaticMetric[]]\n    ${AutomaticMetric},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.NeighborDiscoverySupported[]]\n    ${NeighborDiscoverySupported},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${CompartmentId},\n\n    [Parameter(ParameterSetName='ByRoute', ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetRoute')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedRoute},\n\n    [Parameter(ParameterSetName='ByIPAddress', ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIPAddress')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedIPAddress},\n\n    [Parameter(ParameterSetName='ByNeighbor', ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetNeighbor')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNeighbor},\n\n    [Parameter(ParameterSetName='ByAdapter', ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetAdapter')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedAdapter},\n\n    [Parameter(ParameterSetName='ByName')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByRoute')]\n    [Parameter(ParameterSetName='ByIPAddress')]\n    [Parameter(ParameterSetName='ByNeighbor')]\n    [Parameter(ParameterSetName='ByAdapter')]\n    [switch]\n    ${IncludeAllCompartments},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByRoute')]\n    [Parameter(ParameterSetName='ByIPAddress')]\n    [Parameter(ParameterSetName='ByNeighbor')]\n    [Parameter(ParameterSetName='ByAdapter')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByRoute')]\n    [Parameter(ParameterSetName='ByIPAddress')]\n    [Parameter(ParameterSetName='ByNeighbor')]\n    [Parameter(ParameterSetName='ByAdapter')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByRoute')]\n    [Parameter(ParameterSetName='ByIPAddress')]\n    [Parameter(ParameterSetName='ByNeighbor')]\n    [Parameter(ParameterSetName='ByAdapter')]\n    [switch]\n    ${AsJob})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('InterfaceIndex') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${InterfaceIndex})\n        $__cmdletization_queryBuilder.FilterByProperty('InterfaceIndex', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('InterfaceAlias') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${InterfaceAlias})\n        $__cmdletization_queryBuilder.FilterByProperty('InterfaceAlias', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AddressFamily') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${AddressFamily})\n        $__cmdletization_queryBuilder.FilterByProperty('AddressFamily', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Forwarding') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Forwarding})\n        $__cmdletization_queryBuilder.FilterByProperty('Forwarding', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('ClampMss') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${ClampMss})\n        $__cmdletization_queryBuilder.FilterByProperty('ClampMss', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Advertising') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Advertising})\n        $__cmdletization_queryBuilder.FilterByProperty('Advertising', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('NlMtuBytes') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${NlMtuBytes})\n        $__cmdletization_queryBuilder.FilterByProperty('NlMtu', $__cm"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-NetRoute"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-NetRoute"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-NetRoute"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-NetRoute"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-NetRoute"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-NetRoute"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4104,
      "details": "ess')]\n    [ValidateNotNull()]\n    [ciminstance[]]\n    ${InputObject},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${AsJob},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${PassThru})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('IPAddress') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${IPAddress})\n        $__cmdletization_queryBuilder.FilterByProperty('IPAddress', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('InterfaceIndex') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${InterfaceIndex})\n        $__cmdletization_queryBuilder.FilterByProperty('InterfaceIndex', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('InterfaceAlias') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${InterfaceAlias})\n        $__cmdletization_queryBuilder.FilterByProperty('InterfaceAlias', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AddressFamily') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${AddressFamily})\n        $__cmdletization_queryBuilder.FilterByProperty('AddressFamily', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Type') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Type})\n        $__cmdletization_queryBuilder.FilterByProperty('Type', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PrefixLength') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PrefixLength})\n        $__cmdletization_queryBuilder.FilterByProperty('PrefixLength', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PrefixOrigin') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PrefixOrigin})\n        $__cmdletization_queryBuilder.FilterByProperty('PrefixOrigin', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('SuffixOrigin') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${SuffixOrigin})\n        $__cmdletization_queryBuilder.FilterByProperty('SuffixOrigin', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AddressState') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${AddressState})\n        $__cmdletization_queryBuilder.FilterByProperty('AddressState', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('ValidLifetime') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${ValidLifetime})\n        $__cmdletization_queryBuilder.FilterByProperty('ValidLifetime', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PreferredLifetime') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PreferredLifetime})\n        $__cmdletization_queryBuilder.FilterByProperty('PreferredLifetime', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('SkipAsSource') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${SkipAsSource})\n        $__cmdletization_queryBuilder.FilterByProperty('SkipAsSource', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})\n    }\n    if ($PSBoundParameters.ContainsKey('DefaultGateway') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('DefaultGateway', ${DefaultGateway})\n    }\n    if ($PSBoundParameters.ContainsKey('IncludeAllCompartments') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('IncludeAllCompartments', ${IncludeAllCompartments})\n    }\n\n\n    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n    switch -exact ($PSCmdlet.ParameterSetName) { \n        { @('Query (cdxml)', 'InputObject (cdxml)') -contains $_ } {\n      $__cmdletization_returnValue = $null\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:DeleteInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru\n            if ($PSBoundParameters.ContainsKey('InputObject')) {\n                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }\n            } else {\n                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)\n            }\n        }\n    }\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP MSFT_NetIPAddress.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Remove-NetIPAddress' -Alias '*'"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4104,
      "details": "(@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedIPInterface}, 'MSFT_NetIPInterfaceIPAddress', 'Antecedent', 'Dependent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})\n    }\n    if ($PSBoundParameters.ContainsKey('IncludeAllCompartments') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('IncludeAllCompartments', ${IncludeAllCompartments})\n    }\n\n\n    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP MSFT_NetIPAddress.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Get-NetIPAddress' -Alias '*'\n        \n\nfunction Set-NetIPAddress\n{\n    [CmdletBinding(DefaultParameterSetName='Query (cdxml)', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/StandardCimv2/MSFT_NetIPAddress')]\n\n    param(\n    \n    [Parameter(ParameterSetName='Query (cdxml)', Position=0, ValueFromPipelineByPropertyName=$true)]\n    [Alias('LocalAddress')]\n    [ValidateNotNull()]\n    [string[]]\n    ${IPAddress},\n\n    [Parameter(ParameterSetName='Query (cdxml)', ValueFromPipelineByPropertyName=$true)]\n    [Alias('ifIndex')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${InterfaceIndex},\n\n    [Parameter(ParameterSetName='Query (cdxml)', ValueFromPipelineByPropertyName=$true)]\n    [Alias('ifAlias')]\n    [ValidateNotNull()]\n    [string[]]\n    ${InterfaceAlias},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPAddress.AddressFamily[]]\n    ${AddressFamily},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPAddress.Type[]]\n    ${Type},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPAddress.PrefixOrigin[]]\n    ${PrefixOrigin},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPAddress.SuffixOrigin[]]\n    ${SuffixOrigin},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPAddress.AddressState[]]\n    ${AddressState},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [switch]\n    ${IncludeAllCompartments},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetIPAddress')]\n    [ValidateNotNull()]\n    [ciminstance[]]\n    ${InputObject},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [byte]\n    ${PrefixLength},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [timespan]\n    ${ValidLifetime},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [timespan]\n    ${PreferredLifetime},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [bool]\n    ${SkipAsSource},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${AsJob},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${PassThru})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('IPAddress') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${IPAddress})\n        $__cmdletization_queryBuilder.FilterByProperty('IPAddress', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('InterfaceIndex') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${InterfaceIndex})\n        $__cmdletization_queryBuilder.FilterByProperty('InterfaceIndex', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('InterfaceAlias') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${InterfaceAlias})\n        $__cmdletization_queryBuilder.FilterByProperty('InterfaceAlias', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AddressFamily') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${AddressFamily})\n        $__cmdletization_queryBuilder.FilterByProperty('AddressFamily', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Type') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Type})\n        $__cmdletization_queryBuilder.FilterByProperty('Type', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PrefixOrigin') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PrefixOrigin})\n        $__cmdletization_queryBuilder.FilterByProperty('PrefixOrigin', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('SuffixOrigin') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${SuffixOrigin})\n        $__cmdletization_queryBuilder.FilterByProperty('SuffixOrigin', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AddressState') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${AddressState})\n        $__cmdletization_queryBuilder.FilterByProperty('AddressState', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})\n    }\n    if ($PSBoundParameters.ContainsKey('IncludeAllCompartments') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('IncludeAllCompartments', ${IncludeAllCompartments})\n    }\n\n\n    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n    switch -exact ($PSCmdlet.ParameterSetName) { \n        { @('Query (cdxml)', 'InputObject (cdxml)') -contains $_ } {\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('PrefixLength')) {\n            [object]$__cmdletization_value = ${PrefixLength}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PrefixLength'; ParameterType = 'System.Byte'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PrefixLength'; ParameterType = 'System.Byte'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('ValidLifetime')) {\n            [object]$__cmdletization_value = ${ValidLifetime}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ValidLifetime'; ParameterType = 'System.TimeSpan'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ValidLifetime'; ParameterType = 'System.TimeSpan'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('PreferredLifetime')) {\n            [object]$__cmdletization_value = ${PreferredLifetime}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PreferredLifetime'; ParameterType = 'System.TimeSpan'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PreferredLifetime'; ParameterType = 'System.TimeSpan'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('SkipAsSource')) {\n            [object]$__cmdletization_value = ${SkipAsSource}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SkipAsSource'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SkipAsSource'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n      $__cmdletization_returnValue = $null\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:ModifyInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru\n            if ($PSBoundParameters.ContainsKey('InputObject')) {\n                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }\n            } else {\n                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)\n            }\n        }\n    }\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP MSFT_NetIPAddress.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Set-NetIPAddress' -Alias '*'\n        \n\nfunction Remove-NetIPAddress\n{\n    [CmdletBinding(DefaultParameterSetName='Query (cdxml)', SupportsShouldProcess=$true, ConfirmImpact='High', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/StandardCimv2/MSFT_NetIPAddress')]\n\n    param(\n    \n    [Parameter(ParameterSetName='Query (cdxml)', Position=0, ValueFromPipelineByPropertyName=$true)]\n    [Alias('LocalAddress')]\n    [ValidateNotNull()]\n    [string[]]\n    ${IPAddress},\n\n    [Parameter(ParameterSetName='Query (cdxml)', ValueFromPipelineByPropertyName=$true)]\n    [Alias('ifIndex')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${InterfaceIndex},\n\n    [Parameter(ParameterSetName='Query (cdxml)', ValueFromPipelineByPropertyName=$true)]\n    [Alias('ifAlias')]\n    [ValidateNotNull()]\n    [string[]]\n    ${InterfaceAlias},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPAddress.AddressFamily[]]\n    ${AddressFamily},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPAddress.Type[]]\n    ${Type},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [ValidateNotNull()]\n    [byte[]]\n    ${PrefixLength},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPAddress.PrefixOrigin[]]\n    ${PrefixOrigin},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPAddress.SuffixOrigin[]]\n    ${SuffixOrigin},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPAddress.AddressState[]]\n    ${AddressState},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [ValidateNotNull()]\n    [timespan[]]\n    ${ValidLifetime},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [ValidateNotNull()]\n    [timespan[]]\n    ${PreferredLifetime},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [ValidateNotNull()]\n    [bool[]]\n    ${SkipAsSource},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [string]\n    ${DefaultGateway},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [switch]\n    ${IncludeAllCompartments},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetIPAddr"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4104,
      "details": "eIndex'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('DefaultGateway')) {\n          [object]$__cmdletization_value = ${DefaultGateway}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DefaultGateway'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DefaultGateway'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('AddressFamily')) {\n          [object]$__cmdletization_value = ${AddressFamily}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AddressFamily'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPAddress.AddressFamily'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AddressFamily'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPAddress.AddressFamily'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('Type')) {\n          [object]$__cmdletization_value = ${Type}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Type'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPAddress.Type'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Type'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPAddress.Type'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('PrefixLength')) {\n          [object]$__cmdletization_value = ${PrefixLength}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PrefixLength'; ParameterType = 'System.Byte'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PrefixLength'; ParameterType = 'System.Byte'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('ValidLifetime')) {\n          [object]$__cmdletization_value = ${ValidLifetime}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ValidLifetime'; ParameterType = 'System.TimeSpan'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ValidLifetime'; ParameterType = 'System.TimeSpan'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('PreferredLifetime')) {\n          [object]$__cmdletization_value = ${PreferredLifetime}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PreferredLifetime'; ParameterType = 'System.TimeSpan'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PreferredLifetime'; ParameterType = 'System.TimeSpan'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('SkipAsSource')) {\n          [object]$__cmdletization_value = ${SkipAsSource}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SkipAsSource'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SkipAsSource'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('PolicyStore')) {\n          [object]$__cmdletization_value = ${PolicyStore}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'CmdletOutput'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'Out'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.UInt32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Create', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo)\n        }\n    }\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP MSFT_NetIPAddress.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'New-NetIPAddress' -Alias '*'\n        \n\nfunction Get-NetIPAddress\n{\n    [CmdletBinding(DefaultParameterSetName='Query (cdxml)', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/StandardCimv2/MSFT_NetIPAddress')]\n\n    param(\n    \n    [Parameter(ParameterSetName='Query (cdxml)', Position=0, ValueFromPipelineByPropertyName=$true)]\n    [Alias('LocalAddress')]\n    [ValidateNotNull()]\n    [string[]]\n    ${IPAddress},\n\n    [Parameter(ParameterSetName='Query (cdxml)', ValueFromPipelineByPropertyName=$true)]\n    [Alias('ifIndex')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${InterfaceIndex},\n\n    [Parameter(ParameterSetName='Query (cdxml)', ValueFromPipelineByPropertyName=$true)]\n    [Alias('ifAlias')]\n    [ValidateNotNull()]\n    [string[]]\n    ${InterfaceAlias},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPAddress.AddressFamily[]]\n    ${AddressFamily},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPAddress.Type[]]\n    ${Type},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [ValidateNotNull()]\n    [byte[]]\n    ${PrefixLength},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPAddress.PrefixOrigin[]]\n    ${PrefixOrigin},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPAddress.SuffixOrigin[]]\n    ${SuffixOrigin},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPAddress.AddressState[]]\n    ${AddressState},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [ValidateNotNull()]\n    [timespan[]]\n    ${ValidLifetime},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [ValidateNotNull()]\n    [timespan[]]\n    ${PreferredLifetime},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [ValidateNotNull()]\n    [bool[]]\n    ${SkipAsSource},\n\n    [Parameter(ParameterSetName='Query (cdxml)', ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIPInterface')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedIPInterface},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [switch]\n    ${IncludeAllCompartments},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [switch]\n    ${AsJob})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('IPAddress') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${IPAddress})\n        $__cmdletization_queryBuilder.FilterByProperty('IPAddress', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('InterfaceIndex') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${InterfaceIndex})\n        $__cmdletization_queryBuilder.FilterByProperty('InterfaceIndex', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('InterfaceAlias') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${InterfaceAlias})\n        $__cmdletization_queryBuilder.FilterByProperty('InterfaceAlias', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AddressFamily') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${AddressFamily})\n        $__cmdletization_queryBuilder.FilterByProperty('AddressFamily', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Type') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Type})\n        $__cmdletization_queryBuilder.FilterByProperty('Type', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PrefixLength') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PrefixLength})\n        $__cmdletization_queryBuilder.FilterByProperty('PrefixLength', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PrefixOrigin') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PrefixOrigin})\n        $__cmdletization_queryBuilder.FilterByProperty('PrefixOrigin', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('SuffixOrigin') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${SuffixOrigin})\n        $__cmdletization_queryBuilder.FilterByProperty('SuffixOrigin', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AddressState') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${AddressState})\n        $__cmdletization_queryBuilder.FilterByProperty('AddressState', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('ValidLifetime') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${ValidLifetime})\n        $__cmdletization_queryBuilder.FilterByProperty('ValidLifetime', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PreferredLifetime') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PreferredLifetime})\n        $__cmdletization_queryBuilder.FilterByProperty('PreferredLifetime', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('SkipAsSource') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${SkipAsSource})\n        $__cmdletization_queryBuilder.FilterByProperty('SkipAsSource', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedIPInterface') -and"
    }
  ],
  "PS-024": [
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4104,
      "details": "$global:?"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-NetNeighbor"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-NetNeighbor"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4104,
      "details": "function __cmdletization_BindCommonParameters\n{\n    param(\n        $__cmdletization_objectModelWrapper,\n        $myPSBoundParameters\n    )       \n                \n\n        if ($myPSBoundParameters.ContainsKey('CimSession')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('AsJob')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] \n        }\n                    \n\n}"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-NetNeighbor"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-NetNeighbor"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-NetNeighbor"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-NetNeighbor"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-NetNeighbor"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-NetNeighbor"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-NetNeighbor"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-NetNeighbor"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4104,
      "details": "#requires -version 3.0\n\ntry { Microsoft.PowerShell.Core\\Set-StrictMode -Off } catch { }\n\n$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module\n\n$script:ClassName = 'ROOT/StandardCimv2/MSFT_NetUDPSetting'\n$script:ClassVersion = '1.0.0'\n$script:ModuleVersion = '1.0.0'\n$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]\n\n$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()\n\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function @()\n        \n\nfunction __cmdletization_BindCommonParameters\n{\n    param(\n        $__cmdletization_objectModelWrapper,\n        $myPSBoundParameters\n    )       \n                \n\n        if ($myPSBoundParameters.ContainsKey('CimSession')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('AsJob')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] \n        }\n                    \n\n}\n                \n\nfunction Get-NetUDPSetting\n{\n    [CmdletBinding(DefaultParameterSetName='ByName', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/StandardCimv2/MSFT_NetUDPSetting')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByName', Position=0)]\n    [ValidateNotNull()]\n    [uint16[]]\n    ${DynamicPortRangeStartPort},\n\n    [Parameter(ParameterSetName='ByName', Position=1)]\n    [ValidateNotNull()]\n    [uint16[]]\n    ${DynamicPortRangeNumberOfPorts},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [switch]\n    ${AsJob})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('DynamicPortRangeStartPort') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DynamicPortRangeStartPort})\n        $__cmdletization_queryBuilder.FilterByProperty('DynamicPortRangeStartPort', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DynamicPortRangeNumberOfPorts') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DynamicPortRangeNumberOfPorts})\n        $__cmdletization_queryBuilder.FilterByProperty('DynamicPortRangeNumberOfPorts', $__cmdletization_values, $false, 'Default')\n    }\n\n\n    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP MSFT_NetUDPSetting.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Get-NetUDPSetting' -Alias '*'\n        \n\nfunction Set-NetUDPSetting\n{\n    [CmdletBinding(DefaultParameterSetName='InputObject (cdxml)', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/StandardCimv2/MSFT_NetUDPSetting')]\n\n    param(\n    \n    [Parameter(ParameterSetName='InputObject (cdxml)', ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetUDPSetting')]\n    [ValidateNotNull()]\n    [ciminstance[]]\n    ${InputObject},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [uint16]\n    ${DynamicPortRangeStartPort},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [uint16]\n    ${DynamicPortRangeNumberOfPorts},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${AsJob},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${PassThru})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n\n\n    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n    switch -exact ($PSCmdlet.ParameterSetName) { \n        { @('InputObject (cdxml)') -contains $_ } {\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('DynamicPortRangeStartPort')) {\n            [object]$__cmdletization_value = ${DynamicPortRangeStartPort}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DynamicPortRangeStartPort'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DynamicPortRangeStartPort'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('DynamicPortRangeNumberOfPorts')) {\n            [object]$__cmdletization_value = ${DynamicPortRangeNumberOfPorts}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DynamicPortRangeNumberOfPorts'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DynamicPortRangeNumberOfPorts'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n      $__cmdletization_returnValue = $null\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:ModifyInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru\n            if ($PSBoundParameters.ContainsKey('InputObject')) {\n                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }\n            } else {\n                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)\n            }\n        }\n    }\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP MSFT_NetUDPSetting.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Set-NetUDPSetting' -Alias '*'"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-NetNeighbor"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-NetNeighbor"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-NetNeighbor"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4104,
      "details": "#requires -version 3.0\n\ntry { Microsoft.PowerShell.Core\\Set-StrictMode -Off } catch { }\n\n$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module\n\n$script:ClassName = 'ROOT/StandardCimv2/MSFT_NetUDPEndpoint'\n$script:ClassVersion = '1.0.0'\n$script:ModuleVersion = '1.0.0'\n$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]\n\n$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()\n\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function @()\n        \n\nfunction __cmdletization_BindCommonParameters\n{\n    param(\n        $__cmdletization_objectModelWrapper,\n        $myPSBoundParameters\n    )       \n                \n\n        if ($myPSBoundParameters.ContainsKey('CimSession')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('AsJob')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] \n        }\n                    \n\n}\n                \n\nfunction Get-NetUDPEndpoint\n{\n    [CmdletBinding(DefaultParameterSetName='ByName', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/StandardCimv2/MSFT_NetUDPEndpoint')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByName', Position=0, ValueFromPipelineByPropertyName=$true)]\n    [Alias('IPAddress')]\n    [ValidateNotNull()]\n    [string[]]\n    ${LocalAddress},\n\n    [Parameter(ParameterSetName='ByName', Position=1)]\n    [ValidateNotNull()]\n    [uint16[]]\n    ${LocalPort},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${OwningProcess},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [datetime[]]\n    ${CreationTime},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [switch]\n    ${AsJob})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('LocalAddress') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${LocalAddress})\n        $__cmdletization_queryBuilder.FilterByProperty('LocalAddress', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('LocalPort') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${LocalPort})\n        $__cmdletization_queryBuilder.FilterByProperty('LocalPort', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('OwningProcess') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${OwningProcess})\n        $__cmdletization_queryBuilder.FilterByProperty('OwningProcess', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('CreationTime') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${CreationTime})\n        $__cmdletization_queryBuilder.FilterByProperty('CreationTime', $__cmdletization_values, $false, 'Default')\n    }\n\n\n    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP MSFT_NetUDPEndpoint.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Get-NetUDPEndpoint' -Alias '*'"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-NetNeighbor"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-NetNeighbor"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-NetNeighbor"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-NetNeighbor"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-NetNeighbor"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4104,
      "details": "[int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${AsJob},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${PassThru})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('SettingName') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${SettingName})\n        $__cmdletization_queryBuilder.FilterByProperty('SettingName', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Protocol') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Protocol})\n        $__cmdletization_queryBuilder.FilterByProperty('Protocol', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('LocalPortStart') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${LocalPortStart})\n        $__cmdletization_queryBuilder.FilterByProperty('LocalPortStart', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('LocalPortEnd') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${LocalPortEnd})\n        $__cmdletization_queryBuilder.FilterByProperty('LocalPortEnd', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('RemotePortStart') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${RemotePortStart})\n        $__cmdletization_queryBuilder.FilterByProperty('RemotePortStart', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('RemotePortEnd') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${RemotePortEnd})\n        $__cmdletization_queryBuilder.FilterByProperty('RemotePortEnd', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DestinationPrefix') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DestinationPrefix})\n        $__cmdletization_queryBuilder.FilterByProperty('DestinationPrefix', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedTCPSetting') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedTCPSetting}, 'MSFT_NetTransportFilterTCPSetting', 'Dependent', 'Antecedent', 'Default')\n    }\n\n\n    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n    switch -exact ($PSCmdlet.ParameterSetName) { \n        { @('ByName', 'InputObject (cdxml)') -contains $_ } {\n      $__cmdletization_returnValue = $null\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:DeleteInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru\n            if ($PSBoundParameters.ContainsKey('InputObject')) {\n                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }\n            } else {\n                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)\n            }\n        }\n    }\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP MSFT_NetTransportFilter.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Remove-NetTransportFilter' -Alias '*'"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4104,
      "details": "#requires -version 3.0\n\ntry { Microsoft.PowerShell.Core\\Set-StrictMode -Off } catch { }\n\n$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module\n\n$script:ClassName = 'ROOT/StandardCimv2/MSFT_NetTransportFilter'\n$script:ClassVersion = '1.0.0'\n$script:ModuleVersion = '1.0.0'\n$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]\n\n$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()\n\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function @()\n        \n\nfunction __cmdletization_BindCommonParameters\n{\n    param(\n        $__cmdletization_objectModelWrapper,\n        $myPSBoundParameters\n    )       \n                \n\n        if ($myPSBoundParameters.ContainsKey('CimSession')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('AsJob')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] \n        }\n                    \n\n}\n                \n\nfunction New-NetTransportFilter\n{\n    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]\n    \n    \n    param(\n    \n    [Parameter(ParameterSetName='cim:CreateInstance0', Mandatory=$true)]\n    [string]\n    ${SettingName},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTransportFilter.Protocol]\n    ${Protocol},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [uint16]\n    ${LocalPortStart},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [uint16]\n    ${LocalPortEnd},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [uint16]\n    ${RemotePortStart},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [uint16]\n    ${RemotePortEnd},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [string]\n    ${DestinationPrefix},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [switch]\n    ${AsJob})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n      $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('SettingName')) {\n          [object]$__cmdletization_value = ${SettingName}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SettingName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SettingName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('Protocol')) {\n          [object]$__cmdletization_value = ${Protocol}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Protocol'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTransportFilter.Protocol'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Protocol'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTransportFilter.Protocol'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('LocalPortStart')) {\n          [object]$__cmdletization_value = ${LocalPortStart}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LocalPortStart'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LocalPortStart'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('LocalPortEnd')) {\n          [object]$__cmdletization_value = ${LocalPortEnd}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LocalPortEnd'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LocalPortEnd'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('RemotePortStart')) {\n          [object]$__cmdletization_value = ${RemotePortStart}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemotePortStart'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemotePortStart'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('RemotePortEnd')) {\n          [object]$__cmdletization_value = ${RemotePortEnd}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemotePortEnd'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemotePortEnd'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('DestinationPrefix')) {\n          [object]$__cmdletization_value = ${DestinationPrefix}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DestinationPrefix'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DestinationPrefix'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:CreateInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo)\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP MSFT_NetTransportFilter.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'New-NetTransportFilter' -Alias '*'\n        \n\nfunction Get-NetTransportFilter\n{\n    [CmdletBinding(PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/StandardCimv2/MSFT_NetTransportFilter')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [string[]]\n    ${SettingName},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTransportFilter.Protocol[]]\n    ${Protocol},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [uint16[]]\n    ${LocalPortStart},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [uint16[]]\n    ${LocalPortEnd},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [uint16[]]\n    ${RemotePortStart},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [uint16[]]\n    ${RemotePortEnd},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [string[]]\n    ${DestinationPrefix},\n\n    [Parameter(ParameterSetName='ByName', ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetTCPSetting')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedTCPSetting},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [switch]\n    ${AsJob})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('SettingName') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${SettingName})\n        $__cmdletization_queryBuilder.FilterByProperty('SettingName', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Protocol') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Protocol})\n        $__cmdletization_queryBuilder.FilterByProperty('Protocol', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('LocalPortStart') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${LocalPortStart})\n        $__cmdletization_queryBuilder.FilterByProperty('LocalPortStart', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('LocalPortEnd') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${LocalPortEnd})\n        $__cmdletization_queryBuilder.FilterByProperty('LocalPortEnd', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('RemotePortStart') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${RemotePortStart})\n        $__cmdletization_queryBuilder.FilterByProperty('RemotePortStart', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('RemotePortEnd') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${RemotePortEnd})\n        $__cmdletization_queryBuilder.FilterByProperty('RemotePortEnd', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DestinationPrefix') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DestinationPrefix})\n        $__cmdletization_queryBuilder.FilterByProperty('DestinationPrefix', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedTCPSetting') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedTCPSetting}, 'MSFT_NetTransportFilterTCPSetting', 'Dependent', 'Antecedent', 'Default')\n    }\n\n\n    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP MSFT_NetTransportFilter.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Get-NetTransportFilter' -Alias '*'\n        \n\nfunction Remove-NetTransportFilter\n{\n    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='High', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/StandardCimv2/MSFT_NetTransportFilter')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [string[]]\n    ${SettingName},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTransportFilter.Protocol[]]\n    ${Protocol},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [uint16[]]\n    ${LocalPortStart},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [uint16[]]\n    ${LocalPortEnd},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [uint16[]]\n    ${RemotePortStart},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [uint16[]]\n    ${RemotePortEnd},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [string[]]\n    ${DestinationPrefix},\n\n    [Parameter(ParameterSetName='ByName', ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetTCPSetting')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedTCPSetting},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetTransportFilter')]\n    [ValidateNotNull()]\n    [ciminstance[]]\n    ${InputObject},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-NetNeighbor"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-NetNeighbor"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-NetNeighbor"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-NetNeighbor"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4104,
      "details": "istics}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScalingHeuristics'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.ScalingHeuristics'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScalingHeuristics'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.ScalingHeuristics'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('DynamicPortRangeStartPort')) {\n            [object]$__cmdletization_value = ${DynamicPortRangeStartPort}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DynamicPortRangeStartPort'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DynamicPortRangeStartPort'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('DynamicPortRangeNumberOfPorts')) {\n            [object]$__cmdletization_value = ${DynamicPortRangeNumberOfPorts}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DynamicPortRangeNumberOfPorts'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DynamicPortRangeNumberOfPorts'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('AutomaticUseCustom')) {\n            [object]$__cmdletization_value = ${AutomaticUseCustom}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AutomaticUseCustom'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.AutomaticUseCustom'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AutomaticUseCustom'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.AutomaticUseCustom'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('NonSackRttResiliency')) {\n            [object]$__cmdletization_value = ${NonSackRttResiliency}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NonSackRttResiliency'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.NonSackRttResiliency'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NonSackRttResiliency'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.NonSackRttResiliency'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('ForceWS')) {\n            [object]$__cmdletization_value = ${ForceWS}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ForceWS'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.ForceWS'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ForceWS'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.ForceWS'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('MaxSynRetransmissions')) {\n            [object]$__cmdletization_value = ${MaxSynRetransmissions}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MaxSynRetransmissions'; ParameterType = 'System.Byte'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MaxSynRetransmissions'; ParameterType = 'System.Byte'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('AutoReusePortRangeStartPort')) {\n            [object]$__cmdletization_value = ${AutoReusePortRangeStartPort}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AutoReusePortRangeStartPort'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AutoReusePortRangeStartPort'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('AutoReusePortRangeNumberOfPorts')) {\n            [object]$__cmdletization_value = ${AutoReusePortRangeNumberOfPorts}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AutoReusePortRangeNumberOfPorts'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AutoReusePortRangeNumberOfPorts'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n      $__cmdletization_returnValue = $null\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:ModifyInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru\n            if ($PSBoundParameters.ContainsKey('InputObject')) {\n                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }\n            } else {\n                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)\n            }\n        }\n    }\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP MSFT_NetTCPSetting.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Set-NetTCPSetting' -Alias '*'"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4104,
      "details": "etization_queryBuilder.FilterByProperty('SettingName', $__cmdletization_values, $true, 'Default')\n    }\n\n\n    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n    switch -exact ($PSCmdlet.ParameterSetName) { \n        { @('ByName', 'InputObject (cdxml)') -contains $_ } {\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('MinRtoMs')) {\n            [object]$__cmdletization_value = ${MinRtoMs}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MinRto'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MinRto'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('InitialCongestionWindowMss')) {\n            [object]$__cmdletization_value = ${InitialCongestionWindowMss}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InitialCongestionWindow'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InitialCongestionWindow'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('CongestionProvider')) {\n            [object]$__cmdletization_value = ${CongestionProvider}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'CongestionProvider'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.CongestionProvider'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'CongestionProvider'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.CongestionProvider'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('CwndRestart')) {\n            [object]$__cmdletization_value = ${CwndRestart}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'CwndRestart'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.CwndRestart'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'CwndRestart'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.CwndRestart'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('DelayedAckTimeoutMs')) {\n            [object]$__cmdletization_value = ${DelayedAckTimeoutMs}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DelayedAckTimeout'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DelayedAckTimeout'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('DelayedAckFrequency')) {\n            [object]$__cmdletization_value = ${DelayedAckFrequency}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DelayedAckFrequency'; ParameterType = 'System.Byte'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DelayedAckFrequency'; ParameterType = 'System.Byte'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('MemoryPressureProtection')) {\n            [object]$__cmdletization_value = ${MemoryPressureProtection}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MemoryPressureProtection'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.MemoryPressureProtection'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MemoryPressureProtection'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.MemoryPressureProtection'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('AutoTuningLevelLocal')) {\n            [object]$__cmdletization_value = ${AutoTuningLevelLocal}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AutoTuningLevelLocal'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.AutoTuningLevelLocal'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AutoTuningLevelLocal'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.AutoTuningLevelLocal'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('EcnCapability')) {\n            [object]$__cmdletization_value = ${EcnCapability}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EcnCapability'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.EcnCapability'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EcnCapability'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.EcnCapability'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('Timestamps')) {\n            [object]$__cmdletization_value = ${Timestamps}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Timestamps'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.Timestamps'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Timestamps'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.Timestamps'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('InitialRtoMs')) {\n            [object]$__cmdletization_value = ${InitialRtoMs}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InitialRto'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InitialRto'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('ScalingHeuristics')) {\n            [object]$__cmdletization_value = ${ScalingHeur"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4104,
      "details": ".ContainsKey('Timestamps') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Timestamps})\n        $__cmdletization_queryBuilder.FilterByProperty('Timestamps', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('InitialRtoMs') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${InitialRtoMs})\n        $__cmdletization_queryBuilder.FilterByProperty('InitialRto', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('ScalingHeuristics') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${ScalingHeuristics})\n        $__cmdletization_queryBuilder.FilterByProperty('ScalingHeuristics', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DynamicPortRangeStartPort') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DynamicPortRangeStartPort})\n        $__cmdletization_queryBuilder.FilterByProperty('DynamicPortRangeStartPort', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DynamicPortRangeNumberOfPorts') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DynamicPortRangeNumberOfPorts})\n        $__cmdletization_queryBuilder.FilterByProperty('DynamicPortRangeNumberOfPorts', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AutomaticUseCustom') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${AutomaticUseCustom})\n        $__cmdletization_queryBuilder.FilterByProperty('AutomaticUseCustom', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('NonSackRttResiliency') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${NonSackRttResiliency})\n        $__cmdletization_queryBuilder.FilterByProperty('NonSackRttResiliency', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('ForceWS') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${ForceWS})\n        $__cmdletization_queryBuilder.FilterByProperty('ForceWS', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('MaxSynRetransmissions') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${MaxSynRetransmissions})\n        $__cmdletization_queryBuilder.FilterByProperty('MaxSynRetransmissions', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AutoReusePortRangeStartPort') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${AutoReusePortRangeStartPort})\n        $__cmdletization_queryBuilder.FilterByProperty('AutoReusePortRangeStartPort', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AutoReusePortRangeNumberOfPorts') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${AutoReusePortRangeNumberOfPorts})\n        $__cmdletization_queryBuilder.FilterByProperty('AutoReusePortRangeNumberOfPorts', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedTransportFilter') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedTransportFilter}, 'MSFT_NetTransportFilterTCPSetting', 'Antecedent', 'Dependent', 'Default')\n    }\n\n\n    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP MSFT_NetTCPSetting.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Get-NetTCPSetting' -Alias '*'\n        \n\nfunction Set-NetTCPSetting\n{\n    [CmdletBinding(DefaultParameterSetName='ByName', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/StandardCimv2/MSFT_NetTCPSetting')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByName', Position=0)]\n    [ValidateNotNull()]\n    [string[]]\n    ${SettingName},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetTCPSetting')]\n    [ValidateNotNull()]\n    [ciminstance[]]\n    ${InputObject},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('MinRto')]\n    [uint32]\n    ${MinRtoMs},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('InitialCongestionWindow')]\n    [uint32]\n    ${InitialCongestionWindowMss},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.CongestionProvider]\n    ${CongestionProvider},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.CwndRestart]\n    ${CwndRestart},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('DelayedAckTimeout')]\n    [uint32]\n    ${DelayedAckTimeoutMs},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [byte]\n    ${DelayedAckFrequency},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.MemoryPressureProtection]\n    ${MemoryPressureProtection},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.AutoTuningLevelLocal]\n    ${AutoTuningLevelLocal},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.EcnCapability]\n    ${EcnCapability},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.Timestamps]\n    ${Timestamps},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('InitialRto')]\n    [uint32]\n    ${InitialRtoMs},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.ScalingHeuristics]\n    ${ScalingHeuristics},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [uint16]\n    ${DynamicPortRangeStartPort},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [uint16]\n    ${DynamicPortRangeNumberOfPorts},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.AutomaticUseCustom]\n    ${AutomaticUseCustom},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.NonSackRttResiliency]\n    ${NonSackRttResiliency},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.ForceWS]\n    ${ForceWS},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [byte]\n    ${MaxSynRetransmissions},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [uint16]\n    ${AutoReusePortRangeStartPort},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [uint16]\n    ${AutoReusePortRangeNumberOfPorts},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${AsJob},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${PassThru})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('SettingName') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${SettingName})\n        $__cmdl"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4104,
      "details": "#requires -version 3.0\n\ntry { Microsoft.PowerShell.Core\\Set-StrictMode -Off } catch { }\n\n$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module\n\n$script:ClassName = 'ROOT/StandardCimv2/MSFT_NetTCPSetting'\n$script:ClassVersion = '1.0.0'\n$script:ModuleVersion = '1.0.0'\n$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]\n\n$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()\n\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function @()\n        \n\nfunction __cmdletization_BindCommonParameters\n{\n    param(\n        $__cmdletization_objectModelWrapper,\n        $myPSBoundParameters\n    )       \n                \n\n        if ($myPSBoundParameters.ContainsKey('CimSession')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('AsJob')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] \n        }\n                    \n\n}\n                \n\nfunction Get-NetTCPSetting\n{\n    [CmdletBinding(DefaultParameterSetName='ByName', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/StandardCimv2/MSFT_NetTCPSetting')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByName', Position=0)]\n    [ValidateNotNull()]\n    [string[]]\n    ${SettingName},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Alias('MinRto')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${MinRtoMs},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Alias('InitialCongestionWindow')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${InitialCongestionWindowMss},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.CongestionProvider[]]\n    ${CongestionProvider},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.CwndRestart[]]\n    ${CwndRestart},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Alias('DelayedAckTimeout')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${DelayedAckTimeoutMs},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [byte[]]\n    ${DelayedAckFrequency},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.MemoryPressureProtection[]]\n    ${MemoryPressureProtection},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.AutoTuningLevelLocal[]]\n    ${AutoTuningLevelLocal},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.AutoTuningLevelGroupPolicy[]]\n    ${AutoTuningLevelGroupPolicy},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.AutoTuningLevelEffective[]]\n    ${AutoTuningLevelEffective},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.EcnCapability[]]\n    ${EcnCapability},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.Timestamps[]]\n    ${Timestamps},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Alias('InitialRto')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${InitialRtoMs},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.ScalingHeuristics[]]\n    ${ScalingHeuristics},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [uint16[]]\n    ${DynamicPortRangeStartPort},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [uint16[]]\n    ${DynamicPortRangeNumberOfPorts},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.AutomaticUseCustom[]]\n    ${AutomaticUseCustom},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.NonSackRttResiliency[]]\n    ${NonSackRttResiliency},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.ForceWS[]]\n    ${ForceWS},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [byte[]]\n    ${MaxSynRetransmissions},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [uint16[]]\n    ${AutoReusePortRangeStartPort},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [uint16[]]\n    ${AutoReusePortRangeNumberOfPorts},\n\n    [Parameter(ParameterSetName='ByName', ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetTransportFilter')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedTransportFilter},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [switch]\n    ${AsJob})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('SettingName') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${SettingName})\n        $__cmdletization_queryBuilder.FilterByProperty('SettingName', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('MinRtoMs') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${MinRtoMs})\n        $__cmdletization_queryBuilder.FilterByProperty('MinRto', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('InitialCongestionWindowMss') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${InitialCongestionWindowMss})\n        $__cmdletization_queryBuilder.FilterByProperty('InitialCongestionWindow', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('CongestionProvider') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${CongestionProvider})\n        $__cmdletization_queryBuilder.FilterByProperty('CongestionProvider', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('CwndRestart') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${CwndRestart})\n        $__cmdletization_queryBuilder.FilterByProperty('CwndRestart', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DelayedAckTimeoutMs') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DelayedAckTimeoutMs})\n        $__cmdletization_queryBuilder.FilterByProperty('DelayedAckTimeout', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DelayedAckFrequency') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DelayedAckFrequency})\n        $__cmdletization_queryBuilder.FilterByProperty('DelayedAckFrequency', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('MemoryPressureProtection') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${MemoryPressureProtection})\n        $__cmdletization_queryBuilder.FilterByProperty('MemoryPressureProtection', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AutoTuningLevelLocal') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${AutoTuningLevelLocal})\n        $__cmdletization_queryBuilder.FilterByProperty('AutoTuningLevelLocal', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AutoTuningLevelGroupPolicy') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${AutoTuningLevelGroupPolicy})\n        $__cmdletization_queryBuilder.FilterByProperty('AutoTuningLevelGroupPolicy', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AutoTuningLevelEffective') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${AutoTuningLevelEffective})\n        $__cmdletization_queryBuilder.FilterByProperty('AutoTuningLevelEffective', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('EcnCapability') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${EcnCapability})\n        $__cmdletization_queryBuilder.FilterByProperty('EcnCapability', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-NetNeighbor"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-NetNeighbor"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-NetNeighbor"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4104,
      "details": "#requires -version 3.0\n\ntry { Microsoft.PowerShell.Core\\Set-StrictMode -Off } catch { }\n\n$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module\n\n$script:ClassName = 'ROOT/StandardCimv2/MSFT_NetTCPConnection'\n$script:ClassVersion = '1.0.0'\n$script:ModuleVersion = '1.0.0'\n$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]\n\n$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()\n\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function @()\n        \n\nfunction __cmdletization_BindCommonParameters\n{\n    param(\n        $__cmdletization_objectModelWrapper,\n        $myPSBoundParameters\n    )       \n                \n\n        if ($myPSBoundParameters.ContainsKey('CimSession')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('AsJob')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] \n        }\n                    \n\n}\n                \n\nfunction Get-NetTCPConnection\n{\n    [CmdletBinding(DefaultParameterSetName='ByName', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/StandardCimv2/MSFT_NetTCPConnection')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByName', Position=0, ValueFromPipelineByPropertyName=$true)]\n    [Alias('IPAddress')]\n    [ValidateNotNull()]\n    [string[]]\n    ${LocalAddress},\n\n    [Parameter(ParameterSetName='ByName', Position=1)]\n    [ValidateNotNull()]\n    [uint16[]]\n    ${LocalPort},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [string[]]\n    ${RemoteAddress},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [uint16[]]\n    ${RemotePort},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPConnection.State[]]\n    ${State},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPConnection.AppliedSetting[]]\n    ${AppliedSetting},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${OwningProcess},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [datetime[]]\n    ${CreationTime},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPConnection.OffloadState[]]\n    ${OffloadState},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [switch]\n    ${AsJob})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('LocalAddress') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${LocalAddress})\n        $__cmdletization_queryBuilder.FilterByProperty('LocalAddress', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('LocalPort') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${LocalPort})\n        $__cmdletization_queryBuilder.FilterByProperty('LocalPort', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('RemoteAddress') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${RemoteAddress})\n        $__cmdletization_queryBuilder.FilterByProperty('RemoteAddress', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('RemotePort') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${RemotePort})\n        $__cmdletization_queryBuilder.FilterByProperty('RemotePort', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('State') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${State})\n        $__cmdletization_queryBuilder.FilterByProperty('State', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AppliedSetting') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${AppliedSetting})\n        $__cmdletization_queryBuilder.FilterByProperty('AppliedSetting', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('OwningProcess') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${OwningProcess})\n        $__cmdletization_queryBuilder.FilterByProperty('OwningProcess', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('CreationTime') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${CreationTime})\n        $__cmdletization_queryBuilder.FilterByProperty('CreationTime', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('OffloadState') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${OffloadState})\n        $__cmdletization_queryBuilder.FilterByProperty('OffloadState', $__cmdletization_values, $false, 'Default')\n    }\n\n\n    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP MSFT_NetTCPConnection.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Get-NetTCPConnection' -Alias '*'"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-NetNeighbor"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-NetNeighbor"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-NetNeighbor"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-NetNeighbor"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-NetNeighbor"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-NetNeighbor"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-NetNeighbor"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4104,
      "details": "@(${Publish})\n        $__cmdletization_queryBuilder.FilterByProperty('Publish', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('RouteMetric') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${RouteMetric})\n        $__cmdletization_queryBuilder.FilterByProperty('RouteMetric', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Protocol') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Protocol})\n        $__cmdletization_queryBuilder.FilterByProperty('Protocol', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('CompartmentId') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${CompartmentId})\n        $__cmdletization_queryBuilder.FilterByProperty('CompartmentId', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('ValidLifetime') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${ValidLifetime})\n        $__cmdletization_queryBuilder.FilterByProperty('ValidLifetime', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PreferredLifetime') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PreferredLifetime})\n        $__cmdletization_queryBuilder.FilterByProperty('PreferredLifetime', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('State') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${State})\n        $__cmdletization_queryBuilder.FilterByProperty('State', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('InterfaceMetric') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${InterfaceMetric})\n        $__cmdletization_queryBuilder.FilterByProperty('InterfaceMetric', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedIPInterface') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedIPInterface}, 'MSFT_NetIPInterfaceRoute', 'Antecedent', 'Dependent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})\n    }\n    if ($PSBoundParameters.ContainsKey('IncludeAllCompartments') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('IncludeAllCompartments', ${IncludeAllCompartments})\n    }\n\n\n    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n    switch -exact ($PSCmdlet.ParameterSetName) { \n        { @('ByName', 'InputObject (cdxml)') -contains $_ } {\n      $__cmdletization_returnValue = $null\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:DeleteInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru\n            if ($PSBoundParameters.ContainsKey('InputObject')) {\n                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }\n            } else {\n                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)\n            }\n        }\n    }\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP MSFT_NetRoute.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Remove-NetRoute' -Alias '*'"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4104,
      "details": "$__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})\n    }\n    if ($PSBoundParameters.ContainsKey('IncludeAllCompartments') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('IncludeAllCompartments', ${IncludeAllCompartments})\n    }\n\n\n    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n    switch -exact ($PSCmdlet.ParameterSetName) { \n        { @('ByName', 'InputObject (cdxml)') -contains $_ } {\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('Publish')) {\n            [object]$__cmdletization_value = ${Publish}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Publish'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetRoute.Publish'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Publish'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetRoute.Publish'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('RouteMetric')) {\n            [object]$__cmdletization_value = ${RouteMetric}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RouteMetric'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RouteMetric'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('ValidLifetime')) {\n            [object]$__cmdletization_value = ${ValidLifetime}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ValidLifetime'; ParameterType = 'System.TimeSpan'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ValidLifetime'; ParameterType = 'System.TimeSpan'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('PreferredLifetime')) {\n            [object]$__cmdletization_value = ${PreferredLifetime}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PreferredLifetime'; ParameterType = 'System.TimeSpan'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PreferredLifetime'; ParameterType = 'System.TimeSpan'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n      $__cmdletization_returnValue = $null\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:ModifyInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru\n            if ($PSBoundParameters.ContainsKey('InputObject')) {\n                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }\n            } else {\n                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)\n            }\n        }\n    }\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP MSFT_NetRoute.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Set-NetRoute' -Alias '*'\n        \n\nfunction Remove-NetRoute\n{\n    [CmdletBinding(DefaultParameterSetName='ByName', SupportsShouldProcess=$true, ConfirmImpact='High', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/StandardCimv2/MSFT_NetRoute')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByName', Position=0)]\n    [ValidateNotNull()]\n    [string[]]\n    ${DestinationPrefix},\n\n    [Parameter(ParameterSetName='ByName', ValueFromPipelineByPropertyName=$true)]\n    [Alias('ifIndex')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${InterfaceIndex},\n\n    [Parameter(ParameterSetName='ByName', ValueFromPipelineByPropertyName=$true)]\n    [Alias('ifAlias')]\n    [ValidateNotNull()]\n    [string[]]\n    ${InterfaceAlias},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [string[]]\n    ${NextHop},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetRoute.AddressFamily[]]\n    ${AddressFamily},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetRoute.Publish[]]\n    ${Publish},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [uint16[]]\n    ${RouteMetric},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetRoute.Protocol[]]\n    ${Protocol},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${CompartmentId},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [timespan[]]\n    ${ValidLifetime},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [timespan[]]\n    ${PreferredLifetime},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetRoute.State[]]\n    ${State},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${InterfaceMetric},\n\n    [Parameter(ParameterSetName='ByName', ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIPInterface')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedIPInterface},\n\n    [Parameter(ParameterSetName='ByName')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='ByName')]\n    [switch]\n    ${IncludeAllCompartments},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetRoute')]\n    [ValidateNotNull()]\n    [ciminstance[]]\n    ${InputObject},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${AsJob},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${PassThru})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('DestinationPrefix') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DestinationPrefix})\n        $__cmdletization_queryBuilder.FilterByProperty('DestinationPrefix', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('InterfaceIndex') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${InterfaceIndex})\n        $__cmdletization_queryBuilder.FilterByProperty('InterfaceIndex', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('InterfaceAlias') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${InterfaceAlias})\n        $__cmdletization_queryBuilder.FilterByProperty('InterfaceAlias', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('NextHop') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${NextHop})\n        $__cmdletization_queryBuilder.FilterByProperty('NextHop', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AddressFamily') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${AddressFamily})\n        $__cmdletization_queryBuilder.FilterByProperty('AddressFamily', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Publish') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values ="
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4104,
      "details": "{\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('DestinationPrefix') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DestinationPrefix})\n        $__cmdletization_queryBuilder.FilterByProperty('DestinationPrefix', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('InterfaceIndex') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${InterfaceIndex})\n        $__cmdletization_queryBuilder.FilterByProperty('InterfaceIndex', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('InterfaceAlias') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${InterfaceAlias})\n        $__cmdletization_queryBuilder.FilterByProperty('InterfaceAlias', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('NextHop') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${NextHop})\n        $__cmdletization_queryBuilder.FilterByProperty('NextHop', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AddressFamily') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${AddressFamily})\n        $__cmdletization_queryBuilder.FilterByProperty('AddressFamily', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Publish') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Publish})\n        $__cmdletization_queryBuilder.FilterByProperty('Publish', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('RouteMetric') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${RouteMetric})\n        $__cmdletization_queryBuilder.FilterByProperty('RouteMetric', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Protocol') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Protocol})\n        $__cmdletization_queryBuilder.FilterByProperty('Protocol', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('CompartmentId') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${CompartmentId})\n        $__cmdletization_queryBuilder.FilterByProperty('CompartmentId', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('ValidLifetime') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${ValidLifetime})\n        $__cmdletization_queryBuilder.FilterByProperty('ValidLifetime', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PreferredLifetime') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PreferredLifetime})\n        $__cmdletization_queryBuilder.FilterByProperty('PreferredLifetime', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('State') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${State})\n        $__cmdletization_queryBuilder.FilterByProperty('State', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('InterfaceMetric') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${InterfaceMetric})\n        $__cmdletization_queryBuilder.FilterByProperty('InterfaceMetric', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedIPInterface') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedIPInterface}, 'MSFT_NetIPInterfaceRoute', 'Antecedent', 'Dependent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})\n    }\n    if ($PSBoundParameters.ContainsKey('IncludeAllCompartments') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('IncludeAllCompartments', ${IncludeAllCompartments})\n    }\n\n\n    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP MSFT_NetRoute.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Get-NetRoute' -Alias '*'\n        \n\nfunction Set-NetRoute\n{\n    [CmdletBinding(DefaultParameterSetName='ByName', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/StandardCimv2/MSFT_NetRoute')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByName', Position=0)]\n    [ValidateNotNull()]\n    [string[]]\n    ${DestinationPrefix},\n\n    [Parameter(ParameterSetName='ByName', ValueFromPipelineByPropertyName=$true)]\n    [Alias('ifIndex')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${InterfaceIndex},\n\n    [Parameter(ParameterSetName='ByName', ValueFromPipelineByPropertyName=$true)]\n    [Alias('ifAlias')]\n    [ValidateNotNull()]\n    [string[]]\n    ${InterfaceAlias},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [string[]]\n    ${NextHop},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetRoute.AddressFamily[]]\n    ${AddressFamily},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetRoute.Protocol[]]\n    ${Protocol},\n\n    [Parameter(ParameterSetName='ByName')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='ByName')]\n    [switch]\n    ${IncludeAllCompartments},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetRoute')]\n    [ValidateNotNull()]\n    [ciminstance[]]\n    ${InputObject},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetRoute.Publish]\n    ${Publish},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [uint16]\n    ${RouteMetric},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [timespan]\n    ${ValidLifetime},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [timespan]\n    ${PreferredLifetime},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${AsJob},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${PassThru})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('DestinationPrefix') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DestinationPrefix})\n        $__cmdletization_queryBuilder.FilterByProperty('DestinationPrefix', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('InterfaceIndex') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${InterfaceIndex})\n        $__cmdletization_queryBuilder.FilterByProperty('InterfaceIndex', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('InterfaceAlias') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${InterfaceAlias})\n        $__cmdletization_queryBuilder.FilterByProperty('InterfaceAlias', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('NextHop') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${NextHop})\n        $__cmdletization_queryBuilder.FilterByProperty('NextHop', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AddressFamily') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${AddressFamily})\n        $__cmdletization_queryBuilder.FilterByProperty('AddressFamily', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Protocol') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Protocol})\n        $__cmdletization_queryBuilder.FilterByProperty('Protocol', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4104,
      "details": "; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PreferredLifetime'; ParameterType = 'System.TimeSpan'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'CmdletOutput'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'Out'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.UInt32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Create', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo)\n        }\n    }\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP MSFT_NetRoute.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'New-NetRoute' -Alias '*'\n        \n\nfunction Find-NetRoute\n{\n    [CmdletBinding(PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance[]])]\n    param(\n    \n    [Parameter(ParameterSetName='Find0')]\n    [uint32]\n    ${InterfaceIndex},\n\n    [Parameter(ParameterSetName='Find0')]\n    [string]\n    ${LocalIPAddress},\n\n    [Parameter(ParameterSetName='Find0', Mandatory=$true)]\n    [string]\n    ${RemoteIPAddress},\n\n    [Parameter(ParameterSetName='Find0')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='Find0')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='Find0')]\n    [switch]\n    ${AsJob})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n      $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('InterfaceIndex')) {\n          [object]$__cmdletization_value = ${InterfaceIndex}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InterfaceIndex'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InterfaceIndex'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('LocalIPAddress')) {\n          [object]$__cmdletization_value = ${LocalIPAddress}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LocalIPAddress'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LocalIPAddress'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('RemoteIPAddress')) {\n          [object]$__cmdletization_value = ${RemoteIPAddress}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteIPAddress'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteIPAddress'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'CmdletOutput'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'Out'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.UInt32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Find', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo)\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP MSFT_NetRoute.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Find-NetRoute' -Alias '*'\n        \n\nfunction Get-NetRoute\n{\n    [CmdletBinding(DefaultParameterSetName='ByName', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/StandardCimv2/MSFT_NetRoute')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByName', Position=0)]\n    [ValidateNotNull()]\n    [string[]]\n    ${DestinationPrefix},\n\n    [Parameter(ParameterSetName='ByName', ValueFromPipelineByPropertyName=$true)]\n    [Alias('ifIndex')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${InterfaceIndex},\n\n    [Parameter(ParameterSetName='ByName', ValueFromPipelineByPropertyName=$true)]\n    [Alias('ifAlias')]\n    [ValidateNotNull()]\n    [string[]]\n    ${InterfaceAlias},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [string[]]\n    ${NextHop},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetRoute.AddressFamily[]]\n    ${AddressFamily},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetRoute.Publish[]]\n    ${Publish},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [uint16[]]\n    ${RouteMetric},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetRoute.Protocol[]]\n    ${Protocol},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${CompartmentId},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [timespan[]]\n    ${ValidLifetime},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [timespan[]]\n    ${PreferredLifetime},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetRoute.State[]]\n    ${State},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${InterfaceMetric},\n\n    [Parameter(ParameterSetName='ByName', ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIPInterface')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedIPInterface},\n\n    [Parameter(ParameterSetName='ByName')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='ByName')]\n    [switch]\n    ${IncludeAllCompartments},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [switch]\n    ${AsJob})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4104,
      "details": "ntainsKey('Protocol')) {\n          [object]$__cmdletization_value = ${Protocol}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Protocol'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetRoute.Protocol'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Protocol'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetRoute.Protocol'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('ValidLifetime')) {\n          [object]$__cmdletization_value = ${ValidLifetime}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ValidLifetime'; ParameterType = 'System.TimeSpan'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ValidLifetime'; ParameterType = 'System.TimeSpan'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('PreferredLifetime')) {\n          [object]$__cmdletization_value = ${PreferredLifetime}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PreferredLifetime'; ParameterType = 'System.TimeSpan'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PreferredLifetime'; ParameterType = 'System.TimeSpan'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'CmdletOutput'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'Out'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.UInt32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Create', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo)\n        }\n        { @('ByInterfaceIndex') -contains $_ } {\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('DestinationPrefix')) {\n          [object]$__cmdletization_value = ${DestinationPrefix}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DestinationPrefix'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DestinationPrefix'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('InterfaceIndex')) {\n          [object]$__cmdletization_value = ${InterfaceIndex}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InterfaceIndex'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InterfaceIndex'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('AddressFamily')) {\n          [object]$__cmdletization_value = ${AddressFamily}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AddressFamily'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetRoute.AddressFamily'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AddressFamily'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetRoute.AddressFamily'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('NextHop')) {\n          [object]$__cmdletization_value = ${NextHop}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NextHop'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NextHop'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('PolicyStore')) {\n          [object]$__cmdletization_value = ${PolicyStore}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('Publish')) {\n          [object]$__cmdletization_value = ${Publish}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Publish'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetRoute.Publish'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Publish'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetRoute.Publish'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('RouteMetric')) {\n          [object]$__cmdletization_value = ${RouteMetric}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RouteMetric'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RouteMetric'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('Protocol')) {\n          [object]$__cmdletization_value = ${Protocol}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Protocol'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetRoute.Protocol'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Protocol'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetRoute.Protocol'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('ValidLifetime')) {\n          [object]$__cmdletization_value = ${ValidLifetime}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ValidLifetime'; ParameterType = 'System.TimeSpan'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ValidLifetime'; ParameterType = 'System.TimeSpan'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('PreferredLifetime')) {\n          [object]$__cmdletization_value = ${PreferredLifetime}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PreferredLifetime'; ParameterType = 'System.TimeSpan'; Bindings = 'In'; Value = $__cmdletization_value"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4104,
      "details": "#requires -version 3.0\n\ntry { Microsoft.PowerShell.Core\\Set-StrictMode -Off } catch { }\n\n$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module\n\n$script:ClassName = 'ROOT/StandardCimv2/MSFT_NetRoute'\n$script:ClassVersion = '1.0.0'\n$script:ModuleVersion = '1.0.0'\n$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]\n\n$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()\n\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function @()\n        \n\nfunction __cmdletization_BindCommonParameters\n{\n    param(\n        $__cmdletization_objectModelWrapper,\n        $myPSBoundParameters\n    )       \n                \n\n        if ($myPSBoundParameters.ContainsKey('CimSession')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('AsJob')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] \n        }\n                    \n\n}\n                \n\nfunction New-NetRoute\n{\n    [CmdletBinding(DefaultParameterSetName='ByInterfaceAlias', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance[]])][OutputType([Microsoft.Management.Infrastructure.CimInstance[]])]\n    param(\n    \n    [Parameter(ParameterSetName='ByInterfaceAlias', Mandatory=$true, Position=0)]\n    [Parameter(ParameterSetName='ByInterfaceIndex', Mandatory=$true, Position=0)]\n    [string]\n    ${DestinationPrefix},\n\n    [Parameter(ParameterSetName='ByInterfaceAlias', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]\n    [Alias('ifAlias')]\n    [string]\n    ${InterfaceAlias},\n\n    [Parameter(ParameterSetName='ByInterfaceAlias')]\n    [Parameter(ParameterSetName='ByInterfaceIndex')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetRoute.AddressFamily]\n    ${AddressFamily},\n\n    [Parameter(ParameterSetName='ByInterfaceAlias')]\n    [Parameter(ParameterSetName='ByInterfaceIndex')]\n    [string]\n    ${NextHop},\n\n    [Parameter(ParameterSetName='ByInterfaceAlias')]\n    [Parameter(ParameterSetName='ByInterfaceIndex')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='ByInterfaceAlias')]\n    [Parameter(ParameterSetName='ByInterfaceIndex')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetRoute.Publish]\n    ${Publish},\n\n    [Parameter(ParameterSetName='ByInterfaceAlias')]\n    [Parameter(ParameterSetName='ByInterfaceIndex')]\n    [uint16]\n    ${RouteMetric},\n\n    [Parameter(ParameterSetName='ByInterfaceAlias')]\n    [Parameter(ParameterSetName='ByInterfaceIndex')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetRoute.Protocol]\n    ${Protocol},\n\n    [Parameter(ParameterSetName='ByInterfaceAlias')]\n    [Parameter(ParameterSetName='ByInterfaceIndex')]\n    [timespan]\n    ${ValidLifetime},\n\n    [Parameter(ParameterSetName='ByInterfaceAlias')]\n    [Parameter(ParameterSetName='ByInterfaceIndex')]\n    [timespan]\n    ${PreferredLifetime},\n\n    [Parameter(ParameterSetName='ByInterfaceIndex', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]\n    [Alias('ifIndex')]\n    [uint32]\n    ${InterfaceIndex},\n\n    [Parameter(ParameterSetName='ByInterfaceAlias')]\n    [Parameter(ParameterSetName='ByInterfaceIndex')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByInterfaceAlias')]\n    [Parameter(ParameterSetName='ByInterfaceIndex')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByInterfaceAlias')]\n    [Parameter(ParameterSetName='ByInterfaceIndex')]\n    [switch]\n    ${AsJob})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n      $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n\n      switch -exact ($PSCmdlet.ParameterSetName) { \n        { @('ByInterfaceAlias') -contains $_ } {\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('DestinationPrefix')) {\n          [object]$__cmdletization_value = ${DestinationPrefix}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DestinationPrefix'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DestinationPrefix'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('InterfaceAlias')) {\n          [object]$__cmdletization_value = ${InterfaceAlias}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InterfaceAlias'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InterfaceAlias'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('AddressFamily')) {\n          [object]$__cmdletization_value = ${AddressFamily}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AddressFamily'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetRoute.AddressFamily'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AddressFamily'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetRoute.AddressFamily'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('NextHop')) {\n          [object]$__cmdletization_value = ${NextHop}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NextHop'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NextHop'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('PolicyStore')) {\n          [object]$__cmdletization_value = ${PolicyStore}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('Publish')) {\n          [object]$__cmdletization_value = ${Publish}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Publish'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetRoute.Publish'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Publish'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetRoute.Publish'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('RouteMetric')) {\n          [object]$__cmdletization_value = ${RouteMetric}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RouteMetric'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RouteMetric'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.Co"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-NetNeighbor"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-NetNeighbor"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-NetNeighbor"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4104,
      "details": "#requires -version 3.0\n\ntry { Microsoft.PowerShell.Core\\Set-StrictMode -Off } catch { }\n\n$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module\n\n$script:ClassName = 'ROOT/StandardCimv2/MSFT_NetPrefixPolicy'\n$script:ClassVersion = '1.0.0'\n$script:ModuleVersion = '1.0.0'\n$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]\n\n$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()\n\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function @()\n        \n\nfunction __cmdletization_BindCommonParameters\n{\n    param(\n        $__cmdletization_objectModelWrapper,\n        $myPSBoundParameters\n    )       \n                \n\n        if ($myPSBoundParameters.ContainsKey('CimSession')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('AsJob')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] \n        }\n                    \n\n}\n                \n\nfunction Get-NetPrefixPolicy\n{\n    [CmdletBinding(DefaultParameterSetName='ByName', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/StandardCimv2/MSFT_NetPrefixPolicy')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByName', Position=0)]\n    [ValidateNotNull()]\n    [string[]]\n    ${Prefix},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${Precedence},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${Label},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [switch]\n    ${AsJob})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('Prefix') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Prefix})\n        $__cmdletization_queryBuilder.FilterByProperty('Prefix', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Precedence') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Precedence})\n        $__cmdletization_queryBuilder.FilterByProperty('Precedence', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Label') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Label})\n        $__cmdletization_queryBuilder.FilterByProperty('Label', $__cmdletization_values, $false, 'Default')\n    }\n\n\n    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP MSFT_NetPrefixPolicy.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Get-NetPrefixPolicy' -Alias '*'"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-NetNeighbor"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-NetNeighbor"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-NetNeighbor"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-NetNeighbor"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4104,
      "details": "[object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('PacketCoalescingFilter')) {\n            [object]$__cmdletization_value = ${PacketCoalescingFilter}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PacketCoalescingFilter'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetOffloadGlobalSetting.EnabledDisabledEnum'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PacketCoalescingFilter'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetOffloadGlobalSetting.EnabledDisabledEnum'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n      $__cmdletization_returnValue = $null\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:ModifyInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru\n            if ($PSBoundParameters.ContainsKey('InputObject')) {\n                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }\n            } else {\n                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)\n            }\n        }\n    }\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP MSFT_NetOffloadGlobalSetting.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Set-NetOffloadGlobalSetting' -Alias '*'"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4104,
      "details": "#requires -version 3.0\n\ntry { Microsoft.PowerShell.Core\\Set-StrictMode -Off } catch { }\n\n$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module\n\n$script:ClassName = 'ROOT/StandardCimv2/MSFT_NetOffloadGlobalSetting'\n$script:ClassVersion = '1.0.0'\n$script:ModuleVersion = '1.0.0'\n$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]\n\n$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()\n\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function @()\n        \n\nfunction __cmdletization_BindCommonParameters\n{\n    param(\n        $__cmdletization_objectModelWrapper,\n        $myPSBoundParameters\n    )       \n                \n\n        if ($myPSBoundParameters.ContainsKey('CimSession')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('AsJob')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] \n        }\n                    \n\n}\n                \n\nfunction Get-NetOffloadGlobalSetting\n{\n    [CmdletBinding(DefaultParameterSetName='ByName', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/StandardCimv2/MSFT_NetOffloadGlobalSetting')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetOffloadGlobalSetting.EnabledDisabledEnum[]]\n    ${ReceiveSideScaling},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetOffloadGlobalSetting.EnabledDisabledEnum[]]\n    ${ReceiveSegmentCoalescing},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetOffloadGlobalSetting.ChimneyEnum[]]\n    ${Chimney},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetOffloadGlobalSetting.EnabledDisabledEnum[]]\n    ${TaskOffload},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetOffloadGlobalSetting.EnabledDisabledEnum[]]\n    ${NetworkDirect},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetOffloadGlobalSetting.AllowedBlockedEnum[]]\n    ${NetworkDirectAcrossIPSubnets},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetOffloadGlobalSetting.EnabledDisabledEnum[]]\n    ${PacketCoalescingFilter},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [switch]\n    ${AsJob})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('ReceiveSideScaling') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${ReceiveSideScaling})\n        $__cmdletization_queryBuilder.FilterByProperty('ReceiveSideScaling', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('ReceiveSegmentCoalescing') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${ReceiveSegmentCoalescing})\n        $__cmdletization_queryBuilder.FilterByProperty('ReceiveSegmentCoalescing', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Chimney') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Chimney})\n        $__cmdletization_queryBuilder.FilterByProperty('Chimney', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('TaskOffload') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${TaskOffload})\n        $__cmdletization_queryBuilder.FilterByProperty('TaskOffload', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('NetworkDirect') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${NetworkDirect})\n        $__cmdletization_queryBuilder.FilterByProperty('NetworkDirect', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('NetworkDirectAcrossIPSubnets') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${NetworkDirectAcrossIPSubnets})\n        $__cmdletization_queryBuilder.FilterByProperty('NetworkDirectAcrossIPSubnets', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PacketCoalescingFilter') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PacketCoalescingFilter})\n        $__cmdletization_queryBuilder.FilterByProperty('PacketCoalescingFilter', $__cmdletization_values, $false, 'Default')\n    }\n\n\n    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP MSFT_NetOffloadGlobalSetting.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Get-NetOffloadGlobalSetting' -Alias '*'\n        \n\nfunction Set-NetOffloadGlobalSetting\n{\n    [CmdletBinding(DefaultParameterSetName='InputObject (cdxml)', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/StandardCimv2/MSFT_NetOffloadGlobalSetting')]\n\n    param(\n    \n    [Parameter(ParameterSetName='InputObject (cdxml)', ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetOffloadGlobalSetting')]\n    [ValidateNotNull()]\n    [ciminstance[]]\n    ${InputObject},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetOffloadGlobalSetting.EnabledDisabledEnum]\n    ${ReceiveSideScaling},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetOffloadGlobalSetting.EnabledDisabledEnum]\n    ${ReceiveSegmentCoalescing},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetOffloadGlobalSetting.ChimneyEnum]\n    ${Chimney},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetOffloadGlobalSetting.EnabledDisabledEnum]\n    ${TaskOffload},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetOffloadGlobalSetting.EnabledDisabledEnum]\n    ${NetworkDirect},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetOffloadGlobalSetting.AllowedBlockedEnum]\n    ${NetworkDirectAcrossIPSubnets},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetOffloadGlobalSetting.EnabledDisabledEnum]\n    ${PacketCoalescingFilter},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${AsJob},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${PassThru})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n\n\n    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n    switch -exact ($PSCmdlet.ParameterSetName) { \n        { @('InputObject (cdxml)') -contains $_ } {\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('ReceiveSideScaling')) {\n            [object]$__cmdletization_value = ${ReceiveSideScaling}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ReceiveSideScaling'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetOffloadGlobalSetting.EnabledDisabledEnum'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ReceiveSideScaling'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetOffloadGlobalSetting.EnabledDisabledEnum'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('ReceiveSegmentCoalescing')) {\n            [object]$__cmdletization_value = ${ReceiveSegmentCoalescing}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ReceiveSegmentCoalescing'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetOffloadGlobalSetting.EnabledDisabledEnum'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ReceiveSegmentCoalescing'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetOffloadGlobalSetting.EnabledDisabledEnum'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('Chimney')) {\n            [object]$__cmdletization_value = ${Chimney}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Chimney'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetOffloadGlobalSetting.ChimneyEnum'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Chimney'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetOffloadGlobalSetting.ChimneyEnum'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('TaskOffload')) {\n            [object]$__cmdletization_value = ${TaskOffload}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'TaskOffload'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetOffloadGlobalSetting.EnabledDisabledEnum'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'TaskOffload'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetOffloadGlobalSetting.EnabledDisabledEnum'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('NetworkDirect')) {\n            [object]$__cmdletization_value = ${NetworkDirect}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NetworkDirect'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetOffloadGlobalSetting.EnabledDisabledEnum'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NetworkDirect'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetOffloadGlobalSetting.EnabledDisabledEnum'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('NetworkDirectAcrossIPSubnets')) {\n            [object]$__cmdletization_value = ${NetworkDirectAcrossIPSubnets}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NetworkDirectAcrossIPSubnets'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetOffloadGlobalSetting.AllowedBlockedEnum'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NetworkDirectAcrossIPSubnets'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetOffloadGlobalSetting.AllowedBlockedEnum'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-NetNeighbor"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-NetNeighbor"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-NetNeighbor"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-NetNeighbor"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-NetNeighbor"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-NetNeighbor"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4104,
      "details": "ParameterSetName )) {\n        $__cmdletization_values = @(${InterfaceIndex})\n        $__cmdletization_queryBuilder.FilterByProperty('InterfaceIndex', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('InterfaceAlias') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${InterfaceAlias})\n        $__cmdletization_queryBuilder.FilterByProperty('InterfaceAlias', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('State') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${State})\n        $__cmdletization_queryBuilder.FilterByProperty('State', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AddressFamily') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${AddressFamily})\n        $__cmdletization_queryBuilder.FilterByProperty('AddressFamily', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})\n    }\n    if ($PSBoundParameters.ContainsKey('IncludeAllCompartments') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('IncludeAllCompartments', ${IncludeAllCompartments})\n    }\n\n\n    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n    switch -exact ($PSCmdlet.ParameterSetName) { \n        { @('ByName', 'InputObject (cdxml)') -contains $_ } {\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('LinkLayerAddress')) {\n            [object]$__cmdletization_value = ${LinkLayerAddress}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LinkLayerAddress'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LinkLayerAddress'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n      $__cmdletization_returnValue = $null\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:ModifyInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru\n            if ($PSBoundParameters.ContainsKey('InputObject')) {\n                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }\n            } else {\n                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)\n            }\n        }\n    }\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP MSFT_NetNeighbor.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Set-NetNeighbor' -Alias '*'\n        \n\nfunction Remove-NetNeighbor\n{\n    [CmdletBinding(DefaultParameterSetName='ByName', SupportsShouldProcess=$true, ConfirmImpact='High', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/StandardCimv2/MSFT_NetNeighbor')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByName', Position=0)]\n    [ValidateNotNull()]\n    [string[]]\n    ${IPAddress},\n\n    [Parameter(ParameterSetName='ByName', ValueFromPipelineByPropertyName=$true)]\n    [Alias('ifIndex')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${InterfaceIndex},\n\n    [Parameter(ParameterSetName='ByName', ValueFromPipelineByPropertyName=$true)]\n    [Alias('ifAlias')]\n    [ValidateNotNull()]\n    [string[]]\n    ${InterfaceAlias},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [string[]]\n    ${LinkLayerAddress},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetNeighbor.State[]]\n    ${State},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetNeighbor.AddressFamily[]]\n    ${AddressFamily},\n\n    [Parameter(ParameterSetName='ByName', ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIPInterface')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedIPInterface},\n\n    [Parameter(ParameterSetName='ByName')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='ByName')]\n    [switch]\n    ${IncludeAllCompartments},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetNeighbor')]\n    [ValidateNotNull()]\n    [ciminstance[]]\n    ${InputObject},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${AsJob},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${PassThru})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('IPAddress') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${IPAddress})\n        $__cmdletization_queryBuilder.FilterByProperty('IPAddress', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('InterfaceIndex') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${InterfaceIndex})\n        $__cmdletization_queryBuilder.FilterByProperty('InterfaceIndex', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('InterfaceAlias') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${InterfaceAlias})\n        $__cmdletization_queryBuilder.FilterByProperty('InterfaceAlias', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('LinkLayerAddress') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${LinkLayerAddress})\n        $__cmdletization_queryBuilder.FilterByProperty('LinkLayerAddress', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('State') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${State})\n        $__cmdletization_queryBuilder.FilterByProperty('State', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AddressFamily') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${AddressFamily})\n        $__cmdletization_queryBuilder.FilterByProperty('AddressFamily', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedIPInterface') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedIPInterface}, 'MSFT_NetIPInterfaceNeighbor', 'Antecedent', 'Dependent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})\n    }\n    if ($PSBoundParameters.ContainsKey('IncludeAllCompartments') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('IncludeAllCompartments', ${IncludeAllCompartments})\n    }\n\n\n    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n    switch -exact ($PSCmdlet.ParameterSetName) { \n        { @('ByName', 'InputObject (cdxml)') -contains $_ } {\n      $__cmdletization_returnValue = $null\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:DeleteInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru\n            if ($PSBoundParameters.ContainsKey('InputObject')) {\n                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }\n            } else {\n                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)\n            }\n        }\n    }\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP MSFT_NetNeighbor.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Remove-NetNeighbor' -Alias '*'"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4104,
      "details": "thodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('State')) {\n          [object]$__cmdletization_value = ${State}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'State'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetNeighbor.State'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'State'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetNeighbor.State'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('AddressFamily')) {\n          [object]$__cmdletization_value = ${AddressFamily}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AddressFamily'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetNeighbor.AddressFamily'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AddressFamily'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetNeighbor.AddressFamily'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'CmdletOutput'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'Out'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.UInt32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Create', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo)\n        }\n    }\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP MSFT_NetNeighbor.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'New-NetNeighbor' -Alias '*'\n        \n\nfunction Get-NetNeighbor\n{\n    [CmdletBinding(DefaultParameterSetName='ByName', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/StandardCimv2/MSFT_NetNeighbor')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByName', Position=0)]\n    [ValidateNotNull()]\n    [string[]]\n    ${IPAddress},\n\n    [Parameter(ParameterSetName='ByName', ValueFromPipelineByPropertyName=$true)]\n    [Alias('ifIndex')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${InterfaceIndex},\n\n    [Parameter(ParameterSetName='ByName', ValueFromPipelineByPropertyName=$true)]\n    [Alias('ifAlias')]\n    [ValidateNotNull()]\n    [string[]]\n    ${InterfaceAlias},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [string[]]\n    ${LinkLayerAddress},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetNeighbor.State[]]\n    ${State},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetNeighbor.AddressFamily[]]\n    ${AddressFamily},\n\n    [Parameter(ParameterSetName='ByName', ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIPInterface')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedIPInterface},\n\n    [Parameter(ParameterSetName='ByName')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='ByName')]\n    [switch]\n    ${IncludeAllCompartments},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [switch]\n    ${AsJob})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('IPAddress') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${IPAddress})\n        $__cmdletization_queryBuilder.FilterByProperty('IPAddress', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('InterfaceIndex') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${InterfaceIndex})\n        $__cmdletization_queryBuilder.FilterByProperty('InterfaceIndex', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('InterfaceAlias') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${InterfaceAlias})\n        $__cmdletization_queryBuilder.FilterByProperty('InterfaceAlias', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('LinkLayerAddress') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${LinkLayerAddress})\n        $__cmdletization_queryBuilder.FilterByProperty('LinkLayerAddress', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('State') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${State})\n        $__cmdletization_queryBuilder.FilterByProperty('State', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AddressFamily') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${AddressFamily})\n        $__cmdletization_queryBuilder.FilterByProperty('AddressFamily', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedIPInterface') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedIPInterface}, 'MSFT_NetIPInterfaceNeighbor', 'Antecedent', 'Dependent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})\n    }\n    if ($PSBoundParameters.ContainsKey('IncludeAllCompartments') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('IncludeAllCompartments', ${IncludeAllCompartments})\n    }\n\n\n    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP MSFT_NetNeighbor.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Get-NetNeighbor' -Alias '*'\n        \n\nfunction Set-NetNeighbor\n{\n    [CmdletBinding(DefaultParameterSetName='ByName', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/StandardCimv2/MSFT_NetNeighbor')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByName', Position=0)]\n    [ValidateNotNull()]\n    [string[]]\n    ${IPAddress},\n\n    [Parameter(ParameterSetName='ByName', ValueFromPipelineByPropertyName=$true)]\n    [Alias('ifIndex')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${InterfaceIndex},\n\n    [Parameter(ParameterSetName='ByName', ValueFromPipelineByPropertyName=$true)]\n    [Alias('ifAlias')]\n    [ValidateNotNull()]\n    [string[]]\n    ${InterfaceAlias},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetNeighbor.State[]]\n    ${State},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetNeighbor.AddressFamily[]]\n    ${AddressFamily},\n\n    [Parameter(ParameterSetName='ByName')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='ByName')]\n    [switch]\n    ${IncludeAllCompartments},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetNeighbor')]\n    [ValidateNotNull()]\n    [ciminstance[]]\n    ${InputObject},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [string]\n    ${LinkLayerAddress},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${AsJob},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${PassThru})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('IPAddress') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${IPAddress})\n        $__cmdletization_queryBuilder.FilterByProperty('IPAddress', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('InterfaceIndex') -and (@('ByName') -contains $PSCmdlet."
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4104,
      "details": "#requires -version 3.0\n\ntry { Microsoft.PowerShell.Core\\Set-StrictMode -Off } catch { }\n\n$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module\n\n$script:ClassName = 'ROOT/StandardCimv2/MSFT_NetNeighbor'\n$script:ClassVersion = '1.0.0'\n$script:ModuleVersion = '1.0.0'\n$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]\n\n$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()\n\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function @()\n        \n\nfunction __cmdletization_BindCommonParameters\n{\n    param(\n        $__cmdletization_objectModelWrapper,\n        $myPSBoundParameters\n    )       \n                \n\n        if ($myPSBoundParameters.ContainsKey('CimSession')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('AsJob')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] \n        }\n                    \n\n}\n                \n\nfunction New-NetNeighbor\n{\n    [CmdletBinding(DefaultParameterSetName='ByInterfaceAlias', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance[]])][OutputType([Microsoft.Management.Infrastructure.CimInstance[]])]\n    param(\n    \n    [Parameter(ParameterSetName='ByInterfaceAlias', Mandatory=$true, Position=0)]\n    [Parameter(ParameterSetName='ByInterfaceIndex', Mandatory=$true, Position=0)]\n    [string]\n    ${IPAddress},\n\n    [Parameter(ParameterSetName='ByInterfaceAlias', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]\n    [Alias('ifAlias')]\n    [string]\n    ${InterfaceAlias},\n\n    [Parameter(ParameterSetName='ByInterfaceAlias')]\n    [Parameter(ParameterSetName='ByInterfaceIndex')]\n    [string]\n    ${LinkLayerAddress},\n\n    [Parameter(ParameterSetName='ByInterfaceAlias')]\n    [Parameter(ParameterSetName='ByInterfaceIndex')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='ByInterfaceAlias')]\n    [Parameter(ParameterSetName='ByInterfaceIndex')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetNeighbor.State]\n    ${State},\n\n    [Parameter(ParameterSetName='ByInterfaceAlias')]\n    [Parameter(ParameterSetName='ByInterfaceIndex')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetNeighbor.AddressFamily]\n    ${AddressFamily},\n\n    [Parameter(ParameterSetName='ByInterfaceIndex', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]\n    [Alias('ifIndex')]\n    [uint32]\n    ${InterfaceIndex},\n\n    [Parameter(ParameterSetName='ByInterfaceAlias')]\n    [Parameter(ParameterSetName='ByInterfaceIndex')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByInterfaceAlias')]\n    [Parameter(ParameterSetName='ByInterfaceIndex')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByInterfaceAlias')]\n    [Parameter(ParameterSetName='ByInterfaceIndex')]\n    [switch]\n    ${AsJob})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n      $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n\n      switch -exact ($PSCmdlet.ParameterSetName) { \n        { @('ByInterfaceAlias') -contains $_ } {\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('IPAddress')) {\n          [object]$__cmdletization_value = ${IPAddress}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IPAddress'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IPAddress'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('InterfaceAlias')) {\n          [object]$__cmdletization_value = ${InterfaceAlias}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InterfaceAlias'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InterfaceAlias'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('LinkLayerAddress')) {\n          [object]$__cmdletization_value = ${LinkLayerAddress}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LinkLayerAddress'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LinkLayerAddress'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('PolicyStore')) {\n          [object]$__cmdletization_value = ${PolicyStore}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('State')) {\n          [object]$__cmdletization_value = ${State}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'State'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetNeighbor.State'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'State'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetNeighbor.State'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('AddressFamily')) {\n          [object]$__cmdletization_value = ${AddressFamily}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AddressFamily'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetNeighbor.AddressFamily'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AddressFamily'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetNeighbor.AddressFamily'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'CmdletOutput'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'Out'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.UInt32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Create', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo)\n        }\n        { @('ByInterfaceIndex') -contains $_ } {\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('IPAddress')) {\n          [object]$__cmdletization_value = ${IPAddress}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IPAddress'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IPAddress'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('InterfaceIndex')) {\n          [object]$__cmdletization_value = ${InterfaceIndex}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InterfaceIndex'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InterfaceIndex'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('LinkLayerAddress')) {\n          [object]$__cmdletization_value = ${LinkLayerAddress}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LinkLayerAddress'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LinkLayerAddress'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('PolicyStore')) {\n          [object]$__cmdletization_value = ${PolicyStore}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_me"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-NetNeighbor"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-NetNeighbor"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-NetNeighbor"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-NetNeighbor"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4104,
      "details": "__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MaxValidLifetime'; ParameterType = 'System.TimeSpan'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('MaxTemporaryPreferredLifetime')) {\n            [object]$__cmdletization_value = ${MaxTemporaryPreferredLifetime}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MaxPreferredLifetime'; ParameterType = 'System.TimeSpan'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MaxPreferredLifetime'; ParameterType = 'System.TimeSpan'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('TemporaryRegenerateTime')) {\n            [object]$__cmdletization_value = ${TemporaryRegenerateTime}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RegenerateTime'; ParameterType = 'System.TimeSpan'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RegenerateTime'; ParameterType = 'System.TimeSpan'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('MaxTemporaryDesyncTime')) {\n            [object]$__cmdletization_value = ${MaxTemporaryDesyncTime}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MaxRandomTime'; ParameterType = 'System.TimeSpan'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MaxRandomTime'; ParameterType = 'System.TimeSpan'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n      $__cmdletization_returnValue = $null\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:ModifyInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru\n            if ($PSBoundParameters.ContainsKey('InputObject')) {\n                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }\n            } else {\n                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)\n            }\n        }\n    }\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP MSFT_NetIPv6Protocol.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Set-NetIPv6Protocol' -Alias '*'"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4104,
      "details": "[object]$__cmdletization_value = ${SourceRoutingBehavior}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SourceRoutingBehavior'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.SourceRoutingBehavior'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SourceRoutingBehavior'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.SourceRoutingBehavior'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('DhcpMediaSense')) {\n            [object]$__cmdletization_value = ${DhcpMediaSense}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DhcpMediaSense'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.DhcpMediaSense'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DhcpMediaSense'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.DhcpMediaSense'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('MediaSenseEventLog')) {\n            [object]$__cmdletization_value = ${MediaSenseEventLog}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MediaSenseEventLog'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.MediaSenseEventLog'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MediaSenseEventLog'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.MediaSenseEventLog'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('MldLevel')) {\n            [object]$__cmdletization_value = ${MldLevel}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MldLevel'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.MldLevel'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MldLevel'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.MldLevel'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('MldVersion')) {\n            [object]$__cmdletization_value = ${MldVersion}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MldVersion'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.MldVersion'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MldVersion'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.MldVersion'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('MulticastForwarding')) {\n            [object]$__cmdletization_value = ${MulticastForwarding}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MulticastForwarding'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.MulticastForwarding'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MulticastForwarding'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.MulticastForwarding'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('GroupForwardedFragments')) {\n            [object]$__cmdletization_value = ${GroupForwardedFragments}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'GroupForwardedFragments'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.GroupForwardedFragments'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'GroupForwardedFragments'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.GroupForwardedFragments'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('RandomizeIdentifiers')) {\n            [object]$__cmdletization_value = ${RandomizeIdentifiers}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RandomizeIdentifiers'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.RandomizeIdentifiers'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RandomizeIdentifiers'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.RandomizeIdentifiers'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('AddressMaskReply')) {\n            [object]$__cmdletization_value = ${AddressMaskReply}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AddressMaskReply'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.AddressMaskReply'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AddressMaskReply'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.AddressMaskReply'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('DeadGatewayDetection')) {\n            [object]$__cmdletization_value = ${DeadGatewayDetection}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DeadGatewayDetection'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.DeadGatewayDetection'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DeadGatewayDetection'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.DeadGatewayDetection'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('UseTemporaryAddresses')) {\n            [object]$__cmdletization_value = ${UseTemporaryAddresses}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'UseTemporaryAddresses'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.UseTemporaryAddresses'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'UseTemporaryAddresses'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.UseTemporaryAddresses'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('MaxTemporaryDadAttempts')) {\n            [object]$__cmdletization_value = ${MaxTemporaryDadAttempts}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MaxDadAttempts'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MaxDadAttempts'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('MaxTemporaryValidLifetime')) {\n            [object]$__cmdletization_value = ${MaxTemporaryValidLifetime}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MaxValidLifetime'; ParameterType = 'System.TimeSpan'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4104,
      "details": "perty('MaxValidLifetime', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('MaxTemporaryPreferredLifetime') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${MaxTemporaryPreferredLifetime})\n        $__cmdletization_queryBuilder.FilterByProperty('MaxPreferredLifetime', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('TemporaryRegenerateTime') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${TemporaryRegenerateTime})\n        $__cmdletization_queryBuilder.FilterByProperty('RegenerateTime', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('MaxTemporaryDesyncTime') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${MaxTemporaryDesyncTime})\n        $__cmdletization_queryBuilder.FilterByProperty('MaxRandomTime', $__cmdletization_values, $false, 'Default')\n    }\n\n\n    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP MSFT_NetIPv6Protocol.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Get-NetIPv6Protocol' -Alias '*'\n        \n\nfunction Set-NetIPv6Protocol\n{\n    [CmdletBinding(DefaultParameterSetName='InputObject (cdxml)', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/StandardCimv2/MSFT_NetIPv6Protocol')]\n\n    param(\n    \n    [Parameter(ParameterSetName='InputObject (cdxml)', ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetIPv6Protocol')]\n    [ValidateNotNull()]\n    [ciminstance[]]\n    ${InputObject},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [uint32]\n    ${DefaultHopLimit},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('NeighborCacheLimit')]\n    [uint32]\n    ${NeighborCacheLimitEntries},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('RouteCacheLimit')]\n    [uint32]\n    ${RouteCacheLimitEntries},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('ReassemblyLimit')]\n    [uint32]\n    ${ReassemblyLimitBytes},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.IcmpRedirects]\n    ${IcmpRedirects},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.SourceRoutingBehavior]\n    ${SourceRoutingBehavior},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.DhcpMediaSense]\n    ${DhcpMediaSense},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.MediaSenseEventLog]\n    ${MediaSenseEventLog},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.MldLevel]\n    ${MldLevel},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.MldVersion]\n    ${MldVersion},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.MulticastForwarding]\n    ${MulticastForwarding},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.GroupForwardedFragments]\n    ${GroupForwardedFragments},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.RandomizeIdentifiers]\n    ${RandomizeIdentifiers},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.AddressMaskReply]\n    ${AddressMaskReply},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.DeadGatewayDetection]\n    ${DeadGatewayDetection},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.UseTemporaryAddresses]\n    ${UseTemporaryAddresses},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('MaxDadAttempts')]\n    [uint32]\n    ${MaxTemporaryDadAttempts},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('MaxValidLifetime')]\n    [timespan]\n    ${MaxTemporaryValidLifetime},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('MaxPreferredLifetime')]\n    [timespan]\n    ${MaxTemporaryPreferredLifetime},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('RegenerateTime')]\n    [timespan]\n    ${TemporaryRegenerateTime},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('MaxRandomTime')]\n    [timespan]\n    ${MaxTemporaryDesyncTime},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${AsJob},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${PassThru})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n\n\n    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n    switch -exact ($PSCmdlet.ParameterSetName) { \n        { @('InputObject (cdxml)') -contains $_ } {\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('DefaultHopLimit')) {\n            [object]$__cmdletization_value = ${DefaultHopLimit}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DefaultHopLimit'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DefaultHopLimit'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('NeighborCacheLimitEntries')) {\n            [object]$__cmdletization_value = ${NeighborCacheLimitEntries}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NeighborCacheLimit'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NeighborCacheLimit'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('RouteCacheLimitEntries')) {\n            [object]$__cmdletization_value = ${RouteCacheLimitEntries}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RouteCacheLimit'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RouteCacheLimit'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('ReassemblyLimitBytes')) {\n            [object]$__cmdletization_value = ${ReassemblyLimitBytes}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ReassemblyLimit'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ReassemblyLimit'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('IcmpRedirects')) {\n            [object]$__cmdletization_value = ${IcmpRedirects}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IcmpRedirects'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.IcmpRedirects'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IcmpRedirects'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.IcmpRedirects'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('SourceRoutingBehavior')) {"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4104,
      "details": "#requires -version 3.0\n\ntry { Microsoft.PowerShell.Core\\Set-StrictMode -Off } catch { }\n\n$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module\n\n$script:ClassName = 'ROOT/StandardCimv2/MSFT_NetIPv6Protocol'\n$script:ClassVersion = '1.0.0'\n$script:ModuleVersion = '1.0.0'\n$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]\n\n$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()\n\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function @()\n        \n\nfunction __cmdletization_BindCommonParameters\n{\n    param(\n        $__cmdletization_objectModelWrapper,\n        $myPSBoundParameters\n    )       \n                \n\n        if ($myPSBoundParameters.ContainsKey('CimSession')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('AsJob')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] \n        }\n                    \n\n}\n                \n\nfunction Get-NetIPv6Protocol\n{\n    [CmdletBinding(DefaultParameterSetName='ByName', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/StandardCimv2/MSFT_NetIPv6Protocol')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${DefaultHopLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Alias('NeighborCacheLimit')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${NeighborCacheLimitEntries},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Alias('RouteCacheLimit')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${RouteCacheLimitEntries},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Alias('ReassemblyLimit')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${ReassemblyLimitBytes},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.IcmpRedirects[]]\n    ${IcmpRedirects},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.SourceRoutingBehavior[]]\n    ${SourceRoutingBehavior},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.DhcpMediaSense[]]\n    ${DhcpMediaSense},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.MediaSenseEventLog[]]\n    ${MediaSenseEventLog},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.MldLevel[]]\n    ${MldLevel},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.MldVersion[]]\n    ${MldVersion},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.MulticastForwarding[]]\n    ${MulticastForwarding},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.GroupForwardedFragments[]]\n    ${GroupForwardedFragments},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.RandomizeIdentifiers[]]\n    ${RandomizeIdentifiers},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.AddressMaskReply[]]\n    ${AddressMaskReply},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.DeadGatewayDetection[]]\n    ${DeadGatewayDetection},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.UseTemporaryAddresses[]]\n    ${UseTemporaryAddresses},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Alias('MaxDadAttempts')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${MaxTemporaryDadAttempts},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Alias('MaxValidLifetime')]\n    [ValidateNotNull()]\n    [timespan[]]\n    ${MaxTemporaryValidLifetime},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Alias('MaxPreferredLifetime')]\n    [ValidateNotNull()]\n    [timespan[]]\n    ${MaxTemporaryPreferredLifetime},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Alias('RegenerateTime')]\n    [ValidateNotNull()]\n    [timespan[]]\n    ${TemporaryRegenerateTime},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Alias('MaxRandomTime')]\n    [ValidateNotNull()]\n    [timespan[]]\n    ${MaxTemporaryDesyncTime},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [switch]\n    ${AsJob})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('DefaultHopLimit') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DefaultHopLimit})\n        $__cmdletization_queryBuilder.FilterByProperty('DefaultHopLimit', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('NeighborCacheLimitEntries') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${NeighborCacheLimitEntries})\n        $__cmdletization_queryBuilder.FilterByProperty('NeighborCacheLimit', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('RouteCacheLimitEntries') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${RouteCacheLimitEntries})\n        $__cmdletization_queryBuilder.FilterByProperty('RouteCacheLimit', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('ReassemblyLimitBytes') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${ReassemblyLimitBytes})\n        $__cmdletization_queryBuilder.FilterByProperty('ReassemblyLimit', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('IcmpRedirects') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${IcmpRedirects})\n        $__cmdletization_queryBuilder.FilterByProperty('IcmpRedirects', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('SourceRoutingBehavior') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${SourceRoutingBehavior})\n        $__cmdletization_queryBuilder.FilterByProperty('SourceRoutingBehavior', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DhcpMediaSense') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DhcpMediaSense})\n        $__cmdletization_queryBuilder.FilterByProperty('DhcpMediaSense', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('MediaSenseEventLog') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${MediaSenseEventLog})\n        $__cmdletization_queryBuilder.FilterByProperty('MediaSenseEventLog', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('MldLevel') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${MldLevel})\n        $__cmdletization_queryBuilder.FilterByProperty('MldLevel', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('MldVersion') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${MldVersion})\n        $__cmdletization_queryBuilder.FilterByProperty('MldVersion', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('MulticastForwarding') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${MulticastForwarding})\n        $__cmdletization_queryBuilder.FilterByProperty('MulticastForwarding', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('GroupForwardedFragments') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${GroupForwardedFragments})\n        $__cmdletization_queryBuilder.FilterByProperty('GroupForwardedFragments', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('RandomizeIdentifiers') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${RandomizeIdentifiers})\n        $__cmdletization_queryBuilder.FilterByProperty('RandomizeIdentifiers', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AddressMaskReply') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${AddressMaskReply})\n        $__cmdletization_queryBuilder.FilterByProperty('AddressMaskReply', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DeadGatewayDetection') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DeadGatewayDetection})\n        $__cmdletization_queryBuilder.FilterByProperty('DeadGatewayDetection', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('UseTemporaryAddresses') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${UseTemporaryAddresses})\n        $__cmdletization_queryBuilder.FilterByProperty('UseTemporaryAddresses', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('MaxTemporaryDadAttempts') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${MaxTemporaryDadAttempts})\n        $__cmdletization_queryBuilder.FilterByProperty('MaxDadAttempts', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('MaxTemporaryValidLifetime') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${MaxTemporaryValidLifetime})\n        $__cmdletization_queryBuilder.FilterByPro"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-NetNeighbor"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-NetNeighbor"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-NetNeighbor"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-NetNeighbor"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4104,
      "details": "ultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('MinimumMtu')) {\n            [object]$__cmdletization_value = ${MinimumMtu}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MinimumMtu'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MinimumMtu'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n      $__cmdletization_returnValue = $null\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:ModifyInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru\n            if ($PSBoundParameters.ContainsKey('InputObject')) {\n                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }\n            } else {\n                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)\n            }\n        }\n    }\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP MSFT_NetIPv4Protocol.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Set-NetIPv4Protocol' -Alias '*'"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4104,
      "details": "letization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IcmpRedirects'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.IcmpRedirects'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('SourceRoutingBehavior')) {\n            [object]$__cmdletization_value = ${SourceRoutingBehavior}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SourceRoutingBehavior'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.SourceRoutingBehavior'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SourceRoutingBehavior'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.SourceRoutingBehavior'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('DhcpMediaSense')) {\n            [object]$__cmdletization_value = ${DhcpMediaSense}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DhcpMediaSense'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.DhcpMediaSense'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DhcpMediaSense'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.DhcpMediaSense'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('MediaSenseEventLog')) {\n            [object]$__cmdletization_value = ${MediaSenseEventLog}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MediaSenseEventLog'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.MediaSenseEventLog'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MediaSenseEventLog'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.MediaSenseEventLog'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('IGMPLevel')) {\n            [object]$__cmdletization_value = ${IGMPLevel}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MldLevel'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.MldLevel'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MldLevel'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.MldLevel'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('IGMPVersion')) {\n            [object]$__cmdletization_value = ${IGMPVersion}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MldVersion'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.MldVersion'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MldVersion'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.MldVersion'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('MulticastForwarding')) {\n            [object]$__cmdletization_value = ${MulticastForwarding}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MulticastForwarding'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.MulticastForwarding'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MulticastForwarding'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.MulticastForwarding'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('GroupForwardedFragments')) {\n            [object]$__cmdletization_value = ${GroupForwardedFragments}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'GroupForwardedFragments'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.GroupForwardedFragments'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'GroupForwardedFragments'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.GroupForwardedFragments'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('RandomizeIdentifiers')) {\n            [object]$__cmdletization_value = ${RandomizeIdentifiers}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RandomizeIdentifiers'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.RandomizeIdentifiers'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RandomizeIdentifiers'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.RandomizeIdentifiers'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('AddressMaskReply')) {\n            [object]$__cmdletization_value = ${AddressMaskReply}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AddressMaskReply'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.AddressMaskReply'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AddressMaskReply'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.AddressMaskReply'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('DeadGatewayDetection')) {\n            [object]$__cmdletization_value = ${DeadGatewayDetection}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DeadGatewayDetection'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.DeadGatewayDetection'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DeadGatewayDetection'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.DeadGatewayDetection'; Bindings = 'In'; Value = $__cmdletization_defa"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4104,
      "details": "on') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DeadGatewayDetection})\n        $__cmdletization_queryBuilder.FilterByProperty('DeadGatewayDetection', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('MinimumMtu') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${MinimumMtu})\n        $__cmdletization_queryBuilder.FilterByProperty('MinimumMtu', $__cmdletization_values, $false, 'Default')\n    }\n\n\n    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP MSFT_NetIPv4Protocol.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Get-NetIPv4Protocol' -Alias '*'\n        \n\nfunction Set-NetIPv4Protocol\n{\n    [CmdletBinding(DefaultParameterSetName='InputObject (cdxml)', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/StandardCimv2/MSFT_NetIPv4Protocol')]\n\n    param(\n    \n    [Parameter(ParameterSetName='InputObject (cdxml)', ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetIPv4Protocol')]\n    [ValidateNotNull()]\n    [ciminstance[]]\n    ${InputObject},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [uint32]\n    ${DefaultHopLimit},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('NeighborCacheLimit')]\n    [uint32]\n    ${NeighborCacheLimitEntries},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('RouteCacheLimit')]\n    [uint32]\n    ${RouteCacheLimitEntries},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('ReassemblyLimit')]\n    [uint32]\n    ${ReassemblyLimitBytes},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.IcmpRedirects]\n    ${IcmpRedirects},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.SourceRoutingBehavior]\n    ${SourceRoutingBehavior},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.DhcpMediaSense]\n    ${DhcpMediaSense},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.MediaSenseEventLog]\n    ${MediaSenseEventLog},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('MldLevel')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.MldLevel]\n    ${IGMPLevel},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('MldVersion')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.MldVersion]\n    ${IGMPVersion},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.MulticastForwarding]\n    ${MulticastForwarding},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.GroupForwardedFragments]\n    ${GroupForwardedFragments},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.RandomizeIdentifiers]\n    ${RandomizeIdentifiers},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.AddressMaskReply]\n    ${AddressMaskReply},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.DeadGatewayDetection]\n    ${DeadGatewayDetection},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [uint32]\n    ${MinimumMtu},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${AsJob},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${PassThru})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n\n\n    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n    switch -exact ($PSCmdlet.ParameterSetName) { \n        { @('InputObject (cdxml)') -contains $_ } {\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('DefaultHopLimit')) {\n            [object]$__cmdletization_value = ${DefaultHopLimit}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DefaultHopLimit'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DefaultHopLimit'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('NeighborCacheLimitEntries')) {\n            [object]$__cmdletization_value = ${NeighborCacheLimitEntries}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NeighborCacheLimit'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NeighborCacheLimit'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('RouteCacheLimitEntries')) {\n            [object]$__cmdletization_value = ${RouteCacheLimitEntries}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RouteCacheLimit'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RouteCacheLimit'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('ReassemblyLimitBytes')) {\n            [object]$__cmdletization_value = ${ReassemblyLimitBytes}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ReassemblyLimit'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ReassemblyLimit'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('IcmpRedirects')) {\n            [object]$__cmdletization_value = ${IcmpRedirects}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IcmpRedirects'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.IcmpRedirects'; Bindings = 'In'; Value = $__cmd"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4104,
      "details": "#requires -version 3.0\n\ntry { Microsoft.PowerShell.Core\\Set-StrictMode -Off } catch { }\n\n$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module\n\n$script:ClassName = 'ROOT/StandardCimv2/MSFT_NetIPv4Protocol'\n$script:ClassVersion = '1.0.0'\n$script:ModuleVersion = '1.0.0'\n$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]\n\n$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()\n\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function @()\n        \n\nfunction __cmdletization_BindCommonParameters\n{\n    param(\n        $__cmdletization_objectModelWrapper,\n        $myPSBoundParameters\n    )       \n                \n\n        if ($myPSBoundParameters.ContainsKey('CimSession')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('AsJob')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] \n        }\n                    \n\n}\n                \n\nfunction Get-NetIPv4Protocol\n{\n    [CmdletBinding(DefaultParameterSetName='ByName', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/StandardCimv2/MSFT_NetIPv4Protocol')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${DefaultHopLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Alias('NeighborCacheLimit')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${NeighborCacheLimitEntries},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Alias('RouteCacheLimit')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${RouteCacheLimitEntries},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Alias('ReassemblyLimit')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${ReassemblyLimitBytes},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.IcmpRedirects[]]\n    ${IcmpRedirects},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.SourceRoutingBehavior[]]\n    ${SourceRoutingBehavior},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.DhcpMediaSense[]]\n    ${DhcpMediaSense},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.MediaSenseEventLog[]]\n    ${MediaSenseEventLog},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Alias('MldLevel')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.MldLevel[]]\n    ${IGMPLevel},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Alias('MldVersion')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.MldVersion[]]\n    ${IGMPVersion},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.MulticastForwarding[]]\n    ${MulticastForwarding},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.GroupForwardedFragments[]]\n    ${GroupForwardedFragments},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.RandomizeIdentifiers[]]\n    ${RandomizeIdentifiers},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.AddressMaskReply[]]\n    ${AddressMaskReply},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.DeadGatewayDetection[]]\n    ${DeadGatewayDetection},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${MinimumMtu},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [switch]\n    ${AsJob})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('DefaultHopLimit') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DefaultHopLimit})\n        $__cmdletization_queryBuilder.FilterByProperty('DefaultHopLimit', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('NeighborCacheLimitEntries') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${NeighborCacheLimitEntries})\n        $__cmdletization_queryBuilder.FilterByProperty('NeighborCacheLimit', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('RouteCacheLimitEntries') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${RouteCacheLimitEntries})\n        $__cmdletization_queryBuilder.FilterByProperty('RouteCacheLimit', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('ReassemblyLimitBytes') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${ReassemblyLimitBytes})\n        $__cmdletization_queryBuilder.FilterByProperty('ReassemblyLimit', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('IcmpRedirects') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${IcmpRedirects})\n        $__cmdletization_queryBuilder.FilterByProperty('IcmpRedirects', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('SourceRoutingBehavior') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${SourceRoutingBehavior})\n        $__cmdletization_queryBuilder.FilterByProperty('SourceRoutingBehavior', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DhcpMediaSense') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DhcpMediaSense})\n        $__cmdletization_queryBuilder.FilterByProperty('DhcpMediaSense', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('MediaSenseEventLog') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${MediaSenseEventLog})\n        $__cmdletization_queryBuilder.FilterByProperty('MediaSenseEventLog', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('IGMPLevel') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${IGMPLevel})\n        $__cmdletization_queryBuilder.FilterByProperty('MldLevel', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('IGMPVersion') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${IGMPVersion})\n        $__cmdletization_queryBuilder.FilterByProperty('MldVersion', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('MulticastForwarding') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${MulticastForwarding})\n        $__cmdletization_queryBuilder.FilterByProperty('MulticastForwarding', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('GroupForwardedFragments') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${GroupForwardedFragments})\n        $__cmdletization_queryBuilder.FilterByProperty('GroupForwardedFragments', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('RandomizeIdentifiers') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${RandomizeIdentifiers})\n        $__cmdletization_queryBuilder.FilterByProperty('RandomizeIdentifiers', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AddressMaskReply') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${AddressMaskReply})\n        $__cmdletization_queryBuilder.FilterByProperty('AddressMaskReply', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DeadGatewayDetecti"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-NetNeighbor"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-NetNeighbor"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-NetNeighbor"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-NetNeighbor"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4104,
      "details": "ization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('EcnMarking')) {\n            [object]$__cmdletization_value = ${EcnMarking}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EcnMarking'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.EcnMarking'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EcnMarking'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.EcnMarking'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('Dhcp')) {\n            [object]$__cmdletization_value = ${Dhcp}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Dhcp'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.Dhcp'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Dhcp'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.Dhcp'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('AutomaticMetric')) {\n            [object]$__cmdletization_value = ${AutomaticMetric}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AutomaticMetric'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.AutomaticMetric'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AutomaticMetric'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.AutomaticMetric'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n      $__cmdletization_returnValue = $null\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:ModifyInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru\n            if ($PSBoundParameters.ContainsKey('InputObject')) {\n                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }\n            } else {\n                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)\n            }\n        }\n    }\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP MSFT_NetIPInterface.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Set-NetIPInterface' -Alias '*'"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4104,
      "details": "$__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RetransmitTime'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RetransmitTime'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('DadTransmits')) {\n            [object]$__cmdletization_value = ${DadTransmits}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DadTransmits'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DadTransmits'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('DadRetransmitTimeMs')) {\n            [object]$__cmdletization_value = ${DadRetransmitTimeMs}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DadRetransmitTime'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DadRetransmitTime'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('RouterDiscovery')) {\n            [object]$__cmdletization_value = ${RouterDiscovery}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RouterDiscovery'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.RouterDiscovery'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RouterDiscovery'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.RouterDiscovery'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('ManagedAddressConfiguration')) {\n            [object]$__cmdletization_value = ${ManagedAddressConfiguration}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ManagedAddressConfiguration'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.ManagedAddressConfiguration'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ManagedAddressConfiguration'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.ManagedAddressConfiguration'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('OtherStatefulConfiguration')) {\n            [object]$__cmdletization_value = ${OtherStatefulConfiguration}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'OtherStatefulConfiguration'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.OtherStatefulConfiguration'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'OtherStatefulConfiguration'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.OtherStatefulConfiguration'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('WeakHostSend')) {\n            [object]$__cmdletization_value = ${WeakHostSend}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'WeakHostSend'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.WeakHostSend'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'WeakHostSend'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.WeakHostSend'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('WeakHostReceive')) {\n            [object]$__cmdletization_value = ${WeakHostReceive}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'WeakHostReceive'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.WeakHostReceive'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'WeakHostReceive'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.WeakHostReceive'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('IgnoreDefaultRoutes')) {\n            [object]$__cmdletization_value = ${IgnoreDefaultRoutes}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IgnoreDefaultRoutes'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.IgnoreDefaultRoutes'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IgnoreDefaultRoutes'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.IgnoreDefaultRoutes'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('AdvertisedRouterLifetime')) {\n            [object]$__cmdletization_value = ${AdvertisedRouterLifetime}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AdvertisedRouterLifetime'; ParameterType = 'System.TimeSpan'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AdvertisedRouterLifetime'; ParameterType = 'System.TimeSpan'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('AdvertiseDefaultRoute')) {\n            [object]$__cmdletization_value = ${AdvertiseDefaultRoute}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AdvertiseDefaultRoute'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.AdvertiseDefaultRoute'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AdvertiseDefaultRoute'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.AdvertiseDefaultRoute'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('CurrentHopLimit')) {\n            [object]$__cmdletization_value = ${CurrentHopLimit}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'CurrentHopLimit'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'CurrentHopLimit'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('ForceArpNdWolPattern')) {\n            [object]$__cmdletization_value = ${ForceArpNdWolPattern}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ForceArpNdWolPattern'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.ForceArpNdWolPattern'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ForceArpNdWolPattern'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.ForceArpNdWolPattern'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('DirectedMacWolPattern')) {\n            [object]$__cmdletization_value = ${DirectedMacWolPattern}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DirectedMacWolPattern'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.DirectedMacWolPattern'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DirectedMacWolPattern'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.DirectedMacWolPattern'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdlet"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4104,
      "details": "Name='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.WeakHostReceive]\n    ${WeakHostReceive},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.IgnoreDefaultRoutes]\n    ${IgnoreDefaultRoutes},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [timespan]\n    ${AdvertisedRouterLifetime},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.AdvertiseDefaultRoute]\n    ${AdvertiseDefaultRoute},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [uint32]\n    ${CurrentHopLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.ForceArpNdWolPattern]\n    ${ForceArpNdWolPattern},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.DirectedMacWolPattern]\n    ${DirectedMacWolPattern},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.EcnMarking]\n    ${EcnMarking},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.Dhcp]\n    ${Dhcp},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.AutomaticMetric]\n    ${AutomaticMetric},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${AsJob},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${PassThru})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('InterfaceIndex') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${InterfaceIndex})\n        $__cmdletization_queryBuilder.FilterByProperty('InterfaceIndex', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('InterfaceAlias') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${InterfaceAlias})\n        $__cmdletization_queryBuilder.FilterByProperty('InterfaceAlias', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AddressFamily') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${AddressFamily})\n        $__cmdletization_queryBuilder.FilterByProperty('AddressFamily', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('ReachableTime') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${ReachableTime})\n        $__cmdletization_queryBuilder.FilterByProperty('ReachableTime', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('NeighborDiscoverySupported') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${NeighborDiscoverySupported})\n        $__cmdletization_queryBuilder.FilterByProperty('NeighborDiscoverySupported', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('CompartmentId') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${CompartmentId})\n        $__cmdletization_queryBuilder.FilterByProperty('CompartmentId', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})\n    }\n    if ($PSBoundParameters.ContainsKey('IncludeAllCompartments') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('IncludeAllCompartments', ${IncludeAllCompartments})\n    }\n\n\n    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n    switch -exact ($PSCmdlet.ParameterSetName) { \n        { @('ByName', 'InputObject (cdxml)') -contains $_ } {\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('Forwarding')) {\n            [object]$__cmdletization_value = ${Forwarding}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Forwarding'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.Forwarding'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Forwarding'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.Forwarding'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('ClampMss')) {\n            [object]$__cmdletization_value = ${ClampMss}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ClampMss'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.ClampMss'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ClampMss'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.ClampMss'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('Advertising')) {\n            [object]$__cmdletization_value = ${Advertising}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Advertising'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.Advertising'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Advertising'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.Advertising'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('NlMtuBytes')) {\n            [object]$__cmdletization_value = ${NlMtuBytes}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NlMtu'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NlMtu'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('InterfaceMetric')) {\n            [object]$__cmdletization_value = ${InterfaceMetric}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InterfaceMetric'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InterfaceMetric'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('NeighborUnreachabilityDetection')) {\n            [object]$__cmdletization_value = ${NeighborUnreachabilityDetection}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NeighborUnreachabilityDetection'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.NeighborUnreachabilityDetection'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NeighborUnreachabilityDetection'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.NeighborUnreachabilityDetection'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('BaseReachableTimeMs')) {\n            [object]$__cmdletization_value = ${BaseReachableTimeMs}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'BaseReachableTime'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'BaseReachableTime'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('RetransmitTimeMs')) {\n            [object]$__cmdletization_value = ${RetransmitTimeMs}"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4104,
      "details": "$__cmdletization_queryBuilder.FilterByProperty('BaseReachableTime', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('ReachableTimeMs') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${ReachableTimeMs})\n        $__cmdletization_queryBuilder.FilterByProperty('ReachableTime', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('RetransmitTimeMs') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${RetransmitTimeMs})\n        $__cmdletization_queryBuilder.FilterByProperty('RetransmitTime', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DadTransmits') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DadTransmits})\n        $__cmdletization_queryBuilder.FilterByProperty('DadTransmits', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DadRetransmitTimeMs') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DadRetransmitTimeMs})\n        $__cmdletization_queryBuilder.FilterByProperty('DadRetransmitTime', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('RouterDiscovery') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${RouterDiscovery})\n        $__cmdletization_queryBuilder.FilterByProperty('RouterDiscovery', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('ManagedAddressConfiguration') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${ManagedAddressConfiguration})\n        $__cmdletization_queryBuilder.FilterByProperty('ManagedAddressConfiguration', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('OtherStatefulConfiguration') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${OtherStatefulConfiguration})\n        $__cmdletization_queryBuilder.FilterByProperty('OtherStatefulConfiguration', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('WeakHostSend') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${WeakHostSend})\n        $__cmdletization_queryBuilder.FilterByProperty('WeakHostSend', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('WeakHostReceive') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${WeakHostReceive})\n        $__cmdletization_queryBuilder.FilterByProperty('WeakHostReceive', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('IgnoreDefaultRoutes') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${IgnoreDefaultRoutes})\n        $__cmdletization_queryBuilder.FilterByProperty('IgnoreDefaultRoutes', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AdvertisedRouterLifetime') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${AdvertisedRouterLifetime})\n        $__cmdletization_queryBuilder.FilterByProperty('AdvertisedRouterLifetime', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AdvertiseDefaultRoute') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${AdvertiseDefaultRoute})\n        $__cmdletization_queryBuilder.FilterByProperty('AdvertiseDefaultRoute', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('CurrentHopLimit') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${CurrentHopLimit})\n        $__cmdletization_queryBuilder.FilterByProperty('CurrentHopLimit', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('ForceArpNdWolPattern') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${ForceArpNdWolPattern})\n        $__cmdletization_queryBuilder.FilterByProperty('ForceArpNdWolPattern', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DirectedMacWolPattern') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DirectedMacWolPattern})\n        $__cmdletization_queryBuilder.FilterByProperty('DirectedMacWolPattern', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('EcnMarking') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${EcnMarking})\n        $__cmdletization_queryBuilder.FilterByProperty('EcnMarking', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Dhcp') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Dhcp})\n        $__cmdletization_queryBuilder.FilterByProperty('Dhcp', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('ConnectionState') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${ConnectionState})\n        $__cmdletization_queryBuilder.FilterByProperty('ConnectionState', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AutomaticMetric') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${AutomaticMetric})\n        $__cmdletization_queryBuilder.FilterByProperty('AutomaticMetric', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('NeighborDiscoverySupported') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${NeighborDiscoverySupported})\n        $__cmdletization_queryBuilder.FilterByProperty('NeighborDiscoverySupported', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('CompartmentId') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${CompartmentId})\n        $__cmdletization_queryBuilder.FilterByProperty('CompartmentId', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedRoute') -and (@('ByRoute') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedRoute}, 'MSFT_NetIPInterfaceRoute', 'Dependent', 'Antecedent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedIPAddress') -and (@('ByIPAddress') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedIPAddress}, 'MSFT_NetIPInterfaceIPAddress', 'Dependent', 'Antecedent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNeighbor') -and (@('ByNeighbor') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNeighbor}, 'MSFT_NetIPInterfaceNeighbor', 'Dependent', 'Antecedent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedAdapter') -and (@('ByAdapter') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedAdapter}, 'MSFT_NetIPInterfaceAdapter', 'Dependent', 'Antecedent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})\n    }\n    if ($PSBoundParameters.ContainsKey('IncludeAllCompartments') -and (@('ByName', 'ByRoute', 'ByIPAddress', 'ByNeighbor', 'ByAdapter') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('IncludeAllCompartments', ${IncludeAllCompartments})\n    }\n\n\n    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP MSFT_NetIPInterface.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Get-NetIPInterface' -Alias '*'\n        \n\nfunction Set-NetIPInterface\n{\n    [CmdletBinding(DefaultParameterSetName='ByName', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/StandardCimv2/MSFT_NetIPInterface')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByName', ValueFromPipelineByPropertyName=$true)]\n    [Alias('ifIndex')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${InterfaceIndex},\n\n    [Parameter(ParameterSetName='ByName', Position=0, ValueFromPipelineByPropertyName=$true)]\n    [Alias('ifAlias')]\n    [ValidateNotNull()]\n    [string[]]\n    ${InterfaceAlias},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.AddressFamily[]]\n    ${AddressFamily},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${ReachableTime},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.NeighborDiscoverySupported[]]\n    ${NeighborDiscoverySupported},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${CompartmentId},\n\n    [Parameter(ParameterSetName='ByName')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='ByName')]\n    [switch]\n    ${IncludeAllCompartments},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetIPInterface')]\n    [ValidateNotNull()]\n    [ciminstance[]]\n    ${InputObject},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.Forwarding]\n    ${Forwarding},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.ClampMss]\n    ${ClampMss},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.Advertising]\n    ${Advertising},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [uint32]\n    ${NlMtuBytes},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [uint32]\n    ${InterfaceMetric},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.NeighborUnreachabilityDetection]\n    ${NeighborUnreachabilityDetection},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('BaseReachableTime')]\n    [uint32]\n    ${BaseReachableTimeMs},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('RetransmitTime')]\n    [uint32]\n    ${RetransmitTimeMs},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [uint32]\n    ${DadTransmits},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('DadRetransmitTime')]\n    [uint32]\n    ${DadRetransmitTimeMs},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.RouterDiscovery]\n    ${RouterDiscovery},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.ManagedAddressConfiguration]\n    ${ManagedAddressConfiguration},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.OtherStatefulConfiguration]\n    ${OtherStatefulConfiguration},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.WeakHostSend]\n    ${WeakHostSend},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSet"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4104,
      "details": "#requires -version 3.0\n\ntry { Microsoft.PowerShell.Core\\Set-StrictMode -Off } catch { }\n\n$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module\n\n$script:ClassName = 'ROOT/StandardCimv2/MSFT_NetIPInterface'\n$script:ClassVersion = '1.0.0'\n$script:ModuleVersion = '1.0.0'\n$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]\n\n$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()\n\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function @()\n        \n\nfunction __cmdletization_BindCommonParameters\n{\n    param(\n        $__cmdletization_objectModelWrapper,\n        $myPSBoundParameters\n    )       \n                \n\n        if ($myPSBoundParameters.ContainsKey('CimSession')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('AsJob')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] \n        }\n                    \n\n}\n                \n\nfunction Get-NetIPInterface\n{\n    [CmdletBinding(DefaultParameterSetName='ByName', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/StandardCimv2/MSFT_NetIPInterface')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByName', ValueFromPipelineByPropertyName=$true)]\n    [Alias('ifIndex')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${InterfaceIndex},\n\n    [Parameter(ParameterSetName='ByName', Position=0, ValueFromPipelineByPropertyName=$true)]\n    [Alias('ifAlias')]\n    [ValidateNotNull()]\n    [string[]]\n    ${InterfaceAlias},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.AddressFamily[]]\n    ${AddressFamily},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.Forwarding[]]\n    ${Forwarding},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.ClampMss[]]\n    ${ClampMss},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.Advertising[]]\n    ${Advertising},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${NlMtuBytes},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${InterfaceMetric},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.NeighborUnreachabilityDetection[]]\n    ${NeighborUnreachabilityDetection},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Alias('BaseReachableTime')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${BaseReachableTimeMs},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Alias('ReachableTime')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${ReachableTimeMs},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Alias('RetransmitTime')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${RetransmitTimeMs},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${DadTransmits},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Alias('DadRetransmitTime')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${DadRetransmitTimeMs},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.RouterDiscovery[]]\n    ${RouterDiscovery},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.ManagedAddressConfiguration[]]\n    ${ManagedAddressConfiguration},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.OtherStatefulConfiguration[]]\n    ${OtherStatefulConfiguration},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.WeakHostSend[]]\n    ${WeakHostSend},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.WeakHostReceive[]]\n    ${WeakHostReceive},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.IgnoreDefaultRoutes[]]\n    ${IgnoreDefaultRoutes},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [timespan[]]\n    ${AdvertisedRouterLifetime},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.AdvertiseDefaultRoute[]]\n    ${AdvertiseDefaultRoute},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${CurrentHopLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.ForceArpNdWolPattern[]]\n    ${ForceArpNdWolPattern},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.DirectedMacWolPattern[]]\n    ${DirectedMacWolPattern},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.EcnMarking[]]\n    ${EcnMarking},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.Dhcp[]]\n    ${Dhcp},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.ConnectionState[]]\n    ${ConnectionState},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.AutomaticMetric[]]\n    ${AutomaticMetric},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.NeighborDiscoverySupported[]]\n    ${NeighborDiscoverySupported},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${CompartmentId},\n\n    [Parameter(ParameterSetName='ByRoute', ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetRoute')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedRoute},\n\n    [Parameter(ParameterSetName='ByIPAddress', ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIPAddress')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedIPAddress},\n\n    [Parameter(ParameterSetName='ByNeighbor', ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetNeighbor')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNeighbor},\n\n    [Parameter(ParameterSetName='ByAdapter', ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetAdapter')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedAdapter},\n\n    [Parameter(ParameterSetName='ByName')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByRoute')]\n    [Parameter(ParameterSetName='ByIPAddress')]\n    [Parameter(ParameterSetName='ByNeighbor')]\n    [Parameter(ParameterSetName='ByAdapter')]\n    [switch]\n    ${IncludeAllCompartments},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByRoute')]\n    [Parameter(ParameterSetName='ByIPAddress')]\n    [Parameter(ParameterSetName='ByNeighbor')]\n    [Parameter(ParameterSetName='ByAdapter')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByRoute')]\n    [Parameter(ParameterSetName='ByIPAddress')]\n    [Parameter(ParameterSetName='ByNeighbor')]\n    [Parameter(ParameterSetName='ByAdapter')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByRoute')]\n    [Parameter(ParameterSetName='ByIPAddress')]\n    [Parameter(ParameterSetName='ByNeighbor')]\n    [Parameter(ParameterSetName='ByAdapter')]\n    [switch]\n    ${AsJob})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('InterfaceIndex') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${InterfaceIndex})\n        $__cmdletization_queryBuilder.FilterByProperty('InterfaceIndex', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('InterfaceAlias') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${InterfaceAlias})\n        $__cmdletization_queryBuilder.FilterByProperty('InterfaceAlias', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AddressFamily') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${AddressFamily})\n        $__cmdletization_queryBuilder.FilterByProperty('AddressFamily', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Forwarding') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Forwarding})\n        $__cmdletization_queryBuilder.FilterByProperty('Forwarding', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('ClampMss') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${ClampMss})\n        $__cmdletization_queryBuilder.FilterByProperty('ClampMss', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Advertising') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Advertising})\n        $__cmdletization_queryBuilder.FilterByProperty('Advertising', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('NlMtuBytes') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${NlMtuBytes})\n        $__cmdletization_queryBuilder.FilterByProperty('NlMtu', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('InterfaceMetric') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${InterfaceMetric})\n        $__cmdletization_queryBuilder.FilterByProperty('InterfaceMetric', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('NeighborUnreachabilityDetection') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${NeighborUnreachabilityDetection})\n        $__cmdletization_queryBuilder.FilterByProperty('NeighborUnreachabilityDetection', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('BaseReachableTimeMs') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${BaseReachableTimeMs})"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-NetNeighbor"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-NetNeighbor"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-NetNeighbor"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-NetNeighbor"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-NetNeighbor"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-NetNeighbor"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4104,
      "details": "true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP MSFT_NetIPAddress.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Remove-NetIPAddress' -Alias '*'"
    }
  ],
  "PS-025": [
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4104,
      "details": "$global:?"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-Service"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Get-Service"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4104,
      "details": "Get-Service"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 40962,
      "details": "PowerShell console is ready for user input"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 53504,
      "details": "Windows PowerShell has started an IPC listening thread on process: 4776 in AppDomain: DefaultAppDomain."
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 40961,
      "details": "PowerShell console is starting up"
    }
  ],
  "PS-026": [
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4104,
      "details": "$global:?"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command sc.exe query"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4104,
      "details": "sc.exe query"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 40962,
      "details": "PowerShell console is ready for user input"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 53504,
      "details": "Windows PowerShell has started an IPC listening thread on process: 756 in AppDomain: DefaultAppDomain."
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 40961,
      "details": "PowerShell console is starting up"
    }
  ],
  "PS-027": [
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4104,
      "details": "$global:?"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command net start"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4104,
      "details": "net start"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 40962,
      "details": "PowerShell console is ready for user input"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 53504,
      "details": "Windows PowerShell has started an IPC listening thread on process: 8004 in AppDomain: DefaultAppDomain."
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 40961,
      "details": "PowerShell console is starting up"
    }
  ],
  "PS-029": [
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4104,
      "details": "$global:?"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command schtasks /query"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4104,
      "details": "schtasks /query"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 40962,
      "details": "PowerShell console is ready for user input"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 53504,
      "details": "Windows PowerShell has started an IPC listening thread on process: 1320 in AppDomain: DefaultAppDomain."
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 40961,
      "details": "PowerShell console is starting up"
    }
  ],
  "PS-030": [
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4104,
      "details": "$global:?"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command REG QUERY HKLM\\Software\\Microsoft\\Windows\\CurrentVersion"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4104,
      "details": "REG QUERY HKLM\\Software\\Microsoft\\Windows\\CurrentVersion"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 40962,
      "details": "PowerShell console is ready for user input"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 53504,
      "details": "Windows PowerShell has started an IPC listening thread on process: 1256 in AppDomain: DefaultAppDomain."
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 40961,
      "details": "PowerShell console is starting up"
    }
  ],
  "PS-031": [
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4104,
      "details": "$global:?"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command findstr 127.0.0.1 C:\\Windows\\System32\\drivers\\etc\\hosts"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4104,
      "details": "findstr 127.0.0.1 C:\\Windows\\System32\\drivers\\etc\\hosts"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 40962,
      "details": "PowerShell console is ready for user input"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 53504,
      "details": "Windows PowerShell has started an IPC listening thread on process: 2312 in AppDomain: DefaultAppDomain."
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 40961,
      "details": "PowerShell console is starting up"
    }
  ],
  "PS-032": [
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4104,
      "details": "$global:?"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command New-Item -Path C:\\Users\\Public\\Documents\\ -Name sentinel_test_file.txt -ItemType File"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command New-Item -Path C:\\Users\\Public\\Documents\\ -Name sentinel_test_file.txt -ItemType File"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4104,
      "details": "New-Item -Path C:\\Users\\Public\\Documents\\ -Name sentinel_test_file.txt -ItemType File"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 40962,
      "details": "PowerShell console is ready for user input"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 53504,
      "details": "Windows PowerShell has started an IPC listening thread on process: 7492 in AppDomain: DefaultAppDomain."
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 40961,
      "details": "PowerShell console is starting up"
    }
  ],
  "PS-033": [
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4104,
      "details": "$global:?"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Add-Content -Path C:\\Users\\Public\\Documents\\sentinel_test_log.log -Value log entry 1"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Add-Content -Path C:\\Users\\Public\\Documents\\sentinel_test_log.log -Value log entry 1"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4104,
      "details": "{ Set-StrictMode -Version 1; $_.OriginInfo }"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Add-Content -Path C:\\Users\\Public\\Documents\\sentinel_test_log.log -Value log entry 1"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4104,
      "details": "{ Set-StrictMode -Version 1; $_.ErrorCategory_Message }"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Add-Content -Path C:\\Users\\Public\\Documents\\sentinel_test_log.log -Value log entry 1"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4104,
      "details": "{ Set-StrictMode -Version 1; $this.Exception.InnerException.PSMessageDetails }"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Add-Content -Path C:\\Users\\Public\\Documents\\sentinel_test_log.log -Value log entry 1"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4104,
      "details": "{ Set-StrictMode -Version 1; $_.PSMessageDetails }"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4103,
      "details": "powershell.exe -Command Add-Content -Path C:\\Users\\Public\\Documents\\sentinel_test_log.log -Value log entry 1"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 4104,
      "details": "Add-Content -Path C:\\Users\\Public\\Documents\\sentinel_test_log.log -Value log entry 1"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 40962,
      "details": "PowerShell console is ready for user input"
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 53504,
      "details": "Windows PowerShell has started an IPC listening thread on process: 2504 in AppDomain: DefaultAppDomain."
    },
    {
      "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
      "event_id": 40961,
      "details": "PowerShell console is starting up"
    }
  ]
}