[
  {
    "_raw": "08/06/2025 05:18:12 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4104\nEventType=5\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Verbose\nRecordNumber=282\nKeywords=None\nTaskCategory=Execute a Remote Command\nOpCode=On create calls\nMessage=Creating Scriptblock text (1 of 1):\n$global:?\n\nScriptBlock ID: 9c851f92-0b2f-401f-a3c4-e1c436c4368d\nPath:",
    "_time": "2025-08-06T17:18:12.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:2313",
    "_indextime": "1754500693",
    "_serial": "0",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "19",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:18:12 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=281\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Out-Default): \"Out-Default\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 4038fde7-0ad6-43ac-a679-e12606dee1ed\n        Host Application = powershell.exe -Command hostname\n        Engine Version = 5.1.20348.3932\n        Runspace ID = 7d1d73ba-e862-4f07-82f0-01e6f4261849\n        Pipeline ID = 1\n        Command Name = \n        Command Type = Script\n        Script Name = \n        Command Path = \n        Sequence Number = 16\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:18:12.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:2278",
    "_indextime": "1754500693",
    "_serial": "1",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "37",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:18:12 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4104\nEventType=5\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Verbose\nRecordNumber=280\nKeywords=None\nTaskCategory=Execute a Remote Command\nOpCode=On create calls\nMessage=Creating Scriptblock text (1 of 1):\nhostname\n\nScriptBlock ID: 5a50e2c5-54e5-48f8-aef6-7603bf8803e1\nPath:",
    "_time": "2025-08-06T17:18:12.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:2262",
    "_indextime": "1754500693",
    "_serial": "2",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "19",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:18:12 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=40962\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=279\nKeywords=None\nTaskCategory=PowerShell Console Startup\nOpCode=Stop\nMessage=PowerShell console is ready for user input",
    "_time": "2025-08-06T17:18:12.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:2248",
    "_indextime": "1754500693",
    "_serial": "3",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "15",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:18:12 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=53504\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=278\nKeywords=None\nTaskCategory=PowerShell Named Pipe IPC\nOpCode=Open (async)\nMessage=Windows PowerShell has started an IPC listening thread on process: 1100 in AppDomain: DefaultAppDomain.",
    "_time": "2025-08-06T17:18:12.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:2232",
    "_indextime": "1754500693",
    "_serial": "4",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "15",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:18:11 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=40961\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=277\nKeywords=None\nTaskCategory=PowerShell Console Startup\nOpCode=Start\nMessage=PowerShell console is starting up",
    "_time": "2025-08-06T17:18:11.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:2218",
    "_indextime": "1754500693",
    "_serial": "5",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "15",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:18:49 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4104\nEventType=5\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Verbose\nRecordNumber=289\nKeywords=None\nTaskCategory=Execute a Remote Command\nOpCode=On create calls\nMessage=Creating Scriptblock text (1 of 1):\n$global:?\n\nScriptBlock ID: 6c9771fe-a187-4451-a330-1e849a4693f4\nPath:",
    "_time": "2025-08-06T17:18:49.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:2467",
    "_indextime": "1754500731",
    "_serial": "0",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "19",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:18:49 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=288\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Out-Default): \"Out-Default\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"Get-Process\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 9b195834-8444-4390-b7e2-809b095d4f75\n        Host Application = powershell.exe -Command Get-Command Get-Process\n        Engine Version = 5.1.20348.3932\n        Runspace ID = 06bfe1e9-0a2f-42ee-9f71-e56483a3076f\n        Pipeline ID = 1\n        Command Name = \n        Command Type = Script\n        Script Name = \n        Command Path = \n        Sequence Number = 18\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:18:49.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:2429",
    "_indextime": "1754500731",
    "_serial": "1",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "38",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:18:49 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=287\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Get-Command): \"Get-Command\"\nParameterBinding(Get-Command): name=\"Name\"; value=\"Get-Process\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 9b195834-8444-4390-b7e2-809b095d4f75\n        Host Application = powershell.exe -Command Get-Command Get-Process\n        Engine Version = 5.1.20348.3932\n        Runspace ID = 06bfe1e9-0a2f-42ee-9f71-e56483a3076f\n        Pipeline ID = 1\n        Command Name = Get-Command\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 16\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:18:49.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:2391",
    "_indextime": "1754500731",
    "_serial": "2",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "38",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:18:49 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4104\nEventType=5\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Verbose\nRecordNumber=286\nKeywords=None\nTaskCategory=Execute a Remote Command\nOpCode=On create calls\nMessage=Creating Scriptblock text (1 of 1):\nGet-Command Get-Process\n\nScriptBlock ID: 8815eb11-e496-4f57-84e7-9c366edab55d\nPath:",
    "_time": "2025-08-06T17:18:49.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:2374",
    "_indextime": "1754500729",
    "_serial": "3",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "19",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:18:49 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=40962\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=285\nKeywords=None\nTaskCategory=PowerShell Console Startup\nOpCode=Stop\nMessage=PowerShell console is ready for user input",
    "_time": "2025-08-06T17:18:49.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:2360",
    "_indextime": "1754500729",
    "_serial": "4",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "15",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:18:49 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=53504\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=284\nKeywords=None\nTaskCategory=PowerShell Named Pipe IPC\nOpCode=Open (async)\nMessage=Windows PowerShell has started an IPC listening thread on process: 3912 in AppDomain: DefaultAppDomain.",
    "_time": "2025-08-06T17:18:49.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:2344",
    "_indextime": "1754500729",
    "_serial": "5",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "15",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:18:49 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=40961\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=283\nKeywords=None\nTaskCategory=PowerShell Console Startup\nOpCode=Start\nMessage=PowerShell console is starting up",
    "_time": "2025-08-06T17:18:49.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:2330",
    "_indextime": "1754500729",
    "_serial": "6",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "15",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:19:06 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4104\nEventType=5\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Verbose\nRecordNumber=296\nKeywords=None\nTaskCategory=Execute a Remote Command\nOpCode=On create calls\nMessage=Creating Scriptblock text (1 of 1):\n$global:?\n\nScriptBlock ID: 833c2997-6a7d-433c-99ea-1287b4232de0\nPath:",
    "_time": "2025-08-06T17:19:06.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:2614",
    "_indextime": "1754500748",
    "_serial": "0",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "19",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:19:06 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=295\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Out-Default): \"Out-Default\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = b00a19d1-ead0-4158-bcb8-93552f662de2\n        Host Application = powershell.exe -Command Get-Module\n        Engine Version = 5.1.20348.3932\n        Runspace ID = 9e00bf07-432a-4428-b398-0836acd7050a\n        Pipeline ID = 1\n        Command Name = \n        Command Type = Script\n        Script Name = \n        Command Path = \n        Sequence Number = 18\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:19:06.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:2579",
    "_indextime": "1754500748",
    "_serial": "1",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "37",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:19:06 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=294\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Get-Module): \"Get-Module\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = b00a19d1-ead0-4158-bcb8-93552f662de2\n        Host Application = powershell.exe -Command Get-Module\n        Engine Version = 5.1.20348.3932\n        Runspace ID = 9e00bf07-432a-4428-b398-0836acd7050a\n        Pipeline ID = 1\n        Command Name = Get-Module\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 16\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:19:06.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:2544",
    "_indextime": "1754500748",
    "_serial": "2",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "37",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:19:06 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4104\nEventType=5\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Verbose\nRecordNumber=293\nKeywords=None\nTaskCategory=Execute a Remote Command\nOpCode=On create calls\nMessage=Creating Scriptblock text (1 of 1):\nGet-Module\n\nScriptBlock ID: 079e03e8-c23d-4186-bcde-dc1fe064d6b6\nPath:",
    "_time": "2025-08-06T17:19:06.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:2528",
    "_indextime": "1754500748",
    "_serial": "3",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "19",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:19:06 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=40962\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=292\nKeywords=None\nTaskCategory=PowerShell Console Startup\nOpCode=Stop\nMessage=PowerShell console is ready for user input",
    "_time": "2025-08-06T17:19:06.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:2514",
    "_indextime": "1754500748",
    "_serial": "4",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "15",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:19:06 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=53504\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=291\nKeywords=None\nTaskCategory=PowerShell Named Pipe IPC\nOpCode=Open (async)\nMessage=Windows PowerShell has started an IPC listening thread on process: 2472 in AppDomain: DefaultAppDomain.",
    "_time": "2025-08-06T17:19:06.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:2498",
    "_indextime": "1754500748",
    "_serial": "5",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "15",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:19:06 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=40961\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=290\nKeywords=None\nTaskCategory=PowerShell Console Startup\nOpCode=Start\nMessage=PowerShell console is starting up",
    "_time": "2025-08-06T17:19:06.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:2484",
    "_indextime": "1754500748",
    "_serial": "6",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "15",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:19:24 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4104\nEventType=5\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Verbose\nRecordNumber=303\nKeywords=None\nTaskCategory=Execute a Remote Command\nOpCode=On create calls\nMessage=Creating Scriptblock text (1 of 1):\n$global:?\n\nScriptBlock ID: e70d3e7d-22a9-46e4-8016-e735bcbd5b62\nPath:",
    "_time": "2025-08-06T17:19:24.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:2863",
    "_indextime": "1754500765",
    "_serial": "0",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "19",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:19:24 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=302\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Out-Default): \"Out-Default\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"System.Collections.DictionaryEntry\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"System.Collections.DictionaryEntry\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"System.Collections.DictionaryEntry\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"System.Collections.DictionaryEntry\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"System.Collections.DictionaryEntry\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"System.Collections.DictionaryEntry\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"System.Collections.DictionaryEntry\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"System.Collections.DictionaryEntry\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"System.Collections.DictionaryEntry\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"System.Collections.DictionaryEntry\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"System.Collections.DictionaryEntry\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"System.Collections.DictionaryEntry\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"System.Collections.DictionaryEntry\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"System.Collections.DictionaryEntry\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"System.Collections.DictionaryEntry\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"System.Collections.DictionaryEntry\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"System.Collections.DictionaryEntry\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"System.Collections.DictionaryEntry\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"System.Collections.DictionaryEntry\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"System.Collections.DictionaryEntry\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"System.Collections.DictionaryEntry\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"System.Collections.DictionaryEntry\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"System.Collections.DictionaryEntry\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"System.Collections.DictionaryEntry\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"System.Collections.DictionaryEntry\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"System.Collections.DictionaryEntry\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"System.Collections.DictionaryEntry\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"System.Collections.DictionaryEntry\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"System.Collections.DictionaryEntry\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"System.Collections.DictionaryEntry\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"System.Collections.DictionaryEntry\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"System.Collections.DictionaryEntry\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"System.Collections.DictionaryEntry\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 673e71c0-6900-46ae-b9ea-f38f7de49a24\n        Host Application = powershell.exe -Command Get-ChildItem Env:\n        Engine Version = 5.1.20348.3932\n        Runspace ID = 24ff1c01-3b81-4e44-922f-bee40ebefa5b\n        Pipeline ID = 1\n        Command Name = \n        Command Type = Script\n        Script Name = \n        Command Path = \n        Sequence Number = 18\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:19:24.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:2730",
    "_indextime": "1754500765",
    "_serial": "1",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "70",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:19:24 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=301\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Get-ChildItem): \"Get-ChildItem\"\nParameterBinding(Get-ChildItem): name=\"Path\"; value=\"Env:\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 673e71c0-6900-46ae-b9ea-f38f7de49a24\n        Host Application = powershell.exe -Command Get-ChildItem Env:\n        Engine Version = 5.1.20348.3932\n        Runspace ID = 24ff1c01-3b81-4e44-922f-bee40ebefa5b\n        Pipeline ID = 1\n        Command Name = Get-ChildItem\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 16\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:19:24.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:2692",
    "_indextime": "1754500765",
    "_serial": "2",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "38",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:19:23 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4104\nEventType=5\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Verbose\nRecordNumber=300\nKeywords=None\nTaskCategory=Execute a Remote Command\nOpCode=On create calls\nMessage=Creating Scriptblock text (1 of 1):\nGet-ChildItem Env:\n\nScriptBlock ID: 7466de39-ec05-469a-9ac8-00f79d8010cf\nPath:",
    "_time": "2025-08-06T17:19:23.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:2675",
    "_indextime": "1754500765",
    "_serial": "3",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "19",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:19:23 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=40962\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=299\nKeywords=None\nTaskCategory=PowerShell Console Startup\nOpCode=Stop\nMessage=PowerShell console is ready for user input",
    "_time": "2025-08-06T17:19:23.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:2661",
    "_indextime": "1754500765",
    "_serial": "4",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "15",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:19:23 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=53504\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=298\nKeywords=None\nTaskCategory=PowerShell Named Pipe IPC\nOpCode=Open (async)\nMessage=Windows PowerShell has started an IPC listening thread on process: 7748 in AppDomain: DefaultAppDomain.",
    "_time": "2025-08-06T17:19:23.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:2645",
    "_indextime": "1754500765",
    "_serial": "5",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "15",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:19:23 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=40961\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=297\nKeywords=None\nTaskCategory=PowerShell Console Startup\nOpCode=Start\nMessage=PowerShell console is starting up",
    "_time": "2025-08-06T17:19:23.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:2631",
    "_indextime": "1754500765",
    "_serial": "6",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "15",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:19:41 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4104\nEventType=5\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Verbose\nRecordNumber=310\nKeywords=None\nTaskCategory=Execute a Remote Command\nOpCode=On create calls\nMessage=Creating Scriptblock text (1 of 1):\n$global:?\n\nScriptBlock ID: 55e63678-d64f-4f95-a73e-b75814e707f3\nPath:",
    "_time": "2025-08-06T17:19:41.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:3230",
    "_indextime": "1754500782",
    "_serial": "0",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "19",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:19:41 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=309\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Out-Default): \"Out-Default\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"ADFS\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"appcompat\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"apppatch\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"AppReadiness\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"assembly\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"bcastdvr\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"Boot\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"Branding\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"BrowserCore\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"CbsTemp\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"Containers\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"Cursors\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"debug\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"diagnostics\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"DiagTrack\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"DigitalLocker\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"Downloaded Program Files\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"drivers\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"en-US\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"Fonts\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"Globalization\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"Help\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"IdentityCRL\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"IME\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"ImmersiveControlPanel\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"INF\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"InputMethod\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"L2Schemas\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"LiveKernelReports\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"Logs\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"Media\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"Microsoft.NET\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"Migration\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"ModemLogs\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"OCR\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"OEM\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"Offline Web Pages\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"Panther\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"Performance\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"PLA\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"PolicyDefinitions\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"Prefetch\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"PrintDialog\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"Provisioning\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"Registration\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"RemotePackages\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"rescache\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"Resources\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"SchCache\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"schemas\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"security\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"ServiceProfiles\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"ServiceState\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"servicing\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"Setup\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"ShellComponents\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"ShellExperiences\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"SKB\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"SoftwareDistribution\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"Speech\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"Speech_OneCore\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"System\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"System32\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"SystemApps\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"SystemResources\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"SystemTemp\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"SysWOW64\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"TAPI\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"Tasks\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"Temp\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"tracing\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"twain_32\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"Vss\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"WaaS\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"Web\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"WinSxS\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"bfsvc.exe\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"bootstat.dat\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"DtcInstall.log\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"explorer.exe\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"HelpPane.exe\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"hh.exe\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"lsasetup.log\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"mib.bin\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"notepad.exe\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"PFRO.log\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"regedit.exe\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"ServerTurbine.xml\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"splwow64.exe\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"Sysmon.exe\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"SysmonDrv.sys\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"system.ini\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"twain_32.dll\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"win.ini\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"WindowsUpdate.log\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"winhlp32.exe\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"WMSysPr9.prx\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"write.exe\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 15073864-c937-4225-880e-973628008151\n        Host Application = powershell.exe -Command dir C:\\Windows\n        Engine Version = 5.1.20348.3932\n        Runspace ID = 0a6e18bc-c5a5-4bdf-b063-6d4f1afae690\n        Pipeline ID = 1\n        Command Name = \n        Command Type = Script\n        Script Name = \n        Command Path = \n        Sequence Number = 18\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:19:41.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:2979",
    "_indextime": "1754500782",
    "_serial": "1",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "135",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:19:41 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=308\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Get-ChildItem): \"Get-ChildItem\"\nParameterBinding(Get-ChildItem): name=\"Path\"; value=\"C:\\Windows\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 15073864-c937-4225-880e-973628008151\n        Host Application = powershell.exe -Command dir C:\\Windows\n        Engine Version = 5.1.20348.3932\n        Runspace ID = 0a6e18bc-c5a5-4bdf-b063-6d4f1afae690\n        Pipeline ID = 1\n        Command Name = Get-ChildItem\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 16\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:19:41.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:2941",
    "_indextime": "1754500782",
    "_serial": "2",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "38",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:19:41 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4104\nEventType=5\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Verbose\nRecordNumber=307\nKeywords=None\nTaskCategory=Execute a Remote Command\nOpCode=On create calls\nMessage=Creating Scriptblock text (1 of 1):\ndir C:\\Windows\n\nScriptBlock ID: 5fd9be41-063f-43a7-9800-f58fe5c453ed\nPath:",
    "_time": "2025-08-06T17:19:41.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:2924",
    "_indextime": "1754500782",
    "_serial": "3",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "19",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:19:41 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=40962\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=306\nKeywords=None\nTaskCategory=PowerShell Console Startup\nOpCode=Stop\nMessage=PowerShell console is ready for user input",
    "_time": "2025-08-06T17:19:41.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:2910",
    "_indextime": "1754500782",
    "_serial": "4",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "15",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:19:41 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=53504\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=305\nKeywords=None\nTaskCategory=PowerShell Named Pipe IPC\nOpCode=Open (async)\nMessage=Windows PowerShell has started an IPC listening thread on process: 7760 in AppDomain: DefaultAppDomain.",
    "_time": "2025-08-06T17:19:41.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:2894",
    "_indextime": "1754500782",
    "_serial": "5",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "15",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:19:41 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=40961\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=304\nKeywords=None\nTaskCategory=PowerShell Console Startup\nOpCode=Start\nMessage=PowerShell console is starting up",
    "_time": "2025-08-06T17:19:41.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:2880",
    "_indextime": "1754500782",
    "_serial": "6",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "15",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:19:59 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4104\nEventType=5\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Verbose\nRecordNumber=316\nKeywords=None\nTaskCategory=Execute a Remote Command\nOpCode=On create calls\nMessage=Creating Scriptblock text (1 of 1):\n$global:?\n\nScriptBlock ID: eb4fee83-1eb3-47d5-bbd5-0d2a880c405a\nPath:",
    "_time": "2025-08-06T17:19:59.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:3344",
    "_indextime": "1754500799",
    "_serial": "0",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "19",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:19:59 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=315\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Out-Default): \"Out-Default\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 67fa0947-7e8a-4706-af69-30a1df2f228d\n        Host Application = powershell.exe -Command tree /F C:\\Windows\\System32\\drivers\\etc\n        Engine Version = 5.1.20348.3932\n        Runspace ID = 569b3dde-fab2-4a0d-aebe-9f64222436a0\n        Pipeline ID = 1\n        Command Name = \n        Command Type = Script\n        Script Name = \n        Command Path = \n        Sequence Number = 16\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:19:59.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:3308",
    "_indextime": "1754500799",
    "_serial": "1",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "37",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:19:59 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4104\nEventType=5\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Verbose\nRecordNumber=314\nKeywords=None\nTaskCategory=Execute a Remote Command\nOpCode=On create calls\nMessage=Creating Scriptblock text (1 of 1):\ntree /F C:\\Windows\\System32\\drivers\\etc\n\nScriptBlock ID: 026887eb-9d5b-4344-8668-162e777fef67\nPath:",
    "_time": "2025-08-06T17:19:59.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:3291",
    "_indextime": "1754500799",
    "_serial": "2",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "19",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:19:58 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=40962\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=313\nKeywords=None\nTaskCategory=PowerShell Console Startup\nOpCode=Stop\nMessage=PowerShell console is ready for user input",
    "_time": "2025-08-06T17:19:58.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:3277",
    "_indextime": "1754500799",
    "_serial": "3",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "15",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:19:58 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=53504\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=312\nKeywords=None\nTaskCategory=PowerShell Named Pipe IPC\nOpCode=Open (async)\nMessage=Windows PowerShell has started an IPC listening thread on process: 7312 in AppDomain: DefaultAppDomain.",
    "_time": "2025-08-06T17:19:58.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:3261",
    "_indextime": "1754500799",
    "_serial": "4",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "15",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:19:58 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=40961\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=311\nKeywords=None\nTaskCategory=PowerShell Console Startup\nOpCode=Start\nMessage=PowerShell console is starting up",
    "_time": "2025-08-06T17:19:58.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:3247",
    "_indextime": "1754500799",
    "_serial": "5",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "15",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:20:16 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4104\nEventType=5\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Verbose\nRecordNumber=323\nKeywords=None\nTaskCategory=Execute a Remote Command\nOpCode=On create calls\nMessage=Creating Scriptblock text (1 of 1):\n$global:?\n\nScriptBlock ID: 19013f9a-22d4-4713-8f77-244fd767abae\nPath:",
    "_time": "2025-08-06T17:20:16.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:3563",
    "_indextime": "1754500817",
    "_serial": "0",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "19",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:20:16 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=322\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Out-Default): \"Out-Default\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"# Copyright (c) 1993-2009 Microsoft Corp.\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"#\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"# This is a sample HOSTS file used by Microsoft TCP/IP for Windows.\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"#\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"# This file contains the mappings of IP addresses to host names. Each\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"# entry should be kept on an individual line. The IP address should\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"# be placed in the first column followed by the corresponding host name.\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"# The IP address and the host name should be separated by at least one\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"# space.\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"#\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"# Additionally, comments (such as these) may be inserted on individual\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"# lines or following the machine name denoted by a '#' symbol.\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"#\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"# For example:\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"#\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"#      102.54.94.97     rhino.acme.com          # source server\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"#       38.25.63.10     x.acme.com              # x client host\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"# localhost name resolution is handled within DNS itself.\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"#\t127.0.0.1       localhost\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"#\t::1             localhost\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 001d3132-2f61-4f26-8acd-f7a7baba5d8b\n        Host Application = powershell.exe -Command Get-Content C:\\Windows\\System32\\drivers\\etc\\hosts\n        Engine Version = 5.1.20348.3932\n        Runspace ID = d019b4e9-c2cc-4baa-8966-1bff66b04ada\n        Pipeline ID = 1\n        Command Name = \n        Command Type = Script\n        Script Name = \n        Command Path = \n        Sequence Number = 18\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:20:16.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:3462",
    "_indextime": "1754500817",
    "_serial": "1",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "58",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:20:16 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=321\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Get-Content): \"Get-Content\"\nParameterBinding(Get-Content): name=\"Path\"; value=\"C:\\Windows\\System32\\drivers\\etc\\hosts\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 001d3132-2f61-4f26-8acd-f7a7baba5d8b\n        Host Application = powershell.exe -Command Get-Content C:\\Windows\\System32\\drivers\\etc\\hosts\n        Engine Version = 5.1.20348.3932\n        Runspace ID = d019b4e9-c2cc-4baa-8966-1bff66b04ada\n        Pipeline ID = 1\n        Command Name = Get-Content\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 16\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:20:16.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:3423",
    "_indextime": "1754500817",
    "_serial": "2",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "38",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:20:16 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4104\nEventType=5\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Verbose\nRecordNumber=320\nKeywords=None\nTaskCategory=Execute a Remote Command\nOpCode=On create calls\nMessage=Creating Scriptblock text (1 of 1):\nGet-Content C:\\Windows\\System32\\drivers\\etc\\hosts\n\nScriptBlock ID: ba912491-5cfd-4a19-b991-5a04e483d0e9\nPath:",
    "_time": "2025-08-06T17:20:16.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:3405",
    "_indextime": "1754500817",
    "_serial": "3",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "19",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:20:16 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=40962\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=319\nKeywords=None\nTaskCategory=PowerShell Console Startup\nOpCode=Stop\nMessage=PowerShell console is ready for user input",
    "_time": "2025-08-06T17:20:16.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:3391",
    "_indextime": "1754500817",
    "_serial": "4",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "15",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:20:16 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=53504\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=318\nKeywords=None\nTaskCategory=PowerShell Named Pipe IPC\nOpCode=Open (async)\nMessage=Windows PowerShell has started an IPC listening thread on process: 3944 in AppDomain: DefaultAppDomain.",
    "_time": "2025-08-06T17:20:16.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:3375",
    "_indextime": "1754500817",
    "_serial": "5",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "15",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:20:16 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=40961\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=317\nKeywords=None\nTaskCategory=PowerShell Console Startup\nOpCode=Start\nMessage=PowerShell console is starting up",
    "_time": "2025-08-06T17:20:16.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:3361",
    "_indextime": "1754500816",
    "_serial": "6",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "15",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:20:33 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4104\nEventType=5\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Verbose\nRecordNumber=329\nKeywords=None\nTaskCategory=Execute a Remote Command\nOpCode=On create calls\nMessage=Creating Scriptblock text (1 of 1):\n$global:?\n\nScriptBlock ID: 1803bfde-b3a6-4223-93c3-6d7fd3ae96f0\nPath:",
    "_time": "2025-08-06T17:20:33.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:3675",
    "_indextime": "1754500834",
    "_serial": "0",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "19",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:20:33 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=328\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Out-Default): \"Out-Default\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 1b8bb0d9-1b66-4fb5-9a49-745e2d2a5f62\n        Host Application = powershell.exe -Command whoami\n        Engine Version = 5.1.20348.3932\n        Runspace ID = 2cfad2aa-9d01-42ee-9728-5c672005362f\n        Pipeline ID = 1\n        Command Name = \n        Command Type = Script\n        Script Name = \n        Command Path = \n        Sequence Number = 16\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:20:33.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:3640",
    "_indextime": "1754500834",
    "_serial": "1",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "37",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:20:33 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4104\nEventType=5\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Verbose\nRecordNumber=327\nKeywords=None\nTaskCategory=Execute a Remote Command\nOpCode=On create calls\nMessage=Creating Scriptblock text (1 of 1):\nwhoami\n\nScriptBlock ID: 04c3ba9e-6c34-4e2b-bf04-1f6d6acd44c8\nPath:",
    "_time": "2025-08-06T17:20:33.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:3624",
    "_indextime": "1754500834",
    "_serial": "2",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "19",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:20:33 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=40962\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=326\nKeywords=None\nTaskCategory=PowerShell Console Startup\nOpCode=Stop\nMessage=PowerShell console is ready for user input",
    "_time": "2025-08-06T17:20:33.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:3610",
    "_indextime": "1754500834",
    "_serial": "3",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "15",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:20:33 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=53504\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=325\nKeywords=None\nTaskCategory=PowerShell Named Pipe IPC\nOpCode=Open (async)\nMessage=Windows PowerShell has started an IPC listening thread on process: 6636 in AppDomain: DefaultAppDomain.",
    "_time": "2025-08-06T17:20:33.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:3594",
    "_indextime": "1754500834",
    "_serial": "4",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "15",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:20:33 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=40961\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=324\nKeywords=None\nTaskCategory=PowerShell Console Startup\nOpCode=Start\nMessage=PowerShell console is starting up",
    "_time": "2025-08-06T17:20:33.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:3580",
    "_indextime": "1754500834",
    "_serial": "5",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "15",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:20:50 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4104\nEventType=5\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Verbose\nRecordNumber=335\nKeywords=None\nTaskCategory=Execute a Remote Command\nOpCode=On create calls\nMessage=Creating Scriptblock text (1 of 1):\n$global:?\n\nScriptBlock ID: 19f021cf-afed-4e23-bbe7-1a910a369042\nPath:",
    "_time": "2025-08-06T17:20:50.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:3788",
    "_indextime": "1754500851",
    "_serial": "0",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "19",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:20:50 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=334\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Out-Default): \"Out-Default\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 8cb495e8-8b7b-48cf-a0b9-f8f3b3d60884\n        Host Application = powershell.exe -Command whoami /priv\n        Engine Version = 5.1.20348.3932\n        Runspace ID = 74c419b9-18cd-48be-950d-5c57045ae582\n        Pipeline ID = 1\n        Command Name = \n        Command Type = Script\n        Script Name = \n        Command Path = \n        Sequence Number = 16\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:20:50.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:3753",
    "_indextime": "1754500851",
    "_serial": "1",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "37",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:20:50 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4104\nEventType=5\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Verbose\nRecordNumber=333\nKeywords=None\nTaskCategory=Execute a Remote Command\nOpCode=On create calls\nMessage=Creating Scriptblock text (1 of 1):\nwhoami /priv\n\nScriptBlock ID: 0db73b30-d19e-4610-a6b0-e4befd3df63b\nPath:",
    "_time": "2025-08-06T17:20:50.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:3736",
    "_indextime": "1754500851",
    "_serial": "2",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "19",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:20:50 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=40962\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=332\nKeywords=None\nTaskCategory=PowerShell Console Startup\nOpCode=Stop\nMessage=PowerShell console is ready for user input",
    "_time": "2025-08-06T17:20:50.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:3722",
    "_indextime": "1754500851",
    "_serial": "3",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "15",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:20:50 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=53504\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=331\nKeywords=None\nTaskCategory=PowerShell Named Pipe IPC\nOpCode=Open (async)\nMessage=Windows PowerShell has started an IPC listening thread on process: 8184 in AppDomain: DefaultAppDomain.",
    "_time": "2025-08-06T17:20:50.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:3706",
    "_indextime": "1754500851",
    "_serial": "4",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "15",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:20:50 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=40961\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=330\nKeywords=None\nTaskCategory=PowerShell Console Startup\nOpCode=Start\nMessage=PowerShell console is starting up",
    "_time": "2025-08-06T17:20:50.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:3692",
    "_indextime": "1754500851",
    "_serial": "5",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "15",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:21:07 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4104\nEventType=5\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Verbose\nRecordNumber=341\nKeywords=None\nTaskCategory=Execute a Remote Command\nOpCode=On create calls\nMessage=Creating Scriptblock text (1 of 1):\n$global:?\n\nScriptBlock ID: 10036632-2fe1-40d8-9228-c133805ccad2\nPath:",
    "_time": "2025-08-06T17:21:07.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:3901",
    "_indextime": "1754500868",
    "_serial": "0",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "19",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:21:07 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=340\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Out-Default): \"Out-Default\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 9bb38337-7775-4739-9b65-8926ab18a732\n        Host Application = powershell.exe -Command whoami /groups\n        Engine Version = 5.1.20348.3932\n        Runspace ID = 6eeb6708-cb89-4d6e-8935-439e8de11fbc\n        Pipeline ID = 1\n        Command Name = \n        Command Type = Script\n        Script Name = \n        Command Path = \n        Sequence Number = 16\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:21:07.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:3866",
    "_indextime": "1754500868",
    "_serial": "1",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "37",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:21:07 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4104\nEventType=5\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Verbose\nRecordNumber=339\nKeywords=None\nTaskCategory=Execute a Remote Command\nOpCode=On create calls\nMessage=Creating Scriptblock text (1 of 1):\nwhoami /groups\n\nScriptBlock ID: 9f71f578-47be-4092-8730-026b4c6198f8\nPath:",
    "_time": "2025-08-06T17:21:07.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:3849",
    "_indextime": "1754500868",
    "_serial": "2",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "19",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:21:07 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=40962\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=338\nKeywords=None\nTaskCategory=PowerShell Console Startup\nOpCode=Stop\nMessage=PowerShell console is ready for user input",
    "_time": "2025-08-06T17:21:07.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:3835",
    "_indextime": "1754500868",
    "_serial": "3",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "15",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:21:07 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=53504\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=337\nKeywords=None\nTaskCategory=PowerShell Named Pipe IPC\nOpCode=Open (async)\nMessage=Windows PowerShell has started an IPC listening thread on process: 7204 in AppDomain: DefaultAppDomain.",
    "_time": "2025-08-06T17:21:07.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:3819",
    "_indextime": "1754500868",
    "_serial": "4",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "15",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:21:07 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=40961\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=336\nKeywords=None\nTaskCategory=PowerShell Console Startup\nOpCode=Start\nMessage=PowerShell console is starting up",
    "_time": "2025-08-06T17:21:07.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:3805",
    "_indextime": "1754500868",
    "_serial": "5",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "15",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:21:25 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4104\nEventType=5\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Verbose\nRecordNumber=347\nKeywords=None\nTaskCategory=Execute a Remote Command\nOpCode=On create calls\nMessage=Creating Scriptblock text (1 of 1):\n$global:?\n\nScriptBlock ID: eda1c14e-7461-4835-bf7e-a63016edd182\nPath:",
    "_time": "2025-08-06T17:21:25.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:4013",
    "_indextime": "1754500885",
    "_serial": "0",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "19",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:21:25 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=346\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Out-Default): \"Out-Default\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 06456676-0771-4f58-85b4-9acc0be81c1e\n        Host Application = powershell.exe -Command net user\n        Engine Version = 5.1.20348.3932\n        Runspace ID = f2988497-112b-482b-9990-6872b68dd784\n        Pipeline ID = 1\n        Command Name = \n        Command Type = Script\n        Script Name = \n        Command Path = \n        Sequence Number = 16\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:21:25.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:3978",
    "_indextime": "1754500885",
    "_serial": "1",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "37",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:21:25 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4104\nEventType=5\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Verbose\nRecordNumber=345\nKeywords=None\nTaskCategory=Execute a Remote Command\nOpCode=On create calls\nMessage=Creating Scriptblock text (1 of 1):\nnet user\n\nScriptBlock ID: 42b1f469-72d9-4dd0-9134-8d183e425aae\nPath:",
    "_time": "2025-08-06T17:21:25.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:3962",
    "_indextime": "1754500885",
    "_serial": "2",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "19",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:21:24 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=40962\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=344\nKeywords=None\nTaskCategory=PowerShell Console Startup\nOpCode=Stop\nMessage=PowerShell console is ready for user input",
    "_time": "2025-08-06T17:21:24.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:3948",
    "_indextime": "1754500885",
    "_serial": "3",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "15",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:21:24 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=53504\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=343\nKeywords=None\nTaskCategory=PowerShell Named Pipe IPC\nOpCode=Open (async)\nMessage=Windows PowerShell has started an IPC listening thread on process: 1660 in AppDomain: DefaultAppDomain.",
    "_time": "2025-08-06T17:21:24.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:3932",
    "_indextime": "1754500885",
    "_serial": "4",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "15",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:21:24 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=40961\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=342\nKeywords=None\nTaskCategory=PowerShell Console Startup\nOpCode=Start\nMessage=PowerShell console is starting up",
    "_time": "2025-08-06T17:21:24.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:3918",
    "_indextime": "1754500885",
    "_serial": "5",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "15",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:21:42 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4104\nEventType=5\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Verbose\nRecordNumber=353\nKeywords=None\nTaskCategory=Execute a Remote Command\nOpCode=On create calls\nMessage=Creating Scriptblock text (1 of 1):\n$global:?\n\nScriptBlock ID: 42b2fd4d-160c-436b-9fb3-2f1f08694a13\nPath:",
    "_time": "2025-08-06T17:21:42.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:4126",
    "_indextime": "1754500903",
    "_serial": "0",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "19",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:21:42 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=352\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Out-Default): \"Out-Default\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 4b631f85-3090-451d-9623-be321e36df22\n        Host Application = powershell.exe -Command net localgroup\n        Engine Version = 5.1.20348.3932\n        Runspace ID = fd38696e-17c3-45bb-9730-87f4bf174888\n        Pipeline ID = 1\n        Command Name = \n        Command Type = Script\n        Script Name = \n        Command Path = \n        Sequence Number = 16\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:21:42.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:4091",
    "_indextime": "1754500903",
    "_serial": "1",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "37",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:21:42 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4104\nEventType=5\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Verbose\nRecordNumber=351\nKeywords=None\nTaskCategory=Execute a Remote Command\nOpCode=On create calls\nMessage=Creating Scriptblock text (1 of 1):\nnet localgroup\n\nScriptBlock ID: 04408c73-9239-4045-b116-2431463f4d06\nPath:",
    "_time": "2025-08-06T17:21:42.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:4074",
    "_indextime": "1754500903",
    "_serial": "2",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "19",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:21:42 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=40962\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=350\nKeywords=None\nTaskCategory=PowerShell Console Startup\nOpCode=Stop\nMessage=PowerShell console is ready for user input",
    "_time": "2025-08-06T17:21:42.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:4060",
    "_indextime": "1754500903",
    "_serial": "3",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "15",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:21:42 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=53504\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=349\nKeywords=None\nTaskCategory=PowerShell Named Pipe IPC\nOpCode=Open (async)\nMessage=Windows PowerShell has started an IPC listening thread on process: 4276 in AppDomain: DefaultAppDomain.",
    "_time": "2025-08-06T17:21:42.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:4044",
    "_indextime": "1754500903",
    "_serial": "4",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "15",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:21:41 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=40961\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=348\nKeywords=None\nTaskCategory=PowerShell Console Startup\nOpCode=Start\nMessage=PowerShell console is starting up",
    "_time": "2025-08-06T17:21:41.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:4030",
    "_indextime": "1754500903",
    "_serial": "5",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "15",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:22:00 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4104\nEventType=5\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Verbose\nRecordNumber=362\nKeywords=None\nTaskCategory=Execute a Remote Command\nOpCode=On create calls\nMessage=Creating Scriptblock text (1 of 1):\n$global:?\n\nScriptBlock ID: dbf36e7d-7bc0-4973-88a2-9a2a34a42b88\nPath:",
    "_time": "2025-08-06T17:22:00.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:4698",
    "_indextime": "1754500922",
    "_serial": "0",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "19",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:22:00 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=361\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Out-Default): \"Out-Default\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"DefaultAccount\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"Guest\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"lab_admin\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"WDAGUtilityAccount\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 4c8ced59-0b45-4f87-8e54-1d1adac2f003\n        Host Application = powershell.exe -Command Get-LocalUser\n        Engine Version = 5.1.20348.3932\n        Runspace ID = 1d5bc29f-dfd4-48a2-972e-3a3cd552f7e5\n        Pipeline ID = 1\n        Command Name = \n        Command Type = Script\n        Script Name = \n        Command Path = \n        Sequence Number = 22\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:22:00.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:4654",
    "_indextime": "1754500922",
    "_serial": "1",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "41",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:22:00 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=360\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Get-LocalUser): \"Get-LocalUser\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 4c8ced59-0b45-4f87-8e54-1d1adac2f003\n        Host Application = powershell.exe -Command Get-LocalUser\n        Engine Version = 5.1.20348.3932\n        Runspace ID = 1d5bc29f-dfd4-48a2-972e-3a3cd552f7e5\n        Pipeline ID = 1\n        Command Name = Get-LocalUser\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 20\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:22:00.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:4618",
    "_indextime": "1754500922",
    "_serial": "2",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "37",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:22:00 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=359\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(ConvertFrom-StringData): \"ConvertFrom-StringData\"\nParameterBinding(ConvertFrom-StringData): name=\"StringData\"; value=\"###PSLOC\nErrorMountPointNotFound={0} does not have an associated BitLocker volume.\nErrorVolumeNotFound=Device Id: {0} does not have a corresponding volume.\nErrorVolumeBoundAlready=This key protector cannot be deleted because it is being used to automatically unlock the volume.\nErrorOperatingSystemMountPointNotFound=An operating system volume could not be found.\nWarningUsedSpaceOnlyAndHardwareEncryption=UsedSpaceOnly switch and HardwareEncryption switch cannot be used together. Ignoring UsedSpaceOnly.\nErrorExternalKeyOrPasswordRequired=An external key or password protector is required to enable BitLocker on an operating system volume without a valid TPM.\nWarningWriteDownRecoveryPassword=ACTIONS REQUIRED:{1}{1}1. Save this numerical recovery password in a secure location away from your computer:{1}{1}{0}{1}{1}To prevent data loss, save this password immediately. This password helps ensure that you can unlock the encrypted volume.\nWarningWriteDownRecoveryPasswordInsertExternalKeyRestart=ACTIONS REQUIRED:{1}{1}1. Save this numerical recovery password in a secure location away from your computer:{1}{1}{0}{1}{1}To prevent data loss, save this password immediately. This password helps ensure that you can unlock the encrypted volume.{1}2.Insert a USB flash drive with an external key file into the computer.{1}3. Restart the computer to run a hardware test.{1}    (Type: get-help Restart-Computer for command line instructions.)\nWarningWriteDownRecoveryPasswordRestart=ACTIONS REQUIRED:{1}{1}1. Save this numerical recovery password in a secure location away from your computer:{1}{1}{0}{1}{1}To prevent data loss, save this password immediately. This password helps ensure that you can unlock the encrypted volume.{1}2. Restart the computer to run a hardware test.{1}    (Type: get-help Restart-Computer for command line instructions.)\nWarningHardwareTestFailed=ERROR: The hardware test failed with code 0x        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 4c8ced59-0b45-4f87-8e54-1d1adac2f003\n        Host Application = powershell.exe -Command Get-LocalUser\n        Engine Version = 5.1.20348.3932\n        Runspace ID = 1d5bc29f-dfd4-48a2-972e-3a3cd552f7e5\n        Pipeline ID = 6\n        Command Name = ConvertFrom-StringData\n        Command Type = Cmdlet\n        Script Name = C:\\Windows\\system32\\WindowsPowerShell\\v1.0\\Modules\\BitLocker\\en-US\\BitLocker.psd1\n        Command Path = \n        Sequence Number = 18\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n!08x!. All key protectors{0}were removed.{0}{0}Possible reasons that the hardware test failed are:{0}{0}1. A USB flash drive with an external key file was not found.{0}{0}- Insert a USB flash drive with an external key file into the computer.{0}- If this failure persists, the computer cannot read USB drives{0}during boot. You may not be able to use external keys to unlock{0}the OS volume during boot.{0}{0}2. The external key file on the USB flash drive was corrupt.{0}{0}- Try a different USB flash drive to store the external key file.{0}{0}3. The TPM is off.{0}{0}- To manage the Trusted Platform Module (TPM), use either the{0}TPM Management MMC snap-in or the TPM Management PowerShell cmdlets.{0}{0}4. The TPM detected a change in OS boot components.{0}{0}- Remove any bootable CD or DVD from the computer.{0}- If this failure persists, check that the latest firmware and BIOS{0}upgrades are installed, and that the TPM is otherwise working properly.{0}{0}5. The provided PIN was incorrect.{0}{0}6. The TPM storage root key (SRK) has an incompatible authorization value.{0}{0}- To reset this value, run the TPM Initialization Wizard.{0}{0}ACTIONS REQUIRED:{0}{0}1. Resolve the hardware test failure above.{0}2. Re-run the command to turn on BitLocker.{0}\nWarningInsertExternalKeyRestart=ACTIONS REQUIRED:{0}{0}1.Insert a USB flash drive with an external key file into the computer.{0}2. Restart the computer to run a hardware test.{0}    (Type: get-help Restart-Computer for command line instructions.)\nWarningRestart=ACTIONS REQUIRED:{0}{0}1. Restart the computer to run a hardware test.{0}    (Type: get-help Restart-Computer for command line instructions.)\nErrorSidProtectorRequiresAdditionalRecoveryProtector=To turn on BitLocker with a SID-based Identity protector on this volume, you must provide at least one additional protector for recovery.\nErrorRemoveDraProtector=Removal of the data recovery agent certificate must be done using the Certificates snap-in.\nErrorRemoveNkpProtector=Network Unlock can only be disabled within the BitLocker Drive Encryption group policy setting \"Allow network unlock at startup\", or by removing the Public Key Policies group policy setting \"BitLocker Drive Encryption Network Unlock Certificate\" on the domain controller.\nPasswordPrompt=Enter Password:\nConfirmPasswordPrompt=Confirm Password:\nNoMatchPassword=These passwords do not match. Please re-enter them.\nPinPrompt=Enter Pin:\nConfirmPinPrompt=Confirm Pin:\nNoMatchPin=These pins do not match. Please re-enter them.\nErrorGroupPolicyDisabledBackup=Group policy does not permit the storage of recovery information to Active Directory. The operation was not attempted.\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 4c8ced59-0b45-4f87-8e54-1d1adac2f003\n        Host Application = powershell.exe -Command Get-LocalUser\n        Engine Version = 5.1.20348.3932\n        Runspace ID = 1d5bc29f-dfd4-48a2-972e-3a3cd552f7e5\n        Pipeline ID = 6\n        Command Name = ConvertFrom-StringData\n        Command Type = Cmdlet\n        Script Name = C:\\Windows\\system32\\WindowsPowerShell\\v1.0\\Modules\\BitLocker\\en-US\\BitLocker.psd1\n        Command Path = \n        Sequence Number = 18\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:22:00.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:4411",
    "_indextime": "1754500921",
    "_serial": "3",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "76",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:22:00 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=358\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(ConvertFrom-StringData): \"ConvertFrom-StringData\"\nParameterBinding(ConvertFrom-StringData): name=\"StringData\"; value=\"###PSLOC\nErrorMountPointNotFound={0} does not have an associated BitLocker volume.\nErrorVolumeNotFound=Device Id: {0} does not have a corresponding volume.\nErrorVolumeBoundAlready=This key protector cannot be deleted because it is being used to automatically unlock the volume.\nErrorOperatingSystemMountPointNotFound=An operating system volume could not be found.\nWarningUsedSpaceOnlyAndHardwareEncryption=UsedSpaceOnly switch and HardwareEncryption switch cannot be used together. Ignoring UsedSpaceOnly.\nErrorExternalKeyOrPasswordRequired=An external key or password protector is required to enable BitLocker on an operating system volume without a valid TPM.\nWarningWriteDownRecoveryPassword=ACTIONS REQUIRED:{1}{1}1. Save this numerical recovery password in a secure location away from your computer:{1}{1}{0}{1}{1}To prevent data loss, save this password immediately. This password helps ensure that you can unlock the encrypted volume.\nWarningWriteDownRecoveryPasswordInsertExternalKeyRestart=ACTIONS REQUIRED:{1}{1}1. Save this numerical recovery password in a secure location away from your computer:{1}{1}{0}{1}{1}To prevent data loss, save this password immediately. This password helps ensure that you can unlock the encrypted volume.{1}2.Insert a USB flash drive with an external key file into the computer.{1}3. Restart the computer to run a hardware test.{1}    (Type: get-help Restart-Computer for command line instructions.)\nWarningWriteDownRecoveryPasswordRestart=ACTIONS REQUIRED:{1}{1}1. Save this numerical recovery password in a secure location away from your computer:{1}{1}{0}{1}{1}To prevent data loss, save this password immediately. This password helps ensure that you can unlock the encrypted volume.{1}2. Restart the computer to run a hardware test.{1}    (Type: get-help Restart-Computer for command line instructions.)\nWarningHardwareTestFailed=ERROR: The hardware test failed with code 0x        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 4c8ced59-0b45-4f87-8e54-1d1adac2f003\n        Host Application = powershell.exe -Command Get-LocalUser\n        Engine Version = 5.1.20348.3932\n        Runspace ID = 1d5bc29f-dfd4-48a2-972e-3a3cd552f7e5\n        Pipeline ID = 6\n        Command Name = ConvertFrom-StringData\n        Command Type = Cmdlet\n        Script Name = C:\\Windows\\system32\\WindowsPowerShell\\v1.0\\Modules\\BitLocker\\en-US\\BitLocker.psd1\n        Command Path = \n        Sequence Number = 16\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n!08x!. All key protectors{0}were removed.{0}{0}Possible reasons that the hardware test failed are:{0}{0}1. A USB flash drive with an external key file was not found.{0}{0}- Insert a USB flash drive with an external key file into the computer.{0}- If this failure persists, the computer cannot read USB drives{0}during boot. You may not be able to use external keys to unlock{0}the OS volume during boot.{0}{0}2. The external key file on the USB flash drive was corrupt.{0}{0}- Try a different USB flash drive to store the external key file.{0}{0}3. The TPM is off.{0}{0}- To manage the Trusted Platform Module (TPM), use either the{0}TPM Management MMC snap-in or the TPM Management PowerShell cmdlets.{0}{0}4. The TPM detected a change in OS boot components.{0}{0}- Remove any bootable CD or DVD from the computer.{0}- If this failure persists, check that the latest firmware and BIOS{0}upgrades are installed, and that the TPM is otherwise working properly.{0}{0}5. The provided PIN was incorrect.{0}{0}6. The TPM storage root key (SRK) has an incompatible authorization value.{0}{0}- To reset this value, run the TPM Initialization Wizard.{0}{0}ACTIONS REQUIRED:{0}{0}1. Resolve the hardware test failure above.{0}2. Re-run the command to turn on BitLocker.{0}\nWarningInsertExternalKeyRestart=ACTIONS REQUIRED:{0}{0}1.Insert a USB flash drive with an external key file into the computer.{0}2. Restart the computer to run a hardware test.{0}    (Type: get-help Restart-Computer for command line instructions.)\nWarningRestart=ACTIONS REQUIRED:{0}{0}1. Restart the computer to run a hardware test.{0}    (Type: get-help Restart-Computer for command line instructions.)\nErrorSidProtectorRequiresAdditionalRecoveryProtector=To turn on BitLocker with a SID-based Identity protector on this volume, you must provide at least one additional protector for recovery.\nErrorRemoveDraProtector=Removal of the data recovery agent certificate must be done using the Certificates snap-in.\nErrorRemoveNkpProtector=Network Unlock can only be disabled within the BitLocker Drive Encryption group policy setting \"Allow network unlock at startup\", or by removing the Public Key Policies group policy setting \"BitLocker Drive Encryption Network Unlock Certificate\" on the domain controller.\nPasswordPrompt=Enter Password:\nConfirmPasswordPrompt=Confirm Password:\nNoMatchPassword=These passwords do not match. Please re-enter them.\nPinPrompt=Enter Pin:\nConfirmPinPrompt=Confirm Pin:\nNoMatchPin=These pins do not match. Please re-enter them.\nErrorGroupPolicyDisabledBackup=Group policy does not permit the storage of recovery information to Active Directory. The operation was not attempted.\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 4c8ced59-0b45-4f87-8e54-1d1adac2f003\n        Host Application = powershell.exe -Command Get-LocalUser\n        Engine Version = 5.1.20348.3932\n        Runspace ID = 1d5bc29f-dfd4-48a2-972e-3a3cd552f7e5\n        Pipeline ID = 6\n        Command Name = ConvertFrom-StringData\n        Command Type = Cmdlet\n        Script Name = C:\\Windows\\system32\\WindowsPowerShell\\v1.0\\Modules\\BitLocker\\en-US\\BitLocker.psd1\n        Command Path = \n        Sequence Number = 16\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:22:00.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:4204",
    "_indextime": "1754500921",
    "_serial": "4",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "76",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:21:59 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4104\nEventType=5\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Verbose\nRecordNumber=357\nKeywords=None\nTaskCategory=Execute a Remote Command\nOpCode=On create calls\nMessage=Creating Scriptblock text (1 of 1):\nGet-LocalUser\n\nScriptBlock ID: b24bc664-2cf6-47ca-b08b-fc518db1abf0\nPath:",
    "_time": "2025-08-06T17:21:59.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:4187",
    "_indextime": "1754500919",
    "_serial": "5",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "19",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:21:59 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=40962\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=356\nKeywords=None\nTaskCategory=PowerShell Console Startup\nOpCode=Stop\nMessage=PowerShell console is ready for user input",
    "_time": "2025-08-06T17:21:59.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:4173",
    "_indextime": "1754500919",
    "_serial": "6",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "15",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:21:59 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=53504\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=355\nKeywords=None\nTaskCategory=PowerShell Named Pipe IPC\nOpCode=Open (async)\nMessage=Windows PowerShell has started an IPC listening thread on process: 5028 in AppDomain: DefaultAppDomain.",
    "_time": "2025-08-06T17:21:59.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:4157",
    "_indextime": "1754500919",
    "_serial": "7",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "15",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:21:58 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=40961\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=354\nKeywords=None\nTaskCategory=PowerShell Console Startup\nOpCode=Start\nMessage=PowerShell console is starting up",
    "_time": "2025-08-06T17:21:58.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:4143",
    "_indextime": "1754500919",
    "_serial": "8",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "15",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:22:18 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4104\nEventType=5\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Verbose\nRecordNumber=371\nKeywords=None\nTaskCategory=Execute a Remote Command\nOpCode=On create calls\nMessage=Creating Scriptblock text (1 of 1):\n$global:?\n\nScriptBlock ID: ddecb0e0-faec-4c32-9092-27013a4cbbbd\nPath:",
    "_time": "2025-08-06T17:22:18.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:5324",
    "_indextime": "1754500940",
    "_serial": "0",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "19",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:22:18 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=370\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Out-Default): \"Out-Default\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"Access Control Assistance Operators\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"Administrators\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"Backup Operators\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"Certificate Service DCOM Access\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"Cryptographic Operators\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"Device Owners\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"Distributed COM Users\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"Event Log Readers\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"Guests\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"Hyper-V Administrators\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"IIS_IUSRS\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"Network Configuration Operators\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"Performance Log Users\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"Performance Monitor Users\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"Power Users\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"Print Operators\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"RDS Endpoint Servers\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"RDS Management Servers\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"RDS Remote Access Servers\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"Remote Desktop Users\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"Remote Management Users\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"Replicator\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"Storage Replica Administrators\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"System Managed Accounts Group\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"Users\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 97cecf90-9dcd-464d-b281-1417d8b8e8cf\n        Host Application = powershell.exe -Command Get-LocalGroup\n        Engine Version = 5.1.20348.3932\n        Runspace ID = 6ff512aa-3b67-4a2b-a89a-dde219c7fd3a\n        Pipeline ID = 1\n        Command Name = \n        Command Type = Script\n        Script Name = \n        Command Path = \n        Sequence Number = 22\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:22:18.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:5226",
    "_indextime": "1754500940",
    "_serial": "1",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "62",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:22:18 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=369\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Get-LocalGroup): \"Get-LocalGroup\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 97cecf90-9dcd-464d-b281-1417d8b8e8cf\n        Host Application = powershell.exe -Command Get-LocalGroup\n        Engine Version = 5.1.20348.3932\n        Runspace ID = 6ff512aa-3b67-4a2b-a89a-dde219c7fd3a\n        Pipeline ID = 1\n        Command Name = Get-LocalGroup\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 20\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:22:18.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:5190",
    "_indextime": "1754500940",
    "_serial": "2",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "37",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:22:18 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=368\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(ConvertFrom-StringData): \"ConvertFrom-StringData\"\nParameterBinding(ConvertFrom-StringData): name=\"StringData\"; value=\"###PSLOC\nErrorMountPointNotFound={0} does not have an associated BitLocker volume.\nErrorVolumeNotFound=Device Id: {0} does not have a corresponding volume.\nErrorVolumeBoundAlready=This key protector cannot be deleted because it is being used to automatically unlock the volume.\nErrorOperatingSystemMountPointNotFound=An operating system volume could not be found.\nWarningUsedSpaceOnlyAndHardwareEncryption=UsedSpaceOnly switch and HardwareEncryption switch cannot be used together. Ignoring UsedSpaceOnly.\nErrorExternalKeyOrPasswordRequired=An external key or password protector is required to enable BitLocker on an operating system volume without a valid TPM.\nWarningWriteDownRecoveryPassword=ACTIONS REQUIRED:{1}{1}1. Save this numerical recovery password in a secure location away from your computer:{1}{1}{0}{1}{1}To prevent data loss, save this password immediately. This password helps ensure that you can unlock the encrypted volume.\nWarningWriteDownRecoveryPasswordInsertExternalKeyRestart=ACTIONS REQUIRED:{1}{1}1. Save this numerical recovery password in a secure location away from your computer:{1}{1}{0}{1}{1}To prevent data loss, save this password immediately. This password helps ensure that you can unlock the encrypted volume.{1}2.Insert a USB flash drive with an external key file into the computer.{1}3. Restart the computer to run a hardware test.{1}    (Type: get-help Restart-Computer for command line instructions.)\nWarningWriteDownRecoveryPasswordRestart=ACTIONS REQUIRED:{1}{1}1. Save this numerical recovery password in a secure location away from your computer:{1}{1}{0}{1}{1}To prevent data loss, save this password immediately. This password helps ensure that you can unlock the encrypted volume.{1}2. Restart the computer to run a hardware test.{1}    (Type: get-help Restart-Computer for command line instructions.)\nWarningHardwareTestFailed=ERROR: The hardware test failed with code 0x        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 97cecf90-9dcd-464d-b281-1417d8b8e8cf\n        Host Application = powershell.exe -Command Get-LocalGroup\n        Engine Version = 5.1.20348.3932\n        Runspace ID = 6ff512aa-3b67-4a2b-a89a-dde219c7fd3a\n        Pipeline ID = 6\n        Command Name = ConvertFrom-StringData\n        Command Type = Cmdlet\n        Script Name = C:\\Windows\\system32\\WindowsPowerShell\\v1.0\\Modules\\BitLocker\\en-US\\BitLocker.psd1\n        Command Path = \n        Sequence Number = 18\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n!08x!. All key protectors{0}were removed.{0}{0}Possible reasons that the hardware test failed are:{0}{0}1. A USB flash drive with an external key file was not found.{0}{0}- Insert a USB flash drive with an external key file into the computer.{0}- If this failure persists, the computer cannot read USB drives{0}during boot. You may not be able to use external keys to unlock{0}the OS volume during boot.{0}{0}2. The external key file on the USB flash drive was corrupt.{0}{0}- Try a different USB flash drive to store the external key file.{0}{0}3. The TPM is off.{0}{0}- To manage the Trusted Platform Module (TPM), use either the{0}TPM Management MMC snap-in or the TPM Management PowerShell cmdlets.{0}{0}4. The TPM detected a change in OS boot components.{0}{0}- Remove any bootable CD or DVD from the computer.{0}- If this failure persists, check that the latest firmware and BIOS{0}upgrades are installed, and that the TPM is otherwise working properly.{0}{0}5. The provided PIN was incorrect.{0}{0}6. The TPM storage root key (SRK) has an incompatible authorization value.{0}{0}- To reset this value, run the TPM Initialization Wizard.{0}{0}ACTIONS REQUIRED:{0}{0}1. Resolve the hardware test failure above.{0}2. Re-run the command to turn on BitLocker.{0}\nWarningInsertExternalKeyRestart=ACTIONS REQUIRED:{0}{0}1.Insert a USB flash drive with an external key file into the computer.{0}2. Restart the computer to run a hardware test.{0}    (Type: get-help Restart-Computer for command line instructions.)\nWarningRestart=ACTIONS REQUIRED:{0}{0}1. Restart the computer to run a hardware test.{0}    (Type: get-help Restart-Computer for command line instructions.)\nErrorSidProtectorRequiresAdditionalRecoveryProtector=To turn on BitLocker with a SID-based Identity protector on this volume, you must provide at least one additional protector for recovery.\nErrorRemoveDraProtector=Removal of the data recovery agent certificate must be done using the Certificates snap-in.\nErrorRemoveNkpProtector=Network Unlock can only be disabled within the BitLocker Drive Encryption group policy setting \"Allow network unlock at startup\", or by removing the Public Key Policies group policy setting \"BitLocker Drive Encryption Network Unlock Certificate\" on the domain controller.\nPasswordPrompt=Enter Password:\nConfirmPasswordPrompt=Confirm Password:\nNoMatchPassword=These passwords do not match. Please re-enter them.\nPinPrompt=Enter Pin:\nConfirmPinPrompt=Confirm Pin:\nNoMatchPin=These pins do not match. Please re-enter them.\nErrorGroupPolicyDisabledBackup=Group policy does not permit the storage of recovery information to Active Directory. The operation was not attempted.\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 97cecf90-9dcd-464d-b281-1417d8b8e8cf\n        Host Application = powershell.exe -Command Get-LocalGroup\n        Engine Version = 5.1.20348.3932\n        Runspace ID = 6ff512aa-3b67-4a2b-a89a-dde219c7fd3a\n        Pipeline ID = 6\n        Command Name = ConvertFrom-StringData\n        Command Type = Cmdlet\n        Script Name = C:\\Windows\\system32\\WindowsPowerShell\\v1.0\\Modules\\BitLocker\\en-US\\BitLocker.psd1\n        Command Path = \n        Sequence Number = 18\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:22:18.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:4983",
    "_indextime": "1754500938",
    "_serial": "3",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "76",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:22:18 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=367\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(ConvertFrom-StringData): \"ConvertFrom-StringData\"\nParameterBinding(ConvertFrom-StringData): name=\"StringData\"; value=\"###PSLOC\nErrorMountPointNotFound={0} does not have an associated BitLocker volume.\nErrorVolumeNotFound=Device Id: {0} does not have a corresponding volume.\nErrorVolumeBoundAlready=This key protector cannot be deleted because it is being used to automatically unlock the volume.\nErrorOperatingSystemMountPointNotFound=An operating system volume could not be found.\nWarningUsedSpaceOnlyAndHardwareEncryption=UsedSpaceOnly switch and HardwareEncryption switch cannot be used together. Ignoring UsedSpaceOnly.\nErrorExternalKeyOrPasswordRequired=An external key or password protector is required to enable BitLocker on an operating system volume without a valid TPM.\nWarningWriteDownRecoveryPassword=ACTIONS REQUIRED:{1}{1}1. Save this numerical recovery password in a secure location away from your computer:{1}{1}{0}{1}{1}To prevent data loss, save this password immediately. This password helps ensure that you can unlock the encrypted volume.\nWarningWriteDownRecoveryPasswordInsertExternalKeyRestart=ACTIONS REQUIRED:{1}{1}1. Save this numerical recovery password in a secure location away from your computer:{1}{1}{0}{1}{1}To prevent data loss, save this password immediately. This password helps ensure that you can unlock the encrypted volume.{1}2.Insert a USB flash drive with an external key file into the computer.{1}3. Restart the computer to run a hardware test.{1}    (Type: get-help Restart-Computer for command line instructions.)\nWarningWriteDownRecoveryPasswordRestart=ACTIONS REQUIRED:{1}{1}1. Save this numerical recovery password in a secure location away from your computer:{1}{1}{0}{1}{1}To prevent data loss, save this password immediately. This password helps ensure that you can unlock the encrypted volume.{1}2. Restart the computer to run a hardware test.{1}    (Type: get-help Restart-Computer for command line instructions.)\nWarningHardwareTestFailed=ERROR: The hardware test failed with code 0x        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 97cecf90-9dcd-464d-b281-1417d8b8e8cf\n        Host Application = powershell.exe -Command Get-LocalGroup\n        Engine Version = 5.1.20348.3932\n        Runspace ID = 6ff512aa-3b67-4a2b-a89a-dde219c7fd3a\n        Pipeline ID = 6\n        Command Name = ConvertFrom-StringData\n        Command Type = Cmdlet\n        Script Name = C:\\Windows\\system32\\WindowsPowerShell\\v1.0\\Modules\\BitLocker\\en-US\\BitLocker.psd1\n        Command Path = \n        Sequence Number = 16\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n!08x!. All key protectors{0}were removed.{0}{0}Possible reasons that the hardware test failed are:{0}{0}1. A USB flash drive with an external key file was not found.{0}{0}- Insert a USB flash drive with an external key file into the computer.{0}- If this failure persists, the computer cannot read USB drives{0}during boot. You may not be able to use external keys to unlock{0}the OS volume during boot.{0}{0}2. The external key file on the USB flash drive was corrupt.{0}{0}- Try a different USB flash drive to store the external key file.{0}{0}3. The TPM is off.{0}{0}- To manage the Trusted Platform Module (TPM), use either the{0}TPM Management MMC snap-in or the TPM Management PowerShell cmdlets.{0}{0}4. The TPM detected a change in OS boot components.{0}{0}- Remove any bootable CD or DVD from the computer.{0}- If this failure persists, check that the latest firmware and BIOS{0}upgrades are installed, and that the TPM is otherwise working properly.{0}{0}5. The provided PIN was incorrect.{0}{0}6. The TPM storage root key (SRK) has an incompatible authorization value.{0}{0}- To reset this value, run the TPM Initialization Wizard.{0}{0}ACTIONS REQUIRED:{0}{0}1. Resolve the hardware test failure above.{0}2. Re-run the command to turn on BitLocker.{0}\nWarningInsertExternalKeyRestart=ACTIONS REQUIRED:{0}{0}1.Insert a USB flash drive with an external key file into the computer.{0}2. Restart the computer to run a hardware test.{0}    (Type: get-help Restart-Computer for command line instructions.)\nWarningRestart=ACTIONS REQUIRED:{0}{0}1. Restart the computer to run a hardware test.{0}    (Type: get-help Restart-Computer for command line instructions.)\nErrorSidProtectorRequiresAdditionalRecoveryProtector=To turn on BitLocker with a SID-based Identity protector on this volume, you must provide at least one additional protector for recovery.\nErrorRemoveDraProtector=Removal of the data recovery agent certificate must be done using the Certificates snap-in.\nErrorRemoveNkpProtector=Network Unlock can only be disabled within the BitLocker Drive Encryption group policy setting \"Allow network unlock at startup\", or by removing the Public Key Policies group policy setting \"BitLocker Drive Encryption Network Unlock Certificate\" on the domain controller.\nPasswordPrompt=Enter Password:\nConfirmPasswordPrompt=Confirm Password:\nNoMatchPassword=These passwords do not match. Please re-enter them.\nPinPrompt=Enter Pin:\nConfirmPinPrompt=Confirm Pin:\nNoMatchPin=These pins do not match. Please re-enter them.\nErrorGroupPolicyDisabledBackup=Group policy does not permit the storage of recovery information to Active Directory. The operation was not attempted.\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 97cecf90-9dcd-464d-b281-1417d8b8e8cf\n        Host Application = powershell.exe -Command Get-LocalGroup\n        Engine Version = 5.1.20348.3932\n        Runspace ID = 6ff512aa-3b67-4a2b-a89a-dde219c7fd3a\n        Pipeline ID = 6\n        Command Name = ConvertFrom-StringData\n        Command Type = Cmdlet\n        Script Name = C:\\Windows\\system32\\WindowsPowerShell\\v1.0\\Modules\\BitLocker\\en-US\\BitLocker.psd1\n        Command Path = \n        Sequence Number = 16\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:22:18.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:4776",
    "_indextime": "1754500938",
    "_serial": "4",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "76",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:22:17 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4104\nEventType=5\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Verbose\nRecordNumber=366\nKeywords=None\nTaskCategory=Execute a Remote Command\nOpCode=On create calls\nMessage=Creating Scriptblock text (1 of 1):\nGet-LocalGroup\n\nScriptBlock ID: abc6053b-dbd0-4f17-aa98-b317d74d0630\nPath:",
    "_time": "2025-08-06T17:22:17.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:4759",
    "_indextime": "1754500938",
    "_serial": "5",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "19",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:22:17 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=40962\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=365\nKeywords=None\nTaskCategory=PowerShell Console Startup\nOpCode=Stop\nMessage=PowerShell console is ready for user input",
    "_time": "2025-08-06T17:22:17.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:4745",
    "_indextime": "1754500938",
    "_serial": "6",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "15",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:22:17 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=53504\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=364\nKeywords=None\nTaskCategory=PowerShell Named Pipe IPC\nOpCode=Open (async)\nMessage=Windows PowerShell has started an IPC listening thread on process: 4916 in AppDomain: DefaultAppDomain.",
    "_time": "2025-08-06T17:22:17.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:4729",
    "_indextime": "1754500938",
    "_serial": "7",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "15",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:22:17 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=40961\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=363\nKeywords=None\nTaskCategory=PowerShell Console Startup\nOpCode=Start\nMessage=PowerShell console is starting up",
    "_time": "2025-08-06T17:22:17.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:4715",
    "_indextime": "1754500938",
    "_serial": "8",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "15",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:22:37 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4104\nEventType=5\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Verbose\nRecordNumber=380\nKeywords=None\nTaskCategory=Execute a Remote Command\nOpCode=On create calls\nMessage=Creating Scriptblock text (1 of 1):\n$global:?\n\nScriptBlock ID: fc6fd7ed-2b99-4ed0-bdcc-b0a5b381e5f1\nPath:",
    "_time": "2025-08-06T17:22:37.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:5901",
    "_indextime": "1754500958",
    "_serial": "0",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "19",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:22:37 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=379\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Out-Default): \"Out-Default\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"POWERSHELLSENTI\\Domain Admins\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"PS-VICTIM-01\\lab_admin\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 4b8018da-43bc-4f6e-8087-01b1747111b7\n        Host Application = powershell.exe -Command Get-LocalGroupMember -Group Administrators\n        Engine Version = 5.1.20348.3932\n        Runspace ID = 3a098759-70a7-476b-943b-47ec9835c2e5\n        Pipeline ID = 1\n        Command Name = \n        Command Type = Script\n        Script Name = \n        Command Path = \n        Sequence Number = 22\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:22:37.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:5860",
    "_indextime": "1754500958",
    "_serial": "1",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "39",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:22:37 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=378\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Get-LocalGroupMember): \"Get-LocalGroupMember\"\nParameterBinding(Get-LocalGroupMember): name=\"Group\"; value=\"Administrators\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 4b8018da-43bc-4f6e-8087-01b1747111b7\n        Host Application = powershell.exe -Command Get-LocalGroupMember -Group Administrators\n        Engine Version = 5.1.20348.3932\n        Runspace ID = 3a098759-70a7-476b-943b-47ec9835c2e5\n        Pipeline ID = 1\n        Command Name = Get-LocalGroupMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 20\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:22:37.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:5820",
    "_indextime": "1754500958",
    "_serial": "2",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "38",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:22:36 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=377\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(ConvertFrom-StringData): \"ConvertFrom-StringData\"\nParameterBinding(ConvertFrom-StringData): name=\"StringData\"; value=\"###PSLOC\nErrorMountPointNotFound={0} does not have an associated BitLocker volume.\nErrorVolumeNotFound=Device Id: {0} does not have a corresponding volume.\nErrorVolumeBoundAlready=This key protector cannot be deleted because it is being used to automatically unlock the volume.\nErrorOperatingSystemMountPointNotFound=An operating system volume could not be found.\nWarningUsedSpaceOnlyAndHardwareEncryption=UsedSpaceOnly switch and HardwareEncryption switch cannot be used together. Ignoring UsedSpaceOnly.\nErrorExternalKeyOrPasswordRequired=An external key or password protector is required to enable BitLocker on an operating system volume without a valid TPM.\nWarningWriteDownRecoveryPassword=ACTIONS REQUIRED:{1}{1}1. Save this numerical recovery password in a secure location away from your computer:{1}{1}{0}{1}{1}To prevent data loss, save this password immediately. This password helps ensure that you can unlock the encrypted volume.\nWarningWriteDownRecoveryPasswordInsertExternalKeyRestart=ACTIONS REQUIRED:{1}{1}1. Save this numerical recovery password in a secure location away from your computer:{1}{1}{0}{1}{1}To prevent data loss, save this password immediately. This password helps ensure that you can unlock the encrypted volume.{1}2.Insert a USB flash drive with an external key file into the computer.{1}3. Restart the computer to run a hardware test.{1}    (Type: get-help Restart-Computer for command line instructions.)\nWarningWriteDownRecoveryPasswordRestart=ACTIONS REQUIRED:{1}{1}1. Save this numerical recovery password in a secure location away from your computer:{1}{1}{0}{1}{1}To prevent data loss, save this password immediately. This password helps ensure that you can unlock the encrypted volume.{1}2. Restart the computer to run a hardware test.{1}    (Type: get-help Restart-Computer for command line instructions.)\nWarningHardwareTestFailed=ERROR: The hardware test failed with code 0x        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 4b8018da-43bc-4f6e-8087-01b1747111b7\n        Host Application = powershell.exe -Command Get-LocalGroupMember -Group Administrators\n        Engine Version = 5.1.20348.3932\n        Runspace ID = 3a098759-70a7-476b-943b-47ec9835c2e5\n        Pipeline ID = 6\n        Command Name = ConvertFrom-StringData\n        Command Type = Cmdlet\n        Script Name = C:\\Windows\\system32\\WindowsPowerShell\\v1.0\\Modules\\BitLocker\\en-US\\BitLocker.psd1\n        Command Path = \n        Sequence Number = 18\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n!08x!. All key protectors{0}were removed.{0}{0}Possible reasons that the hardware test failed are:{0}{0}1. A USB flash drive with an external key file was not found.{0}{0}- Insert a USB flash drive with an external key file into the computer.{0}- If this failure persists, the computer cannot read USB drives{0}during boot. You may not be able to use external keys to unlock{0}the OS volume during boot.{0}{0}2. The external key file on the USB flash drive was corrupt.{0}{0}- Try a different USB flash drive to store the external key file.{0}{0}3. The TPM is off.{0}{0}- To manage the Trusted Platform Module (TPM), use either the{0}TPM Management MMC snap-in or the TPM Management PowerShell cmdlets.{0}{0}4. The TPM detected a change in OS boot components.{0}{0}- Remove any bootable CD or DVD from the computer.{0}- If this failure persists, check that the latest firmware and BIOS{0}upgrades are installed, and that the TPM is otherwise working properly.{0}{0}5. The provided PIN was incorrect.{0}{0}6. The TPM storage root key (SRK) has an incompatible authorization value.{0}{0}- To reset this value, run the TPM Initialization Wizard.{0}{0}ACTIONS REQUIRED:{0}{0}1. Resolve the hardware test failure above.{0}2. Re-run the command to turn on BitLocker.{0}\nWarningInsertExternalKeyRestart=ACTIONS REQUIRED:{0}{0}1.Insert a USB flash drive with an external key file into the computer.{0}2. Restart the computer to run a hardware test.{0}    (Type: get-help Restart-Computer for command line instructions.)\nWarningRestart=ACTIONS REQUIRED:{0}{0}1. Restart the computer to run a hardware test.{0}    (Type: get-help Restart-Computer for command line instructions.)\nErrorSidProtectorRequiresAdditionalRecoveryProtector=To turn on BitLocker with a SID-based Identity protector on this volume, you must provide at least one additional protector for recovery.\nErrorRemoveDraProtector=Removal of the data recovery agent certificate must be done using the Certificates snap-in.\nErrorRemoveNkpProtector=Network Unlock can only be disabled within the BitLocker Drive Encryption group policy setting \"Allow network unlock at startup\", or by removing the Public Key Policies group policy setting \"BitLocker Drive Encryption Network Unlock Certificate\" on the domain controller.\nPasswordPrompt=Enter Password:\nConfirmPasswordPrompt=Confirm Password:\nNoMatchPassword=These passwords do not match. Please re-enter them.\nPinPrompt=Enter Pin:\nConfirmPinPrompt=Confirm Pin:\nNoMatchPin=These pins do not match. Please re-enter them.\nErrorGroupPolicyDisabledBackup=Group policy does not permit the storage of recovery information to Active Directory. The operation was not attempted.\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 4b8018da-43bc-4f6e-8087-01b1747111b7\n        Host Application = powershell.exe -Command Get-LocalGroupMember -Group Administrators\n        Engine Version = 5.1.20348.3932\n        Runspace ID = 3a098759-70a7-476b-943b-47ec9835c2e5\n        Pipeline ID = 6\n        Command Name = ConvertFrom-StringData\n        Command Type = Cmdlet\n        Script Name = C:\\Windows\\system32\\WindowsPowerShell\\v1.0\\Modules\\BitLocker\\en-US\\BitLocker.psd1\n        Command Path = \n        Sequence Number = 18\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:22:36.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:5611",
    "_indextime": "1754500956",
    "_serial": "3",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "76",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:22:36 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=376\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(ConvertFrom-StringData): \"ConvertFrom-StringData\"\nParameterBinding(ConvertFrom-StringData): name=\"StringData\"; value=\"###PSLOC\nErrorMountPointNotFound={0} does not have an associated BitLocker volume.\nErrorVolumeNotFound=Device Id: {0} does not have a corresponding volume.\nErrorVolumeBoundAlready=This key protector cannot be deleted because it is being used to automatically unlock the volume.\nErrorOperatingSystemMountPointNotFound=An operating system volume could not be found.\nWarningUsedSpaceOnlyAndHardwareEncryption=UsedSpaceOnly switch and HardwareEncryption switch cannot be used together. Ignoring UsedSpaceOnly.\nErrorExternalKeyOrPasswordRequired=An external key or password protector is required to enable BitLocker on an operating system volume without a valid TPM.\nWarningWriteDownRecoveryPassword=ACTIONS REQUIRED:{1}{1}1. Save this numerical recovery password in a secure location away from your computer:{1}{1}{0}{1}{1}To prevent data loss, save this password immediately. This password helps ensure that you can unlock the encrypted volume.\nWarningWriteDownRecoveryPasswordInsertExternalKeyRestart=ACTIONS REQUIRED:{1}{1}1. Save this numerical recovery password in a secure location away from your computer:{1}{1}{0}{1}{1}To prevent data loss, save this password immediately. This password helps ensure that you can unlock the encrypted volume.{1}2.Insert a USB flash drive with an external key file into the computer.{1}3. Restart the computer to run a hardware test.{1}    (Type: get-help Restart-Computer for command line instructions.)\nWarningWriteDownRecoveryPasswordRestart=ACTIONS REQUIRED:{1}{1}1. Save this numerical recovery password in a secure location away from your computer:{1}{1}{0}{1}{1}To prevent data loss, save this password immediately. This password helps ensure that you can unlock the encrypted volume.{1}2. Restart the computer to run a hardware test.{1}    (Type: get-help Restart-Computer for command line instructions.)\nWarningHardwareTestFailed=ERROR: The hardware test failed with code 0x        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 4b8018da-43bc-4f6e-8087-01b1747111b7\n        Host Application = powershell.exe -Command Get-LocalGroupMember -Group Administrators\n        Engine Version = 5.1.20348.3932\n        Runspace ID = 3a098759-70a7-476b-943b-47ec9835c2e5\n        Pipeline ID = 6\n        Command Name = ConvertFrom-StringData\n        Command Type = Cmdlet\n        Script Name = C:\\Windows\\system32\\WindowsPowerShell\\v1.0\\Modules\\BitLocker\\en-US\\BitLocker.psd1\n        Command Path = \n        Sequence Number = 16\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n!08x!. All key protectors{0}were removed.{0}{0}Possible reasons that the hardware test failed are:{0}{0}1. A USB flash drive with an external key file was not found.{0}{0}- Insert a USB flash drive with an external key file into the computer.{0}- If this failure persists, the computer cannot read USB drives{0}during boot. You may not be able to use external keys to unlock{0}the OS volume during boot.{0}{0}2. The external key file on the USB flash drive was corrupt.{0}{0}- Try a different USB flash drive to store the external key file.{0}{0}3. The TPM is off.{0}{0}- To manage the Trusted Platform Module (TPM), use either the{0}TPM Management MMC snap-in or the TPM Management PowerShell cmdlets.{0}{0}4. The TPM detected a change in OS boot components.{0}{0}- Remove any bootable CD or DVD from the computer.{0}- If this failure persists, check that the latest firmware and BIOS{0}upgrades are installed, and that the TPM is otherwise working properly.{0}{0}5. The provided PIN was incorrect.{0}{0}6. The TPM storage root key (SRK) has an incompatible authorization value.{0}{0}- To reset this value, run the TPM Initialization Wizard.{0}{0}ACTIONS REQUIRED:{0}{0}1. Resolve the hardware test failure above.{0}2. Re-run the command to turn on BitLocker.{0}\nWarningInsertExternalKeyRestart=ACTIONS REQUIRED:{0}{0}1.Insert a USB flash drive with an external key file into the computer.{0}2. Restart the computer to run a hardware test.{0}    (Type: get-help Restart-Computer for command line instructions.)\nWarningRestart=ACTIONS REQUIRED:{0}{0}1. Restart the computer to run a hardware test.{0}    (Type: get-help Restart-Computer for command line instructions.)\nErrorSidProtectorRequiresAdditionalRecoveryProtector=To turn on BitLocker with a SID-based Identity protector on this volume, you must provide at least one additional protector for recovery.\nErrorRemoveDraProtector=Removal of the data recovery agent certificate must be done using the Certificates snap-in.\nErrorRemoveNkpProtector=Network Unlock can only be disabled within the BitLocker Drive Encryption group policy setting \"Allow network unlock at startup\", or by removing the Public Key Policies group policy setting \"BitLocker Drive Encryption Network Unlock Certificate\" on the domain controller.\nPasswordPrompt=Enter Password:\nConfirmPasswordPrompt=Confirm Password:\nNoMatchPassword=These passwords do not match. Please re-enter them.\nPinPrompt=Enter Pin:\nConfirmPinPrompt=Confirm Pin:\nNoMatchPin=These pins do not match. Please re-enter them.\nErrorGroupPolicyDisabledBackup=Group policy does not permit the storage of recovery information to Active Directory. The operation was not attempted.\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 4b8018da-43bc-4f6e-8087-01b1747111b7\n        Host Application = powershell.exe -Command Get-LocalGroupMember -Group Administrators\n        Engine Version = 5.1.20348.3932\n        Runspace ID = 3a098759-70a7-476b-943b-47ec9835c2e5\n        Pipeline ID = 6\n        Command Name = ConvertFrom-StringData\n        Command Type = Cmdlet\n        Script Name = C:\\Windows\\system32\\WindowsPowerShell\\v1.0\\Modules\\BitLocker\\en-US\\BitLocker.psd1\n        Command Path = \n        Sequence Number = 16\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:22:36.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:5402",
    "_indextime": "1754500956",
    "_serial": "4",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "76",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:22:36 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4104\nEventType=5\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Verbose\nRecordNumber=375\nKeywords=None\nTaskCategory=Execute a Remote Command\nOpCode=On create calls\nMessage=Creating Scriptblock text (1 of 1):\nGet-LocalGroupMember -Group Administrators\n\nScriptBlock ID: d535dd9c-47d5-42dc-b959-629dd4079641\nPath:",
    "_time": "2025-08-06T17:22:36.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:5385",
    "_indextime": "1754500956",
    "_serial": "5",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "19",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:22:36 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=40962\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=374\nKeywords=None\nTaskCategory=PowerShell Console Startup\nOpCode=Stop\nMessage=PowerShell console is ready for user input",
    "_time": "2025-08-06T17:22:36.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:5371",
    "_indextime": "1754500956",
    "_serial": "6",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "15",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:22:36 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=53504\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=373\nKeywords=None\nTaskCategory=PowerShell Named Pipe IPC\nOpCode=Open (async)\nMessage=Windows PowerShell has started an IPC listening thread on process: 892 in AppDomain: DefaultAppDomain.",
    "_time": "2025-08-06T17:22:36.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:5355",
    "_indextime": "1754500956",
    "_serial": "7",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "15",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:22:35 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=40961\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=372\nKeywords=None\nTaskCategory=PowerShell Console Startup\nOpCode=Start\nMessage=PowerShell console is starting up",
    "_time": "2025-08-06T17:22:35.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:5341",
    "_indextime": "1754500956",
    "_serial": "8",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "15",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:22:54 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4104\nEventType=5\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Verbose\nRecordNumber=386\nKeywords=None\nTaskCategory=Execute a Remote Command\nOpCode=On create calls\nMessage=Creating Scriptblock text (1 of 1):\n$global:?\n\nScriptBlock ID: 4818337c-ed7d-4bbe-8cdb-26a3876dbd00\nPath:",
    "_time": "2025-08-06T17:22:54.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:6014",
    "_indextime": "1754500975",
    "_serial": "0",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "19",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:22:54 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=385\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Out-Default): \"Out-Default\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = aee5bc9c-c318-468b-bcf9-ee1851d97a56\n        Host Application = powershell.exe -Command ipconfig /all\n        Engine Version = 5.1.20348.3932\n        Runspace ID = ec399361-0db1-43d1-8de9-318735fab2ab\n        Pipeline ID = 1\n        Command Name = \n        Command Type = Script\n        Script Name = \n        Command Path = \n        Sequence Number = 16\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:22:54.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:5979",
    "_indextime": "1754500975",
    "_serial": "1",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "37",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:22:54 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4104\nEventType=5\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Verbose\nRecordNumber=384\nKeywords=None\nTaskCategory=Execute a Remote Command\nOpCode=On create calls\nMessage=Creating Scriptblock text (1 of 1):\nipconfig /all\n\nScriptBlock ID: 437cefea-c8f4-4580-8033-4f6556f0008a\nPath:",
    "_time": "2025-08-06T17:22:54.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:5962",
    "_indextime": "1754500975",
    "_serial": "2",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "19",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:22:54 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=40962\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=383\nKeywords=None\nTaskCategory=PowerShell Console Startup\nOpCode=Stop\nMessage=PowerShell console is ready for user input",
    "_time": "2025-08-06T17:22:54.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:5948",
    "_indextime": "1754500975",
    "_serial": "3",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "15",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:22:54 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=53504\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=382\nKeywords=None\nTaskCategory=PowerShell Named Pipe IPC\nOpCode=Open (async)\nMessage=Windows PowerShell has started an IPC listening thread on process: 5492 in AppDomain: DefaultAppDomain.",
    "_time": "2025-08-06T17:22:54.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:5932",
    "_indextime": "1754500975",
    "_serial": "4",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "15",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:22:54 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=40961\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=381\nKeywords=None\nTaskCategory=PowerShell Console Startup\nOpCode=Start\nMessage=PowerShell console is starting up",
    "_time": "2025-08-06T17:22:54.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:5918",
    "_indextime": "1754500975",
    "_serial": "5",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "15",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:23:11 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4104\nEventType=5\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Verbose\nRecordNumber=392\nKeywords=None\nTaskCategory=Execute a Remote Command\nOpCode=On create calls\nMessage=Creating Scriptblock text (1 of 1):\n$global:?\n\nScriptBlock ID: 2a82e74f-ff10-4262-9f4a-5533bb5cf455\nPath:",
    "_time": "2025-08-06T17:23:11.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:6126",
    "_indextime": "1754500992",
    "_serial": "0",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "19",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:23:11 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=391\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Out-Default): \"Out-Default\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = b6d50bfb-3036-4ee7-8a36-ba373809ec90\n        Host Application = powershell.exe -Command arp -a\n        Engine Version = 5.1.20348.3932\n        Runspace ID = 42e80831-90f5-497a-b0c8-d804be5fbfd2\n        Pipeline ID = 1\n        Command Name = \n        Command Type = Script\n        Script Name = \n        Command Path = \n        Sequence Number = 16\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:23:11.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:6091",
    "_indextime": "1754500992",
    "_serial": "1",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "37",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:23:11 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4104\nEventType=5\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Verbose\nRecordNumber=390\nKeywords=None\nTaskCategory=Execute a Remote Command\nOpCode=On create calls\nMessage=Creating Scriptblock text (1 of 1):\narp -a\n\nScriptBlock ID: f537ba9d-409c-4fd4-8983-3f43d78f01f9\nPath:",
    "_time": "2025-08-06T17:23:11.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:6075",
    "_indextime": "1754500992",
    "_serial": "2",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "19",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:23:11 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=40962\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=389\nKeywords=None\nTaskCategory=PowerShell Console Startup\nOpCode=Stop\nMessage=PowerShell console is ready for user input",
    "_time": "2025-08-06T17:23:11.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:6061",
    "_indextime": "1754500992",
    "_serial": "3",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "15",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:23:11 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=53504\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=388\nKeywords=None\nTaskCategory=PowerShell Named Pipe IPC\nOpCode=Open (async)\nMessage=Windows PowerShell has started an IPC listening thread on process: 436 in AppDomain: DefaultAppDomain.",
    "_time": "2025-08-06T17:23:11.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:6045",
    "_indextime": "1754500992",
    "_serial": "4",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "15",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:23:11 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=40961\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=387\nKeywords=None\nTaskCategory=PowerShell Console Startup\nOpCode=Start\nMessage=PowerShell console is starting up",
    "_time": "2025-08-06T17:23:11.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:6031",
    "_indextime": "1754500992",
    "_serial": "5",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "15",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:23:29 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4104\nEventType=5\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Verbose\nRecordNumber=398\nKeywords=None\nTaskCategory=Execute a Remote Command\nOpCode=On create calls\nMessage=Creating Scriptblock text (1 of 1):\n$global:?\n\nScriptBlock ID: 5d701740-5029-481d-a3db-5ba22a356de4\nPath:",
    "_time": "2025-08-06T17:23:29.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:6238",
    "_indextime": "1754501010",
    "_serial": "0",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "19",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:23:29 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=397\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Out-Default): \"Out-Default\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 26c8b83e-4d53-4db2-8ac0-0e6a3fd458ae\n        Host Application = powershell.exe -Command netstat -an\n        Engine Version = 5.1.20348.3932\n        Runspace ID = 22b96696-4e37-4a9f-9ddc-38cca54480d0\n        Pipeline ID = 1\n        Command Name = \n        Command Type = Script\n        Script Name = \n        Command Path = \n        Sequence Number = 16\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:23:29.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:6203",
    "_indextime": "1754501010",
    "_serial": "1",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "37",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:23:29 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4104\nEventType=5\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Verbose\nRecordNumber=396\nKeywords=None\nTaskCategory=Execute a Remote Command\nOpCode=On create calls\nMessage=Creating Scriptblock text (1 of 1):\nnetstat -an\n\nScriptBlock ID: 7491b9b5-0542-40bc-8de4-ccbbb08b0504\nPath:",
    "_time": "2025-08-06T17:23:29.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:6187",
    "_indextime": "1754501010",
    "_serial": "2",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "19",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:23:29 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=40962\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=395\nKeywords=None\nTaskCategory=PowerShell Console Startup\nOpCode=Stop\nMessage=PowerShell console is ready for user input",
    "_time": "2025-08-06T17:23:29.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:6173",
    "_indextime": "1754501010",
    "_serial": "3",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "15",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:23:29 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=53504\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=394\nKeywords=None\nTaskCategory=PowerShell Named Pipe IPC\nOpCode=Open (async)\nMessage=Windows PowerShell has started an IPC listening thread on process: 3936 in AppDomain: DefaultAppDomain.",
    "_time": "2025-08-06T17:23:29.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:6157",
    "_indextime": "1754501010",
    "_serial": "4",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "15",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:23:29 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=40961\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=393\nKeywords=None\nTaskCategory=PowerShell Console Startup\nOpCode=Start\nMessage=PowerShell console is starting up",
    "_time": "2025-08-06T17:23:29.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:6143",
    "_indextime": "1754501010",
    "_serial": "5",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "15",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:23:46 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4104\nEventType=5\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Verbose\nRecordNumber=404\nKeywords=None\nTaskCategory=Execute a Remote Command\nOpCode=On create calls\nMessage=Creating Scriptblock text (1 of 1):\n$global:?\n\nScriptBlock ID: 4331fabb-f5a4-4de0-9a37-e2e8d23e8f67\nPath:",
    "_time": "2025-08-06T17:23:46.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:6351",
    "_indextime": "1754501026",
    "_serial": "0",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "19",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:23:46 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=403\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Out-Default): \"Out-Default\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 9c82bee0-4c14-467e-abf7-fac752efda0f\n        Host Application = powershell.exe -Command nslookup www.google.com\n        Engine Version = 5.1.20348.3932\n        Runspace ID = 9b24f7bd-f66b-4e7c-a3dd-725322b6c2f1\n        Pipeline ID = 1\n        Command Name = \n        Command Type = Script\n        Script Name = \n        Command Path = \n        Sequence Number = 16\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:23:46.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:6316",
    "_indextime": "1754501026",
    "_serial": "1",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "37",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:23:46 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4104\nEventType=5\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Verbose\nRecordNumber=402\nKeywords=None\nTaskCategory=Execute a Remote Command\nOpCode=On create calls\nMessage=Creating Scriptblock text (1 of 1):\nnslookup www.google.com\n\nScriptBlock ID: 6f1db82b-4cc8-465d-8eb3-1b967433447a\nPath:",
    "_time": "2025-08-06T17:23:46.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:6299",
    "_indextime": "1754501026",
    "_serial": "2",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "19",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:23:46 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=40962\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=401\nKeywords=None\nTaskCategory=PowerShell Console Startup\nOpCode=Stop\nMessage=PowerShell console is ready for user input",
    "_time": "2025-08-06T17:23:46.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:6285",
    "_indextime": "1754501026",
    "_serial": "3",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "15",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:23:46 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=53504\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=400\nKeywords=None\nTaskCategory=PowerShell Named Pipe IPC\nOpCode=Open (async)\nMessage=Windows PowerShell has started an IPC listening thread on process: 4188 in AppDomain: DefaultAppDomain.",
    "_time": "2025-08-06T17:23:46.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:6269",
    "_indextime": "1754501026",
    "_serial": "4",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "15",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:23:46 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=40961\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=399\nKeywords=None\nTaskCategory=PowerShell Console Startup\nOpCode=Start\nMessage=PowerShell console is starting up",
    "_time": "2025-08-06T17:23:46.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:6255",
    "_indextime": "1754501026",
    "_serial": "5",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "15",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:24:03 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4104\nEventType=5\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Verbose\nRecordNumber=410\nKeywords=None\nTaskCategory=Execute a Remote Command\nOpCode=On create calls\nMessage=Creating Scriptblock text (1 of 1):\n$global:?\n\nScriptBlock ID: 7b1934e9-5975-40e0-95e3-64b738fe33d4\nPath:",
    "_time": "2025-08-06T17:24:03.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:6463",
    "_indextime": "1754501044",
    "_serial": "0",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "19",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:24:03 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=409\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Out-Default): \"Out-Default\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 90d208d8-a3f6-44a5-8fb4-1e6395be594d\n        Host Application = powershell.exe -Command net share\n        Engine Version = 5.1.20348.3932\n        Runspace ID = 7949dc51-9ab6-4131-acee-62f68f5acfde\n        Pipeline ID = 1\n        Command Name = \n        Command Type = Script\n        Script Name = \n        Command Path = \n        Sequence Number = 16\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:24:03.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:6428",
    "_indextime": "1754501044",
    "_serial": "1",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "37",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:24:03 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4104\nEventType=5\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Verbose\nRecordNumber=408\nKeywords=None\nTaskCategory=Execute a Remote Command\nOpCode=On create calls\nMessage=Creating Scriptblock text (1 of 1):\nnet share\n\nScriptBlock ID: 465dc132-8a87-4390-927a-009b9df29954\nPath:",
    "_time": "2025-08-06T17:24:03.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:6412",
    "_indextime": "1754501044",
    "_serial": "2",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "19",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:24:03 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=40962\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=407\nKeywords=None\nTaskCategory=PowerShell Console Startup\nOpCode=Stop\nMessage=PowerShell console is ready for user input",
    "_time": "2025-08-06T17:24:03.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:6398",
    "_indextime": "1754501044",
    "_serial": "3",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "15",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:24:03 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=53504\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=406\nKeywords=None\nTaskCategory=PowerShell Named Pipe IPC\nOpCode=Open (async)\nMessage=Windows PowerShell has started an IPC listening thread on process: 2968 in AppDomain: DefaultAppDomain.",
    "_time": "2025-08-06T17:24:03.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:6382",
    "_indextime": "1754501044",
    "_serial": "4",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "15",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:24:03 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=40961\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=405\nKeywords=None\nTaskCategory=PowerShell Console Startup\nOpCode=Start\nMessage=PowerShell console is starting up",
    "_time": "2025-08-06T17:24:03.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:6368",
    "_indextime": "1754501044",
    "_serial": "5",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "15",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:24:23 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4104\nEventType=5\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Verbose\nRecordNumber=522\nKeywords=None\nTaskCategory=Execute a Remote Command\nOpCode=On create calls\nMessage=Creating Scriptblock text (1 of 1):\n$global:?\n\nScriptBlock ID: 470cc815-310a-473d-a0c0-b2abcbe10ff4\nPath:",
    "_time": "2025-08-06T17:24:23.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:23668",
    "_indextime": "1754501064",
    "_serial": "0",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "19",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:24:23 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=521\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Out-Default): \"Out-Default\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"fe80::1b0e:574:8bc4:3684%6\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"::1\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"10.0.0.5\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"127.0.0.1\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 3d722da8-4c22-4035-ae86-da8b8d39bbd9\n        Host Application = powershell.exe -Command Get-NetIPAddress\n        Engine Version = 5.1.20348.3932\n        Runspace ID = a126cfe4-e1d1-496d-9c5a-1ee8bf7f15cd\n        Pipeline ID = 1\n        Command Name = \n        Command Type = Script\n        Script Name = \n        Command Path = \n        Sequence Number = 150\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:24:23.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:23624",
    "_indextime": "1754501064",
    "_serial": "1",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "41",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:24:23 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=520\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Get-NetIPAddress): \"Get-NetIPAddress\"\nParameterBinding(Get-NetIPAddress): name=\"PolicyStore\"; value=\"\"\nParameterBinding(Get-NetIPAddress): name=\"IncludeAllCompartments\"; value=\"False\"\nParameterBinding(Get-NetIPAddress): name=\"ThrottleLimit\"; value=\"0\"\nParameterBinding(Get-NetIPAddress): name=\"AsJob\"; value=\"False\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 3d722da8-4c22-4035-ae86-da8b8d39bbd9\n        Host Application = powershell.exe -Command Get-NetIPAddress\n        Engine Version = 5.1.20348.3932\n        Runspace ID = a126cfe4-e1d1-496d-9c5a-1ee8bf7f15cd\n        Pipeline ID = 1\n        Command Name = Get-NetIPAddress\n        Command Type = Function\n        Script Name = \n        Command Path = \n        Sequence Number = 148\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:24:23.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:23579",
    "_indextime": "1754501064",
    "_serial": "2",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "41",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:24:23 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4104\nEventType=5\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Verbose\nRecordNumber=519\nKeywords=None\nTaskCategory=Execute a Remote Command\nOpCode=On create calls\nMessage=Creating Scriptblock text (1 of 1):\nfunction __cmdletization_BindCommonParameters\n{\n    param(\n        $__cmdletization_objectModelWrapper,\n        $myPSBoundParameters\n    )       \n                \n\n        if ($myPSBoundParameters.ContainsKey('CimSession')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('AsJob')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] \n        }\n                    \n\n}\n\nScriptBlock ID: 5f07cd0f-c7ef-4e28-9640-f52c3d77ece5\nPath:",
    "_time": "2025-08-06T17:24:23.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:23536",
    "_indextime": "1754501064",
    "_serial": "3",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "42",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:24:22 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=518\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"TNC\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Test-NetConnection\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 3d722da8-4c22-4035-ae86-da8b8d39bbd9\n        Host Application = powershell.exe -Command Get-NetIPAddress\n        Engine Version = 5.1.20348.3932\n        Runspace ID = a126cfe4-e1d1-496d-9c5a-1ee8bf7f15cd\n        Pipeline ID = 20\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = C:\\Windows\\system32\\WindowsPowerShell\\v1.0\\Modules\\NetTCPIP\\Test-NetConnection.psm1\n        Command Path = \n        Sequence Number = 146\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:24:22.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:23492",
    "_indextime": "1754501064",
    "_serial": "4",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "39",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:24:22 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=517\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(New-Alias): \"New-Alias\"\nParameterBinding(New-Alias): name=\"Name\"; value=\"TNC\"\nParameterBinding(New-Alias): name=\"Value\"; value=\"Test-NetConnection\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 3d722da8-4c22-4035-ae86-da8b8d39bbd9\n        Host Application = powershell.exe -Command Get-NetIPAddress\n        Engine Version = 5.1.20348.3932\n        Runspace ID = a126cfe4-e1d1-496d-9c5a-1ee8bf7f15cd\n        Pipeline ID = 20\n        Command Name = New-Alias\n        Command Type = Cmdlet\n        Script Name = C:\\Windows\\system32\\WindowsPowerShell\\v1.0\\Modules\\NetTCPIP\\Test-NetConnection.psm1\n        Command Path = \n        Sequence Number = 144\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:24:22.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:23450",
    "_indextime": "1754501064",
    "_serial": "5",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "39",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:24:22 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=516\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"gip\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Get-NetIPConfiguration\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 3d722da8-4c22-4035-ae86-da8b8d39bbd9\n        Host Application = powershell.exe -Command Get-NetIPAddress\n        Engine Version = 5.1.20348.3932\n        Runspace ID = a126cfe4-e1d1-496d-9c5a-1ee8bf7f15cd\n        Pipeline ID = 20\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = C:\\Windows\\system32\\WindowsPowerShell\\v1.0\\Modules\\NetTCPIP\\NetIPConfiguration.psm1\n        Command Path = \n        Sequence Number = 142\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:24:22.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:23406",
    "_indextime": "1754501062",
    "_serial": "6",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "39",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:24:22 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=515\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(New-Alias): \"New-Alias\"\nParameterBinding(New-Alias): name=\"Name\"; value=\"gip\"\nParameterBinding(New-Alias): name=\"Value\"; value=\"Get-NetIPConfiguration\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 3d722da8-4c22-4035-ae86-da8b8d39bbd9\n        Host Application = powershell.exe -Command Get-NetIPAddress\n        Engine Version = 5.1.20348.3932\n        Runspace ID = a126cfe4-e1d1-496d-9c5a-1ee8bf7f15cd\n        Pipeline ID = 20\n        Command Name = New-Alias\n        Command Type = Cmdlet\n        Script Name = C:\\Windows\\system32\\WindowsPowerShell\\v1.0\\Modules\\NetTCPIP\\NetIPConfiguration.psm1\n        Command Path = \n        Sequence Number = 140\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:24:22.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:23364",
    "_indextime": "1754501062",
    "_serial": "7",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "39",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:24:22 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=514\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Set-NetUDPSetting\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 3d722da8-4c22-4035-ae86-da8b8d39bbd9\n        Host Application = powershell.exe -Command Get-NetIPAddress\n        Engine Version = 5.1.20348.3932\n        Runspace ID = a126cfe4-e1d1-496d-9c5a-1ee8bf7f15cd\n        Pipeline ID = 20\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 138\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:24:22.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:23323",
    "_indextime": "1754501062",
    "_serial": "8",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "39",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:24:22 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=513\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Get-NetUDPSetting\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 3d722da8-4c22-4035-ae86-da8b8d39bbd9\n        Host Application = powershell.exe -Command Get-NetIPAddress\n        Engine Version = 5.1.20348.3932\n        Runspace ID = a126cfe4-e1d1-496d-9c5a-1ee8bf7f15cd\n        Pipeline ID = 20\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 136\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:24:22.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:23282",
    "_indextime": "1754501062",
    "_serial": "9",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "39",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:24:22 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=512\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 3d722da8-4c22-4035-ae86-da8b8d39bbd9\n        Host Application = powershell.exe -Command Get-NetIPAddress\n        Engine Version = 5.1.20348.3932\n        Runspace ID = a126cfe4-e1d1-496d-9c5a-1ee8bf7f15cd\n        Pipeline ID = 20\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 134\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:24:22.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:23244",
    "_indextime": "1754501062",
    "_serial": "10",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "38",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:24:22 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=511\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Set-StrictMode): \"Set-StrictMode\"\nParameterBinding(Set-StrictMode): name=\"Off\"; value=\"True\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 3d722da8-4c22-4035-ae86-da8b8d39bbd9\n        Host Application = powershell.exe -Command Get-NetIPAddress\n        Engine Version = 5.1.20348.3932\n        Runspace ID = a126cfe4-e1d1-496d-9c5a-1ee8bf7f15cd\n        Pipeline ID = 20\n        Command Name = Set-StrictMode\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 132\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:24:22.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:23206",
    "_indextime": "1754501062",
    "_serial": "11",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "38",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:24:22 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4104\nEventType=3\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Warning\nRecordNumber=510\nKeywords=None\nTaskCategory=Execute a Remote Command\nOpCode=On create calls\nMessage=Splunk could not get the description for this event. Either the component that raises this event is not installed on your local computer or the installation is corrupt.\n\nFormatMessage error:\n\nGot the following information from this event: \n\n\n#requires -version 3.0\n\ntry { Microsoft.PowerShell.Core\\Set-StrictMode -Off } catch { }\n\n$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module\n\n$script:ClassName = 'ROOT/StandardCimv2/MSFT_NetUDPSetting'\n$script:ClassVersion = '1.0.0'\n$script:ModuleVersion = '1.0.0'\n$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]\n\n$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()\n\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function @()\n        \n\nfunction __cmdletization_BindCommonParameters\n{\n    param(\n        $__cmdletization_objectModelWrapper,\n        $myPSBoundParameters\n    )       \n                \n\n        if ($myPSBoundParameters.ContainsKey('CimSession')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('AsJob')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] \n        }\n                    \n\n}\n                \n\nfunction Get-NetUDPSetting\n{\n    [CmdletBinding(DefaultParameterSetName='ByName', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/StandardCimv2/MSFT_NetUDPSetting')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByName', Position=0)]\n    [ValidateNotNull()]\n    [uint16[]]\n    ${DynamicPortRangeStartPort},\n\n    [Parameter(ParameterSetName='ByName', Position=1)]\n    [ValidateNotNull()]\n    [uint16[]]\n    ${DynamicPortRangeNumberOfPorts},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [switch]\n    ${AsJob})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('DynamicPortRangeStartPort') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DynamicPortRangeStartPort})\n        $__cmdletization_queryBuilder.FilterByProperty('DynamicPortRangeStartPort', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DynamicPortRangeNumberOfPorts') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DynamicPortRangeNumberOfPorts})\n        $__cmdletization_queryBuilder.FilterByProperty('DynamicPortRangeNumberOfPorts', $__cmdletization_values, $false, 'Default')\n    }\n\n\n    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP MSFT_NetUDPSetting.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Get-NetUDPSetting' -Alias '*'\n        \n\nfunction Set-NetUDPSetting\n{\n    [CmdletBinding(DefaultParameterSetName='InputObject (cdxml)', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/StandardCimv2/MSFT_NetUDPSetting')]\n\n    param(\n    \n    [Parameter(ParameterSetName='InputObject (cdxml)', ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetUDPSetting')]\n    [ValidateNotNull()]\n    [ciminstance[]]\n    ${InputObject},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [uint16]\n    ${DynamicPortRangeStartPort},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [uint16]\n    ${DynamicPortRangeNumberOfPorts},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${AsJob},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${PassThru})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n\n\n    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n    switch -exact ($PSCmdlet.ParameterSetName) { \n        { @('InputObject (cdxml)') -contains $_ } {\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('DynamicPortRangeStartPort')) {\n            [object]$__cmdletization_value = ${DynamicPortRangeStartPort}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DynamicPortRangeStartPort'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DynamicPortRangeStartPort'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('DynamicPortRangeNumberOfPorts')) {\n            [object]$__cmdletization_value = ${DynamicPortRangeNumberOfPorts}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DynamicPortRangeNumberOfPorts'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DynamicPortRangeNumberOfPorts'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n      $__cmdletization_returnValue = $null\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:ModifyInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru\n            if ($PSBoundParameters.ContainsKey('InputObject')) {\n                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }\n            } else {\n                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)\n            }\n        }\n    }\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP MSFT_NetUDPSetting.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Set-NetUDPSetting' -Alias '*'\n        \n\n47c289f9-9c07-4921-9ada-1fe1d87bc770",
    "_time": "2025-08-06T17:24:22.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:22833",
    "_indextime": "1754501062",
    "_serial": "12",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "327",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:24:22 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=509\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Get-NetUDPEndpoint\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 3d722da8-4c22-4035-ae86-da8b8d39bbd9\n        Host Application = powershell.exe -Command Get-NetIPAddress\n        Engine Version = 5.1.20348.3932\n        Runspace ID = a126cfe4-e1d1-496d-9c5a-1ee8bf7f15cd\n        Pipeline ID = 20\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 130\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:24:22.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:22792",
    "_indextime": "1754501062",
    "_serial": "13",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "39",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:24:22 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=508\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 3d722da8-4c22-4035-ae86-da8b8d39bbd9\n        Host Application = powershell.exe -Command Get-NetIPAddress\n        Engine Version = 5.1.20348.3932\n        Runspace ID = a126cfe4-e1d1-496d-9c5a-1ee8bf7f15cd\n        Pipeline ID = 20\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 128\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:24:22.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:22754",
    "_indextime": "1754501062",
    "_serial": "14",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "38",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:24:22 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=507\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Set-StrictMode): \"Set-StrictMode\"\nParameterBinding(Set-StrictMode): name=\"Off\"; value=\"True\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 3d722da8-4c22-4035-ae86-da8b8d39bbd9\n        Host Application = powershell.exe -Command Get-NetIPAddress\n        Engine Version = 5.1.20348.3932\n        Runspace ID = a126cfe4-e1d1-496d-9c5a-1ee8bf7f15cd\n        Pipeline ID = 20\n        Command Name = Set-StrictMode\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 126\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:24:22.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:22716",
    "_indextime": "1754501062",
    "_serial": "15",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "38",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:24:22 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4104\nEventType=3\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Warning\nRecordNumber=506\nKeywords=None\nTaskCategory=Execute a Remote Command\nOpCode=On create calls\nMessage=Creating Scriptblock text (1 of 1):\n\n#requires -version 3.0\n\ntry { Microsoft.PowerShell.Core\\Set-StrictMode -Off } catch { }\n\n$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module\n\n$script:ClassName = 'ROOT/StandardCimv2/MSFT_NetUDPEndpoint'\n$script:ClassVersion = '1.0.0'\n$script:ModuleVersion = '1.0.0'\n$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]\n\n$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()\n\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function @()\n        \n\nfunction __cmdletization_BindCommonParameters\n{\n    param(\n        $__cmdletization_objectModelWrapper,\n        $myPSBoundParameters\n    )       \n                \n\n        if ($myPSBoundParameters.ContainsKey('CimSession')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('AsJob')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] \n        }\n                    \n\n}\n                \n\nfunction Get-NetUDPEndpoint\n{\n    [CmdletBinding(DefaultParameterSetName='ByName', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/StandardCimv2/MSFT_NetUDPEndpoint')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByName', Position=0, ValueFromPipelineByPropertyName=$true)]\n    [Alias('IPAddress')]\n    [ValidateNotNull()]\n    [string[]]\n    ${LocalAddress},\n\n    [Parameter(ParameterSetName='ByName', Position=1)]\n    [ValidateNotNull()]\n    [uint16[]]\n    ${LocalPort},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${OwningProcess},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [datetime[]]\n    ${CreationTime},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [switch]\n    ${AsJob})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('LocalAddress') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${LocalAddress})\n        $__cmdletization_queryBuilder.FilterByProperty('LocalAddress', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('LocalPort') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${LocalPort})\n        $__cmdletization_queryBuilder.FilterByProperty('LocalPort', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('OwningProcess') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${OwningProcess})\n        $__cmdletization_queryBuilder.FilterByProperty('OwningProcess', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('CreationTime') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${CreationTime})\n        $__cmdletization_queryBuilder.FilterByProperty('CreationTime', $__cmdletization_values, $false, 'Default')\n    }\n\n\n    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP MSFT_NetUDPEndpoint.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Get-NetUDPEndpoint' -Alias '*'\n        \n\n\nScriptBlock ID: 96a10667-c203-49df-8120-c06552aa4ce7\nPath:",
    "_time": "2025-08-06T17:24:22.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:22518",
    "_indextime": "1754501062",
    "_serial": "16",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "195",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:24:22 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=505\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Remove-NetTransportFilter\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 3d722da8-4c22-4035-ae86-da8b8d39bbd9\n        Host Application = powershell.exe -Command Get-NetIPAddress\n        Engine Version = 5.1.20348.3932\n        Runspace ID = a126cfe4-e1d1-496d-9c5a-1ee8bf7f15cd\n        Pipeline ID = 20\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 124\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:24:22.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:22477",
    "_indextime": "1754501062",
    "_serial": "17",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "39",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:24:22 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=504\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Get-NetTransportFilter\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 3d722da8-4c22-4035-ae86-da8b8d39bbd9\n        Host Application = powershell.exe -Command Get-NetIPAddress\n        Engine Version = 5.1.20348.3932\n        Runspace ID = a126cfe4-e1d1-496d-9c5a-1ee8bf7f15cd\n        Pipeline ID = 20\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 122\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:24:22.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:22436",
    "_indextime": "1754501062",
    "_serial": "18",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "39",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:24:22 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=503\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"New-NetTransportFilter\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 3d722da8-4c22-4035-ae86-da8b8d39bbd9\n        Host Application = powershell.exe -Command Get-NetIPAddress\n        Engine Version = 5.1.20348.3932\n        Runspace ID = a126cfe4-e1d1-496d-9c5a-1ee8bf7f15cd\n        Pipeline ID = 20\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 120\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:24:22.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:22395",
    "_indextime": "1754501062",
    "_serial": "19",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "39",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:24:22 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=502\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 3d722da8-4c22-4035-ae86-da8b8d39bbd9\n        Host Application = powershell.exe -Command Get-NetIPAddress\n        Engine Version = 5.1.20348.3932\n        Runspace ID = a126cfe4-e1d1-496d-9c5a-1ee8bf7f15cd\n        Pipeline ID = 20\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 118\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:24:22.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:22357",
    "_indextime": "1754501062",
    "_serial": "20",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "38",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:24:22 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=501\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Set-StrictMode): \"Set-StrictMode\"\nParameterBinding(Set-StrictMode): name=\"Off\"; value=\"True\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 3d722da8-4c22-4035-ae86-da8b8d39bbd9\n        Host Application = powershell.exe -Command Get-NetIPAddress\n        Engine Version = 5.1.20348.3932\n        Runspace ID = a126cfe4-e1d1-496d-9c5a-1ee8bf7f15cd\n        Pipeline ID = 20\n        Command Name = Set-StrictMode\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 116\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:24:22.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:22319",
    "_indextime": "1754501062",
    "_serial": "21",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "38",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:24:22 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4104\nEventType=3\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Warning\nRecordNumber=500\nKeywords=None\nTaskCategory=Execute a Remote Command\nOpCode=On create calls\nMessage=Splunk could not get the description for this event. Either the component that raises this event is not installed on your local computer or the installation is corrupt.\n\nFormatMessage error:\n\nGot the following information from this event: \n\nization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('SettingName') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${SettingName})\n        $__cmdletization_queryBuilder.FilterByProperty('SettingName', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Protocol') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Protocol})\n        $__cmdletization_queryBuilder.FilterByProperty('Protocol', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('LocalPortStart') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${LocalPortStart})\n        $__cmdletization_queryBuilder.FilterByProperty('LocalPortStart', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('LocalPortEnd') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${LocalPortEnd})\n        $__cmdletization_queryBuilder.FilterByProperty('LocalPortEnd', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('RemotePortStart') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${RemotePortStart})\n        $__cmdletization_queryBuilder.FilterByProperty('RemotePortStart', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('RemotePortEnd') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${RemotePortEnd})\n        $__cmdletization_queryBuilder.FilterByProperty('RemotePortEnd', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DestinationPrefix') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DestinationPrefix})\n        $__cmdletization_queryBuilder.FilterByProperty('DestinationPrefix', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedTCPSetting') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedTCPSetting}, 'MSFT_NetTransportFilterTCPSetting', 'Dependent', 'Antecedent', 'Default')\n    }\n\n\n    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP MSFT_NetTransportFilter.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Get-NetTransportFilter' -Alias '*'\n        \n\nfunction Remove-NetTransportFilter\n{\n    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='High', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/StandardCimv2/MSFT_NetTransportFilter')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [string[]]\n    ${SettingName},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTransportFilter.Protocol[]]\n    ${Protocol},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [uint16[]]\n    ${LocalPortStart},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [uint16[]]\n    ${LocalPortEnd},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [uint16[]]\n    ${RemotePortStart},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [uint16[]]\n    ${RemotePortEnd},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [string[]]\n    ${DestinationPrefix},\n\n    [Parameter(ParameterSetName='ByName', ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetTCPSetting')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedTCPSetting},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetTransportFilter')]\n    [ValidateNotNull()]\n    [ciminstance[]]\n    ${InputObject},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${AsJob},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${PassThru})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('SettingName') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${SettingName})\n        $__cmdletization_queryBuilder.FilterByProperty('SettingName', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Protocol') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Protocol})\n        $__cmdletization_queryBuilder.FilterByProperty('Protocol', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('LocalPortStart') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${LocalPortStart})\n        $__cmdletization_queryBuilder.FilterByProperty('LocalPortStart', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('LocalPortEnd') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${LocalPortEnd})\n        $__cmdletization_queryBuilder.FilterByProperty('LocalPortEnd', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('RemotePortStart') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${RemotePortStart})\n        $__cmdletization_queryBuilder.FilterByProperty('RemotePortStart', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('RemotePortEnd') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${RemotePortEnd})\n        $__cmdletization_queryBuilder.FilterByProperty('RemotePortEnd', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DestinationPrefix') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DestinationPrefix})\n        $__cmdletization_queryBuilder.FilterByProperty('DestinationPrefix', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedTCPSetting') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedTCPSetting}, 'MSFT_NetTransportFilterTCPSetting', 'Dependent', 'Antecedent', 'Default')\n    }\n\n\n    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n    switch -exact ($PSCmdlet.ParameterSetName) { \n        { @('ByName', 'InputObject (cdxml)') -contains $_ } {\n      $__cmdletization_returnValue = $null\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:DeleteInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru\n            if ($PSBoundParameters.ContainsKey('InputObject')) {\n                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }\n            } else {\n                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)\n            }\n        }\n    }\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP MSFT_NetTransportFilter.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Remove-NetTransportFilter' -Alias '*'\n        \n\naafff583-8592-456e-9538-c4791edb3277",
    "_time": "2025-08-06T17:24:22.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:21956",
    "_indextime": "1754501062",
    "_serial": "22",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "283",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:24:22 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4104\nEventType=3\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Warning\nRecordNumber=499\nKeywords=None\nTaskCategory=Execute a Remote Command\nOpCode=On create calls\nMessage=Splunk could not get the description for this event. Either the component that raises this event is not installed on your local computer or the installation is corrupt.\n\nFormatMessage error:\n\nGot the following information from this event: \n\n\n#requires -version 3.0\n\ntry { Microsoft.PowerShell.Core\\Set-StrictMode -Off } catch { }\n\n$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module\n\n$script:ClassName = 'ROOT/StandardCimv2/MSFT_NetTransportFilter'\n$script:ClassVersion = '1.0.0'\n$script:ModuleVersion = '1.0.0'\n$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]\n\n$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()\n\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function @()\n        \n\nfunction __cmdletization_BindCommonParameters\n{\n    param(\n        $__cmdletization_objectModelWrapper,\n        $myPSBoundParameters\n    )       \n                \n\n        if ($myPSBoundParameters.ContainsKey('CimSession')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('AsJob')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] \n        }\n                    \n\n}\n                \n\nfunction New-NetTransportFilter\n{\n    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]\n    \n    \n    param(\n    \n    [Parameter(ParameterSetName='cim:CreateInstance0', Mandatory=$true)]\n    [string]\n    ${SettingName},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTransportFilter.Protocol]\n    ${Protocol},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [uint16]\n    ${LocalPortStart},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [uint16]\n    ${LocalPortEnd},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [uint16]\n    ${RemotePortStart},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [uint16]\n    ${RemotePortEnd},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [string]\n    ${DestinationPrefix},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [switch]\n    ${AsJob})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n      $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('SettingName')) {\n          [object]$__cmdletization_value = ${SettingName}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SettingName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SettingName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('Protocol')) {\n          [object]$__cmdletization_value = ${Protocol}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Protocol'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTransportFilter.Protocol'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Protocol'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTransportFilter.Protocol'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('LocalPortStart')) {\n          [object]$__cmdletization_value = ${LocalPortStart}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LocalPortStart'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LocalPortStart'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('LocalPortEnd')) {\n          [object]$__cmdletization_value = ${LocalPortEnd}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LocalPortEnd'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LocalPortEnd'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('RemotePortStart')) {\n          [object]$__cmdletization_value = ${RemotePortStart}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemotePortStart'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemotePortStart'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('RemotePortEnd')) {\n          [object]$__cmdletization_value = ${RemotePortEnd}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemotePortEnd'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemotePortEnd'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('DestinationPrefix')) {\n          [object]$__cmdletization_value = ${DestinationPrefix}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DestinationPrefix'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DestinationPrefix'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:CreateInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo)\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP MSFT_NetTransportFilter.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'New-NetTransportFilter' -Alias '*'\n        \n\nfunction Get-NetTransportFilter\n{\n    [CmdletBinding(PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/StandardCimv2/MSFT_NetTransportFilter')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [string[]]\n    ${SettingName},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTransportFilter.Protocol[]]\n    ${Protocol},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [uint16[]]\n    ${LocalPortStart},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [uint16[]]\n    ${LocalPortEnd},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [uint16[]]\n    ${RemotePortStart},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [uint16[]]\n    ${RemotePortEnd},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [string[]]\n    ${DestinationPrefix},\n\n    [Parameter(ParameterSetName='ByName', ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetTCPSetting')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedTCPSetting},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [switch]\n    ${AsJob})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdlet\naafff583-8592-456e-9538-c4791edb3277",
    "_time": "2025-08-06T17:24:22.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:21486",
    "_indextime": "1754501062",
    "_serial": "23",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "363",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:24:22 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=498\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Set-NetTCPSetting\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 3d722da8-4c22-4035-ae86-da8b8d39bbd9\n        Host Application = powershell.exe -Command Get-NetIPAddress\n        Engine Version = 5.1.20348.3932\n        Runspace ID = a126cfe4-e1d1-496d-9c5a-1ee8bf7f15cd\n        Pipeline ID = 20\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 114\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:24:22.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:21445",
    "_indextime": "1754501062",
    "_serial": "24",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "39",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:24:22 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=497\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Get-NetTCPSetting\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 3d722da8-4c22-4035-ae86-da8b8d39bbd9\n        Host Application = powershell.exe -Command Get-NetIPAddress\n        Engine Version = 5.1.20348.3932\n        Runspace ID = a126cfe4-e1d1-496d-9c5a-1ee8bf7f15cd\n        Pipeline ID = 20\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 112\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:24:22.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:21404",
    "_indextime": "1754501062",
    "_serial": "25",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "39",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:24:22 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=496\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 3d722da8-4c22-4035-ae86-da8b8d39bbd9\n        Host Application = powershell.exe -Command Get-NetIPAddress\n        Engine Version = 5.1.20348.3932\n        Runspace ID = a126cfe4-e1d1-496d-9c5a-1ee8bf7f15cd\n        Pipeline ID = 20\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 110\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:24:22.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:21366",
    "_indextime": "1754501062",
    "_serial": "26",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "38",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:24:22 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=495\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Set-StrictMode): \"Set-StrictMode\"\nParameterBinding(Set-StrictMode): name=\"Off\"; value=\"True\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 3d722da8-4c22-4035-ae86-da8b8d39bbd9\n        Host Application = powershell.exe -Command Get-NetIPAddress\n        Engine Version = 5.1.20348.3932\n        Runspace ID = a126cfe4-e1d1-496d-9c5a-1ee8bf7f15cd\n        Pipeline ID = 20\n        Command Name = Set-StrictMode\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 108\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:24:22.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:21328",
    "_indextime": "1754501062",
    "_serial": "27",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "38",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:24:22 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4104\nEventType=3\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Warning\nRecordNumber=494\nKeywords=None\nTaskCategory=Execute a Remote Command\nOpCode=On create calls\nMessage=Splunk could not get the description for this event. Either the component that raises this event is not installed on your local computer or the installation is corrupt.\n\nFormatMessage error:\n\nGot the following information from this event: \n\nValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('EcnCapability')) {\n            [object]$__cmdletization_value = ${EcnCapability}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EcnCapability'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.EcnCapability'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EcnCapability'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.EcnCapability'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('Timestamps')) {\n            [object]$__cmdletization_value = ${Timestamps}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Timestamps'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.Timestamps'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Timestamps'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.Timestamps'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('InitialRtoMs')) {\n            [object]$__cmdletization_value = ${InitialRtoMs}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InitialRto'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InitialRto'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('ScalingHeuristics')) {\n            [object]$__cmdletization_value = ${ScalingHeuristics}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScalingHeuristics'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.ScalingHeuristics'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScalingHeuristics'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.ScalingHeuristics'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('DynamicPortRangeStartPort')) {\n            [object]$__cmdletization_value = ${DynamicPortRangeStartPort}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DynamicPortRangeStartPort'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DynamicPortRangeStartPort'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('DynamicPortRangeNumberOfPorts')) {\n            [object]$__cmdletization_value = ${DynamicPortRangeNumberOfPorts}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DynamicPortRangeNumberOfPorts'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DynamicPortRangeNumberOfPorts'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('AutomaticUseCustom')) {\n            [object]$__cmdletization_value = ${AutomaticUseCustom}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AutomaticUseCustom'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.AutomaticUseCustom'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AutomaticUseCustom'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.AutomaticUseCustom'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('NonSackRttResiliency')) {\n            [object]$__cmdletization_value = ${NonSackRttResiliency}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NonSackRttResiliency'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.NonSackRttResiliency'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NonSackRttResiliency'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.NonSackRttResiliency'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('ForceWS')) {\n            [object]$__cmdletization_value = ${ForceWS}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ForceWS'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.ForceWS'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ForceWS'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.ForceWS'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('MaxSynRetransmissions')) {\n            [object]$__cmdletization_value = ${MaxSynRetransmissions}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MaxSynRetransmissions'; ParameterType = 'System.Byte'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MaxSynRetransmissions'; ParameterType = 'System.Byte'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('AutoReusePortRangeStartPort')) {\n            [object]$__cmdletization_value = ${AutoReusePortRangeStartPort}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AutoReusePortRangeStartPort'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AutoReusePortRangeStartPort'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('AutoReusePortRangeNumberOfPorts')) {\n            [object]$__cmdletization_value = ${AutoReusePortRangeNumberOfPorts}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AutoReusePortRangeNumberOfPorts'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AutoReusePortRangeNumberOfPorts'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n      $__cmdletization_returnValue = $null\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:ModifyInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru\n            if ($PSBoundParameters.ContainsKey('InputObject')) {\n                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }\n            } else {\n                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)\n            }\n        }\n    }\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP MSFT_NetTCPSetting.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Set-NetTCPSetting' -Alias '*'\n        \n\n59949e9d-af98-4775-84e5-f60054a98363",
    "_time": "2025-08-06T17:24:22.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:20903",
    "_indextime": "1754501062",
    "_serial": "28",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "181",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:24:22 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4104\nEventType=3\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Warning\nRecordNumber=493\nKeywords=None\nTaskCategory=Execute a Remote Command\nOpCode=On create calls\nMessage=Splunk could not get the description for this event. Either the component that raises this event is not installed on your local computer or the installation is corrupt.\n\nFormatMessage error:\n\nGot the following information from this event: \n\n  if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP MSFT_NetTCPSetting.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Get-NetTCPSetting' -Alias '*'\n        \n\nfunction Set-NetTCPSetting\n{\n    [CmdletBinding(DefaultParameterSetName='ByName', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/StandardCimv2/MSFT_NetTCPSetting')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByName', Position=0)]\n    [ValidateNotNull()]\n    [string[]]\n    ${SettingName},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetTCPSetting')]\n    [ValidateNotNull()]\n    [ciminstance[]]\n    ${InputObject},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('MinRto')]\n    [uint32]\n    ${MinRtoMs},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('InitialCongestionWindow')]\n    [uint32]\n    ${InitialCongestionWindowMss},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.CongestionProvider]\n    ${CongestionProvider},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.CwndRestart]\n    ${CwndRestart},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('DelayedAckTimeout')]\n    [uint32]\n    ${DelayedAckTimeoutMs},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [byte]\n    ${DelayedAckFrequency},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.MemoryPressureProtection]\n    ${MemoryPressureProtection},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.AutoTuningLevelLocal]\n    ${AutoTuningLevelLocal},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.EcnCapability]\n    ${EcnCapability},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.Timestamps]\n    ${Timestamps},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('InitialRto')]\n    [uint32]\n    ${InitialRtoMs},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.ScalingHeuristics]\n    ${ScalingHeuristics},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [uint16]\n    ${DynamicPortRangeStartPort},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [uint16]\n    ${DynamicPortRangeNumberOfPorts},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.AutomaticUseCustom]\n    ${AutomaticUseCustom},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.NonSackRttResiliency]\n    ${NonSackRttResiliency},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.ForceWS]\n    ${ForceWS},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [byte]\n    ${MaxSynRetransmissions},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [uint16]\n    ${AutoReusePortRangeStartPort},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [uint16]\n    ${AutoReusePortRangeNumberOfPorts},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${AsJob},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${PassThru})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('SettingName') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${SettingName})\n        $__cmdletization_queryBuilder.FilterByProperty('SettingName', $__cmdletization_values, $true, 'Default')\n    }\n\n\n    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n    switch -exact ($PSCmdlet.ParameterSetName) { \n        { @('ByName', 'InputObject (cdxml)') -contains $_ } {\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('MinRtoMs')) {\n            [object]$__cmdletization_value = ${MinRtoMs}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MinRto'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MinRto'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('InitialCongestionWindowMss')) {\n            [object]$__cmdletization_value = ${InitialCongestionWindowMss}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InitialCongestionWindow'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InitialCongestionWindow'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('CongestionProvider')) {\n            [object]$__cmdletization_value = ${CongestionProvider}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'CongestionProvider'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.CongestionProvider'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'CongestionProvider'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.CongestionProvider'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('CwndRestart')) {\n            [object]$__cmdletization_value = ${CwndRestart}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'CwndRestart'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.CwndRestart'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'CwndRestart'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.CwndRestart'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('DelayedAckTimeoutMs')) {\n            [object]$__cmdletization_value = ${DelayedAckTimeoutMs}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DelayedAckTimeout'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DelayedAckTimeout'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('DelayedAckFrequency')) {\n            [object]$__cmdletization_value = ${DelayedAckFrequency}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DelayedAckFrequency'; ParameterType = 'System.Byte'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DelayedAckFrequency'; ParameterType = 'System.Byte'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('MemoryPressureProtection')) {\n            [object]$__cmdletization_value = ${MemoryPressureProtection}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MemoryPressureProtection'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.MemoryPressureProtection'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MemoryPressureProtection'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.MemoryPressureProtection'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('AutoTuningLevelLocal')) {\n            [object]$__cmdletization_value = ${AutoTuningLevelLocal}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AutoTuningLevelLocal'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.AutoTuningLevelLocal'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AutoTuningLevelLocal'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.AutoTuningLevelLocal'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_default\n59949e9d-af98-4775-84e5-f60054a98363",
    "_time": "2025-08-06T17:24:22.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:20406",
    "_indextime": "1754501062",
    "_serial": "29",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "315",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:24:22 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4104\nEventType=3\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Warning\nRecordNumber=492\nKeywords=None\nTaskCategory=Execute a Remote Command\nOpCode=On create calls\nMessage=Splunk could not get the description for this event. Either the component that raises this event is not installed on your local computer or the installation is corrupt.\n\nFormatMessage error:\n\nGot the following information from this event: \n\n\n#requires -version 3.0\n\ntry { Microsoft.PowerShell.Core\\Set-StrictMode -Off } catch { }\n\n$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module\n\n$script:ClassName = 'ROOT/StandardCimv2/MSFT_NetTCPSetting'\n$script:ClassVersion = '1.0.0'\n$script:ModuleVersion = '1.0.0'\n$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]\n\n$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()\n\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function @()\n        \n\nfunction __cmdletization_BindCommonParameters\n{\n    param(\n        $__cmdletization_objectModelWrapper,\n        $myPSBoundParameters\n    )       \n                \n\n        if ($myPSBoundParameters.ContainsKey('CimSession')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('AsJob')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] \n        }\n                    \n\n}\n                \n\nfunction Get-NetTCPSetting\n{\n    [CmdletBinding(DefaultParameterSetName='ByName', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/StandardCimv2/MSFT_NetTCPSetting')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByName', Position=0)]\n    [ValidateNotNull()]\n    [string[]]\n    ${SettingName},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Alias('MinRto')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${MinRtoMs},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Alias('InitialCongestionWindow')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${InitialCongestionWindowMss},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.CongestionProvider[]]\n    ${CongestionProvider},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.CwndRestart[]]\n    ${CwndRestart},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Alias('DelayedAckTimeout')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${DelayedAckTimeoutMs},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [byte[]]\n    ${DelayedAckFrequency},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.MemoryPressureProtection[]]\n    ${MemoryPressureProtection},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.AutoTuningLevelLocal[]]\n    ${AutoTuningLevelLocal},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.AutoTuningLevelGroupPolicy[]]\n    ${AutoTuningLevelGroupPolicy},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.AutoTuningLevelEffective[]]\n    ${AutoTuningLevelEffective},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.EcnCapability[]]\n    ${EcnCapability},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.Timestamps[]]\n    ${Timestamps},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Alias('InitialRto')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${InitialRtoMs},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.ScalingHeuristics[]]\n    ${ScalingHeuristics},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [uint16[]]\n    ${DynamicPortRangeStartPort},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [uint16[]]\n    ${DynamicPortRangeNumberOfPorts},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.AutomaticUseCustom[]]\n    ${AutomaticUseCustom},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.NonSackRttResiliency[]]\n    ${NonSackRttResiliency},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.ForceWS[]]\n    ${ForceWS},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [byte[]]\n    ${MaxSynRetransmissions},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [uint16[]]\n    ${AutoReusePortRangeStartPort},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [uint16[]]\n    ${AutoReusePortRangeNumberOfPorts},\n\n    [Parameter(ParameterSetName='ByName', ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetTransportFilter')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedTransportFilter},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [switch]\n    ${AsJob})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('SettingName') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${SettingName})\n        $__cmdletization_queryBuilder.FilterByProperty('SettingName', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('MinRtoMs') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${MinRtoMs})\n        $__cmdletization_queryBuilder.FilterByProperty('MinRto', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('InitialCongestionWindowMss') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${InitialCongestionWindowMss})\n        $__cmdletization_queryBuilder.FilterByProperty('InitialCongestionWindow', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('CongestionProvider') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${CongestionProvider})\n        $__cmdletization_queryBuilder.FilterByProperty('CongestionProvider', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('CwndRestart') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${CwndRestart})\n        $__cmdletization_queryBuilder.FilterByProperty('CwndRestart', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DelayedAckTimeoutMs') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DelayedAckTimeoutMs})\n        $__cmdletization_queryBuilder.FilterByProperty('DelayedAckTimeout', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DelayedAckFrequency') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DelayedAckFrequency})\n        $__cmdletization_queryBuilder.FilterByProperty('DelayedAckFrequency', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('MemoryPressureProtection') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${MemoryPressureProtection})\n        $__cmdletization_queryBuilder.FilterByProperty('MemoryPressureProtection', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AutoTuningLevelLocal') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${AutoTuningLevelLocal})\n        $__cmdletization_queryBuilder.FilterByProperty('AutoTuningLevelLocal', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AutoTuningLevelGroupPolicy') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${AutoTuningLevelGroupPolicy})\n        $__cmdletization_queryBuilder.FilterByProperty('AutoTuningLevelGroupPolicy', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AutoTuningLevelEffective') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${AutoTuningLevelEffective})\n        $__cmdletization_queryBuilder.FilterByProperty('AutoTuningLevelEffective', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('EcnCapability') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${EcnCapability})\n        $__cmdletization_queryBuilder.FilterByProperty('EcnCapability', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Timestamps') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Timestamps})\n        $__cmdletization_queryBuilder.FilterByProperty('Timestamps', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('InitialRtoMs') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${InitialRtoMs})\n        $__cmdletization_queryBuilder.FilterByProperty('InitialRto', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('ScalingHeuristics') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${ScalingHeuristics})\n        $__cmdletization_queryBuilder.FilterByProperty('ScalingHeuristics', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DynamicPortRangeStartPort') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DynamicPortRangeStartPort})\n        $__cmdletization_queryBuilder.FilterByProperty('DynamicPortRangeStartPort', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DynamicPortRangeNumberOfPorts') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DynamicPortRangeNumberOfPorts})\n        $__cmdletization_queryBuilder.FilterByProperty('DynamicPortRangeNumberOfPorts', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AutomaticUseCustom') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${AutomaticUseCustom})\n        $__cmdletization_queryBuilder.FilterByProperty('AutomaticUseCustom', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('NonSackRttResiliency') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${NonSackRttResiliency})\n        $__cmdletization_queryBuilder.FilterByProperty('NonSackRttResiliency', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('ForceWS') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${ForceWS})\n        $__cmdletization_queryBuilder.FilterByProperty('ForceWS', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('MaxSynRetransmissions') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${MaxSynRetransmissions})\n        $__cmdletization_queryBuilder.FilterByProperty('MaxSynRetransmissions', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AutoReusePortRangeStartPort') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${AutoReusePortRangeStartPort})\n        $__cmdletization_queryBuilder.FilterByProperty('AutoReusePortRangeStartPort', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AutoReusePortRangeNumberOfPorts') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${AutoReusePortRangeNumberOfPorts})\n        $__cmdletization_queryBuilder.FilterByProperty('AutoReusePortRangeNumberOfPorts', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedTransportFilter') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedTransportFilter}, 'MSFT_NetTransportFilterTCPSetting', 'Antecedent', 'Dependent', 'Default')\n    }\n\n\n    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n          \n59949e9d-af98-4775-84e5-f60054a98363",
    "_time": "2025-08-06T17:24:22.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:19909",
    "_indextime": "1754501062",
    "_serial": "30",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "366",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:24:22 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=491\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Get-NetTCPConnection\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 3d722da8-4c22-4035-ae86-da8b8d39bbd9\n        Host Application = powershell.exe -Command Get-NetIPAddress\n        Engine Version = 5.1.20348.3932\n        Runspace ID = a126cfe4-e1d1-496d-9c5a-1ee8bf7f15cd\n        Pipeline ID = 20\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 106\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:24:22.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:19868",
    "_indextime": "1754501062",
    "_serial": "31",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "39",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:24:22 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=490\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 3d722da8-4c22-4035-ae86-da8b8d39bbd9\n        Host Application = powershell.exe -Command Get-NetIPAddress\n        Engine Version = 5.1.20348.3932\n        Runspace ID = a126cfe4-e1d1-496d-9c5a-1ee8bf7f15cd\n        Pipeline ID = 20\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 104\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:24:22.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:19830",
    "_indextime": "1754501062",
    "_serial": "32",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "38",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:24:22 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=489\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Set-StrictMode): \"Set-StrictMode\"\nParameterBinding(Set-StrictMode): name=\"Off\"; value=\"True\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 3d722da8-4c22-4035-ae86-da8b8d39bbd9\n        Host Application = powershell.exe -Command Get-NetIPAddress\n        Engine Version = 5.1.20348.3932\n        Runspace ID = a126cfe4-e1d1-496d-9c5a-1ee8bf7f15cd\n        Pipeline ID = 20\n        Command Name = Set-StrictMode\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 102\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:24:22.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:19792",
    "_indextime": "1754501062",
    "_serial": "33",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "38",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:24:22 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4104\nEventType=3\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Warning\nRecordNumber=488\nKeywords=None\nTaskCategory=Execute a Remote Command\nOpCode=On create calls\nMessage=Creating Scriptblock text (1 of 1):\n\n#requires -version 3.0\n\ntry { Microsoft.PowerShell.Core\\Set-StrictMode -Off } catch { }\n\n$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module\n\n$script:ClassName = 'ROOT/StandardCimv2/MSFT_NetTCPConnection'\n$script:ClassVersion = '1.0.0'\n$script:ModuleVersion = '1.0.0'\n$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]\n\n$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()\n\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function @()\n        \n\nfunction __cmdletization_BindCommonParameters\n{\n    param(\n        $__cmdletization_objectModelWrapper,\n        $myPSBoundParameters\n    )       \n                \n\n        if ($myPSBoundParameters.ContainsKey('CimSession')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('AsJob')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] \n        }\n                    \n\n}\n                \n\nfunction Get-NetTCPConnection\n{\n    [CmdletBinding(DefaultParameterSetName='ByName', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/StandardCimv2/MSFT_NetTCPConnection')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByName', Position=0, ValueFromPipelineByPropertyName=$true)]\n    [Alias('IPAddress')]\n    [ValidateNotNull()]\n    [string[]]\n    ${LocalAddress},\n\n    [Parameter(ParameterSetName='ByName', Position=1)]\n    [ValidateNotNull()]\n    [uint16[]]\n    ${LocalPort},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [string[]]\n    ${RemoteAddress},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [uint16[]]\n    ${RemotePort},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPConnection.State[]]\n    ${State},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPConnection.AppliedSetting[]]\n    ${AppliedSetting},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${OwningProcess},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [datetime[]]\n    ${CreationTime},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPConnection.OffloadState[]]\n    ${OffloadState},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [switch]\n    ${AsJob})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('LocalAddress') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${LocalAddress})\n        $__cmdletization_queryBuilder.FilterByProperty('LocalAddress', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('LocalPort') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${LocalPort})\n        $__cmdletization_queryBuilder.FilterByProperty('LocalPort', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('RemoteAddress') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${RemoteAddress})\n        $__cmdletization_queryBuilder.FilterByProperty('RemoteAddress', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('RemotePort') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${RemotePort})\n        $__cmdletization_queryBuilder.FilterByProperty('RemotePort', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('State') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${State})\n        $__cmdletization_queryBuilder.FilterByProperty('State', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AppliedSetting') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${AppliedSetting})\n        $__cmdletization_queryBuilder.FilterByProperty('AppliedSetting', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('OwningProcess') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${OwningProcess})\n        $__cmdletization_queryBuilder.FilterByProperty('OwningProcess', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('CreationTime') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${CreationTime})\n        $__cmdletization_queryBuilder.FilterByProperty('CreationTime', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('OffloadState') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${OffloadState})\n        $__cmdletization_queryBuilder.FilterByProperty('OffloadState', $__cmdletization_values, $false, 'Default')\n    }\n\n\n    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP MSFT_NetTCPConnection.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Get-NetTCPConnection' -Alias '*'\n        \n\n\nScriptBlock ID: 555dd0f0-ff20-4399-a71c-25bfe313b69d\nPath:",
    "_time": "2025-08-06T17:24:22.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:19525",
    "_indextime": "1754501062",
    "_serial": "34",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "240",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:24:22 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=487\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Remove-NetRoute\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 3d722da8-4c22-4035-ae86-da8b8d39bbd9\n        Host Application = powershell.exe -Command Get-NetIPAddress\n        Engine Version = 5.1.20348.3932\n        Runspace ID = a126cfe4-e1d1-496d-9c5a-1ee8bf7f15cd\n        Pipeline ID = 20\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 100\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:24:22.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:19484",
    "_indextime": "1754501062",
    "_serial": "35",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "39",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:24:22 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=486\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Set-NetRoute\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 3d722da8-4c22-4035-ae86-da8b8d39bbd9\n        Host Application = powershell.exe -Command Get-NetIPAddress\n        Engine Version = 5.1.20348.3932\n        Runspace ID = a126cfe4-e1d1-496d-9c5a-1ee8bf7f15cd\n        Pipeline ID = 20\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 98\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:24:22.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:19443",
    "_indextime": "1754501062",
    "_serial": "36",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "39",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:24:22 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=485\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Get-NetRoute\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 3d722da8-4c22-4035-ae86-da8b8d39bbd9\n        Host Application = powershell.exe -Command Get-NetIPAddress\n        Engine Version = 5.1.20348.3932\n        Runspace ID = a126cfe4-e1d1-496d-9c5a-1ee8bf7f15cd\n        Pipeline ID = 20\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 96\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:24:22.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:19402",
    "_indextime": "1754501062",
    "_serial": "37",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "39",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:24:22 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=484\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Find-NetRoute\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 3d722da8-4c22-4035-ae86-da8b8d39bbd9\n        Host Application = powershell.exe -Command Get-NetIPAddress\n        Engine Version = 5.1.20348.3932\n        Runspace ID = a126cfe4-e1d1-496d-9c5a-1ee8bf7f15cd\n        Pipeline ID = 20\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 94\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:24:22.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:19361",
    "_indextime": "1754501062",
    "_serial": "38",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "39",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:24:22 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=483\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"New-NetRoute\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 3d722da8-4c22-4035-ae86-da8b8d39bbd9\n        Host Application = powershell.exe -Command Get-NetIPAddress\n        Engine Version = 5.1.20348.3932\n        Runspace ID = a126cfe4-e1d1-496d-9c5a-1ee8bf7f15cd\n        Pipeline ID = 20\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 92\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:24:22.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:19320",
    "_indextime": "1754501062",
    "_serial": "39",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "39",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:24:22 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=482\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 3d722da8-4c22-4035-ae86-da8b8d39bbd9\n        Host Application = powershell.exe -Command Get-NetIPAddress\n        Engine Version = 5.1.20348.3932\n        Runspace ID = a126cfe4-e1d1-496d-9c5a-1ee8bf7f15cd\n        Pipeline ID = 20\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 90\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:24:22.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:19282",
    "_indextime": "1754501062",
    "_serial": "40",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "38",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:24:22 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=481\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Set-StrictMode): \"Set-StrictMode\"\nParameterBinding(Set-StrictMode): name=\"Off\"; value=\"True\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 3d722da8-4c22-4035-ae86-da8b8d39bbd9\n        Host Application = powershell.exe -Command Get-NetIPAddress\n        Engine Version = 5.1.20348.3932\n        Runspace ID = a126cfe4-e1d1-496d-9c5a-1ee8bf7f15cd\n        Pipeline ID = 20\n        Command Name = Set-StrictMode\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 88\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:24:22.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:19244",
    "_indextime": "1754501062",
    "_serial": "41",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "38",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:24:22 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4104\nEventType=3\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Warning\nRecordNumber=480\nKeywords=None\nTaskCategory=Execute a Remote Command\nOpCode=On create calls\nMessage=Creating Scriptblock text (5 of 5):\n  }\n\n\n    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n    switch -exact ($PSCmdlet.ParameterSetName) { \n        { @('ByName', 'InputObject (cdxml)') -contains $_ } {\n      $__cmdletization_returnValue = $null\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:DeleteInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru\n            if ($PSBoundParameters.ContainsKey('InputObject')) {\n                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }\n            } else {\n                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)\n            }\n        }\n    }\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP MSFT_NetRoute.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Remove-NetRoute' -Alias '*'\n        \n\n\nScriptBlock ID: 48060392-8085-4a6e-82e3-4ff6908cbacc\nPath:",
    "_time": "2025-08-06T17:24:22.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:19177",
    "_indextime": "1754501062",
    "_serial": "42",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "64",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:24:22 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4104\nEventType=3\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Warning\nRecordNumber=479\nKeywords=None\nTaskCategory=Execute a Remote Command\nOpCode=On create calls\nMessage=Splunk could not get the description for this event. Either the component that raises this event is not installed on your local computer or the installation is corrupt.\n\nFormatMessage error:\n\nGot the following information from this event: \n\nn_values = @(${NextHop})\n        $__cmdletization_queryBuilder.FilterByProperty('NextHop', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AddressFamily') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${AddressFamily})\n        $__cmdletization_queryBuilder.FilterByProperty('AddressFamily', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Protocol') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Protocol})\n        $__cmdletization_queryBuilder.FilterByProperty('Protocol', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})\n    }\n    if ($PSBoundParameters.ContainsKey('IncludeAllCompartments') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('IncludeAllCompartments', ${IncludeAllCompartments})\n    }\n\n\n    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n    switch -exact ($PSCmdlet.ParameterSetName) { \n        { @('ByName', 'InputObject (cdxml)') -contains $_ } {\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('Publish')) {\n            [object]$__cmdletization_value = ${Publish}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Publish'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetRoute.Publish'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Publish'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetRoute.Publish'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('RouteMetric')) {\n            [object]$__cmdletization_value = ${RouteMetric}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RouteMetric'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RouteMetric'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('ValidLifetime')) {\n            [object]$__cmdletization_value = ${ValidLifetime}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ValidLifetime'; ParameterType = 'System.TimeSpan'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ValidLifetime'; ParameterType = 'System.TimeSpan'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('PreferredLifetime')) {\n            [object]$__cmdletization_value = ${PreferredLifetime}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PreferredLifetime'; ParameterType = 'System.TimeSpan'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PreferredLifetime'; ParameterType = 'System.TimeSpan'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n      $__cmdletization_returnValue = $null\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:ModifyInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru\n            if ($PSBoundParameters.ContainsKey('InputObject')) {\n                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }\n            } else {\n                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)\n            }\n        }\n    }\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP MSFT_NetRoute.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Set-NetRoute' -Alias '*'\n        \n\nfunction Remove-NetRoute\n{\n    [CmdletBinding(DefaultParameterSetName='ByName', SupportsShouldProcess=$true, ConfirmImpact='High', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/StandardCimv2/MSFT_NetRoute')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByName', Position=0)]\n    [ValidateNotNull()]\n    [string[]]\n    ${DestinationPrefix},\n\n    [Parameter(ParameterSetName='ByName', ValueFromPipelineByPropertyName=$true)]\n    [Alias('ifIndex')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${InterfaceIndex},\n\n    [Parameter(ParameterSetName='ByName', ValueFromPipelineByPropertyName=$true)]\n    [Alias('ifAlias')]\n    [ValidateNotNull()]\n    [string[]]\n    ${InterfaceAlias},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [string[]]\n    ${NextHop},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetRoute.AddressFamily[]]\n    ${AddressFamily},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetRoute.Publish[]]\n    ${Publish},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [uint16[]]\n    ${RouteMetric},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetRoute.Protocol[]]\n    ${Protocol},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${CompartmentId},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [timespan[]]\n    ${ValidLifetime},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [timespan[]]\n    ${PreferredLifetime},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetRoute.State[]]\n    ${State},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${InterfaceMetric},\n\n    [Parameter(ParameterSetName='ByName', ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIPInterface')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedIPInterface},\n\n    [Parameter(ParameterSetName='ByName')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='ByName')]\n    [switch]\n    ${IncludeAllCompartments},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetRoute')]\n    [ValidateNotNull()]\n    [ciminstance[]]\n    ${InputObject},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${AsJob},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${PassThru})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('DestinationPrefix') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DestinationPrefix})\n        $__cmdletization_queryBuilder.FilterByProperty('DestinationPrefix', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('InterfaceIndex') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${InterfaceIndex})\n        $__cmdletization_queryBuilder.FilterByProperty('InterfaceIndex', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('InterfaceAlias') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${InterfaceAlias})\n        $__cmdletization_queryBuilder.FilterByProperty('InterfaceAlias', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('NextHop') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${NextHop})\n        $__cmdletization_queryBuilder.FilterByProperty('NextHop', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AddressFamily') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${AddressFamily})\n        $__cmdletization_queryBuilder.FilterByProperty('AddressFamily', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Publish') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Publish})\n        $__cmdletization_queryBuilder.FilterByProperty('Publish', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('RouteMetric') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${RouteMetric})\n        $__cmdletization_queryBuilder.FilterByProperty('RouteMetric', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Protocol') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Protocol})\n        $__cmdletization_queryBuilder.FilterByProperty('Protocol', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('CompartmentId') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${CompartmentId})\n        $__cmdletization_queryBuilder.FilterByProperty('CompartmentId', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('ValidLifetime') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${ValidLifetime})\n        $__cmdletization_queryBuilder.FilterByProperty('ValidLifetime', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PreferredLifetime') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PreferredLifetime})\n        $__cmdletization_queryBuilder.FilterByProperty('PreferredLifetime', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('State') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${State})\n        $__cmdletization_queryBuilder.FilterByProperty('State', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('InterfaceMetric') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${InterfaceMetric})\n        $__cmdletization_queryBuilder.FilterByProperty('InterfaceMetric', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedIPInterface') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedIPInterface}, 'MSFT_NetIPInterfaceRoute', 'Antecedent', 'Dependent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})\n    }\n    if ($PSBoundParameters.ContainsKey('IncludeAllCompartments') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('IncludeAllCompartments', ${IncludeAllCompartments})\n  \n48060392-8085-4a6e-82e3-4ff6908cbacc",
    "_time": "2025-08-06T17:24:22.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:18662",
    "_indextime": "1754501062",
    "_serial": "43",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "344",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:24:22 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4104\nEventType=3\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Warning\nRecordNumber=478\nKeywords=None\nTaskCategory=Execute a Remote Command\nOpCode=On create calls\nMessage=Splunk could not get the description for this event. Either the component that raises this event is not installed on your local computer or the installation is corrupt.\n\nFormatMessage error:\n\nGot the following information from this event: \n\nBindings = 'Error'; Value = $null; IsValuePresent = $false }\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Find', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo)\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP MSFT_NetRoute.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Find-NetRoute' -Alias '*'\n        \n\nfunction Get-NetRoute\n{\n    [CmdletBinding(DefaultParameterSetName='ByName', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/StandardCimv2/MSFT_NetRoute')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByName', Position=0)]\n    [ValidateNotNull()]\n    [string[]]\n    ${DestinationPrefix},\n\n    [Parameter(ParameterSetName='ByName', ValueFromPipelineByPropertyName=$true)]\n    [Alias('ifIndex')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${InterfaceIndex},\n\n    [Parameter(ParameterSetName='ByName', ValueFromPipelineByPropertyName=$true)]\n    [Alias('ifAlias')]\n    [ValidateNotNull()]\n    [string[]]\n    ${InterfaceAlias},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [string[]]\n    ${NextHop},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetRoute.AddressFamily[]]\n    ${AddressFamily},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetRoute.Publish[]]\n    ${Publish},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [uint16[]]\n    ${RouteMetric},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetRoute.Protocol[]]\n    ${Protocol},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${CompartmentId},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [timespan[]]\n    ${ValidLifetime},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [timespan[]]\n    ${PreferredLifetime},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetRoute.State[]]\n    ${State},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${InterfaceMetric},\n\n    [Parameter(ParameterSetName='ByName', ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIPInterface')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedIPInterface},\n\n    [Parameter(ParameterSetName='ByName')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='ByName')]\n    [switch]\n    ${IncludeAllCompartments},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [switch]\n    ${AsJob})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('DestinationPrefix') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DestinationPrefix})\n        $__cmdletization_queryBuilder.FilterByProperty('DestinationPrefix', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('InterfaceIndex') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${InterfaceIndex})\n        $__cmdletization_queryBuilder.FilterByProperty('InterfaceIndex', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('InterfaceAlias') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${InterfaceAlias})\n        $__cmdletization_queryBuilder.FilterByProperty('InterfaceAlias', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('NextHop') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${NextHop})\n        $__cmdletization_queryBuilder.FilterByProperty('NextHop', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AddressFamily') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${AddressFamily})\n        $__cmdletization_queryBuilder.FilterByProperty('AddressFamily', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Publish') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Publish})\n        $__cmdletization_queryBuilder.FilterByProperty('Publish', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('RouteMetric') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${RouteMetric})\n        $__cmdletization_queryBuilder.FilterByProperty('RouteMetric', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Protocol') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Protocol})\n        $__cmdletization_queryBuilder.FilterByProperty('Protocol', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('CompartmentId') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${CompartmentId})\n        $__cmdletization_queryBuilder.FilterByProperty('CompartmentId', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('ValidLifetime') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${ValidLifetime})\n        $__cmdletization_queryBuilder.FilterByProperty('ValidLifetime', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PreferredLifetime') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PreferredLifetime})\n        $__cmdletization_queryBuilder.FilterByProperty('PreferredLifetime', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('State') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${State})\n        $__cmdletization_queryBuilder.FilterByProperty('State', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('InterfaceMetric') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${InterfaceMetric})\n        $__cmdletization_queryBuilder.FilterByProperty('InterfaceMetric', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedIPInterface') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedIPInterface}, 'MSFT_NetIPInterfaceRoute', 'Antecedent', 'Dependent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})\n    }\n    if ($PSBoundParameters.ContainsKey('IncludeAllCompartments') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('IncludeAllCompartments', ${IncludeAllCompartments})\n    }\n\n\n    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP MSFT_NetRoute.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Get-NetRoute' -Alias '*'\n        \n\nfunction Set-NetRoute\n{\n    [CmdletBinding(DefaultParameterSetName='ByName', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/StandardCimv2/MSFT_NetRoute')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByName', Position=0)]\n    [ValidateNotNull()]\n    [string[]]\n    ${DestinationPrefix},\n\n    [Parameter(ParameterSetName='ByName', ValueFromPipelineByPropertyName=$true)]\n    [Alias('ifIndex')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${InterfaceIndex},\n\n    [Parameter(ParameterSetName='ByName', ValueFromPipelineByPropertyName=$true)]\n    [Alias('ifAlias')]\n    [ValidateNotNull()]\n    [string[]]\n    ${InterfaceAlias},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [string[]]\n    ${NextHop},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetRoute.AddressFamily[]]\n    ${AddressFamily},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetRoute.Protocol[]]\n    ${Protocol},\n\n    [Parameter(ParameterSetName='ByName')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='ByName')]\n    [switch]\n    ${IncludeAllCompartments},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetRoute')]\n    [ValidateNotNull()]\n    [ciminstance[]]\n    ${InputObject},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetRoute.Publish]\n    ${Publish},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [uint16]\n    ${RouteMetric},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [timespan]\n    ${ValidLifetime},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [timespan]\n    ${PreferredLifetime},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${AsJob},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${PassThru})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('DestinationPrefix') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DestinationPrefix})\n        $__cmdletization_queryBuilder.FilterByProperty('DestinationPrefix', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('InterfaceIndex') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${InterfaceIndex})\n        $__cmdletization_queryBuilder.FilterByProperty('InterfaceIndex', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('InterfaceAlias') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${InterfaceAlias})\n        $__cmdletization_queryBuilder.FilterByProperty('InterfaceAlias', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('NextHop') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletizatio\n48060392-8085-4a6e-82e3-4ff6908cbacc",
    "_time": "2025-08-06T17:24:22.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:18147",
    "_indextime": "1754501062",
    "_serial": "44",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "446",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:24:22 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4104\nEventType=3\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Warning\nRecordNumber=477\nKeywords=None\nTaskCategory=Execute a Remote Command\nOpCode=On create calls\nMessage=Splunk could not get the description for this event. Either the component that raises this event is not installed on your local computer or the installation is corrupt.\n\nFormatMessage error:\n\nGot the following information from this event: \n\nmeters.ContainsKey('DestinationPrefix')) {\n          [object]$__cmdletization_value = ${DestinationPrefix}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DestinationPrefix'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DestinationPrefix'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('InterfaceIndex')) {\n          [object]$__cmdletization_value = ${InterfaceIndex}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InterfaceIndex'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InterfaceIndex'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('AddressFamily')) {\n          [object]$__cmdletization_value = ${AddressFamily}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AddressFamily'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetRoute.AddressFamily'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AddressFamily'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetRoute.AddressFamily'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('NextHop')) {\n          [object]$__cmdletization_value = ${NextHop}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NextHop'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NextHop'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('PolicyStore')) {\n          [object]$__cmdletization_value = ${PolicyStore}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('Publish')) {\n          [object]$__cmdletization_value = ${Publish}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Publish'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetRoute.Publish'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Publish'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetRoute.Publish'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('RouteMetric')) {\n          [object]$__cmdletization_value = ${RouteMetric}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RouteMetric'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RouteMetric'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('Protocol')) {\n          [object]$__cmdletization_value = ${Protocol}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Protocol'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetRoute.Protocol'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Protocol'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetRoute.Protocol'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('ValidLifetime')) {\n          [object]$__cmdletization_value = ${ValidLifetime}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ValidLifetime'; ParameterType = 'System.TimeSpan'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ValidLifetime'; ParameterType = 'System.TimeSpan'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('PreferredLifetime')) {\n          [object]$__cmdletization_value = ${PreferredLifetime}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PreferredLifetime'; ParameterType = 'System.TimeSpan'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PreferredLifetime'; ParameterType = 'System.TimeSpan'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'CmdletOutput'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'Out'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.UInt32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Create', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo)\n        }\n    }\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP MSFT_NetRoute.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'New-NetRoute' -Alias '*'\n        \n\nfunction Find-NetRoute\n{\n    [CmdletBinding(PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance[]])]\n    param(\n    \n    [Parameter(ParameterSetName='Find0')]\n    [uint32]\n    ${InterfaceIndex},\n\n    [Parameter(ParameterSetName='Find0')]\n    [string]\n    ${LocalIPAddress},\n\n    [Parameter(ParameterSetName='Find0', Mandatory=$true)]\n    [string]\n    ${RemoteIPAddress},\n\n    [Parameter(ParameterSetName='Find0')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='Find0')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='Find0')]\n    [switch]\n    ${AsJob})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n      $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('InterfaceIndex')) {\n          [object]$__cmdletization_value = ${InterfaceIndex}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InterfaceIndex'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InterfaceIndex'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('LocalIPAddress')) {\n          [object]$__cmdletization_value = ${LocalIPAddress}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LocalIPAddress'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LocalIPAddress'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('RemoteIPAddress')) {\n          [object]$__cmdletization_value = ${RemoteIPAddress}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteIPAddress'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteIPAddress'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'CmdletOutput'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'Out'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.UInt32'; \n48060392-8085-4a6e-82e3-4ff6908cbacc",
    "_time": "2025-08-06T17:24:22.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:17632",
    "_indextime": "1754501062",
    "_serial": "45",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "271",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:24:22 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4104\nEventType=3\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Warning\nRecordNumber=476\nKeywords=None\nTaskCategory=Execute a Remote Command\nOpCode=On create calls\nMessage=Splunk could not get the description for this event. Either the component that raises this event is not installed on your local computer or the installation is corrupt.\n\nFormatMessage error:\n\nGot the following information from this event: \n\n\n#requires -version 3.0\n\ntry { Microsoft.PowerShell.Core\\Set-StrictMode -Off } catch { }\n\n$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module\n\n$script:ClassName = 'ROOT/StandardCimv2/MSFT_NetRoute'\n$script:ClassVersion = '1.0.0'\n$script:ModuleVersion = '1.0.0'\n$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]\n\n$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()\n\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function @()\n        \n\nfunction __cmdletization_BindCommonParameters\n{\n    param(\n        $__cmdletization_objectModelWrapper,\n        $myPSBoundParameters\n    )       \n                \n\n        if ($myPSBoundParameters.ContainsKey('CimSession')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('AsJob')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] \n        }\n                    \n\n}\n                \n\nfunction New-NetRoute\n{\n    [CmdletBinding(DefaultParameterSetName='ByInterfaceAlias', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance[]])][OutputType([Microsoft.Management.Infrastructure.CimInstance[]])]\n    param(\n    \n    [Parameter(ParameterSetName='ByInterfaceAlias', Mandatory=$true, Position=0)]\n    [Parameter(ParameterSetName='ByInterfaceIndex', Mandatory=$true, Position=0)]\n    [string]\n    ${DestinationPrefix},\n\n    [Parameter(ParameterSetName='ByInterfaceAlias', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]\n    [Alias('ifAlias')]\n    [string]\n    ${InterfaceAlias},\n\n    [Parameter(ParameterSetName='ByInterfaceAlias')]\n    [Parameter(ParameterSetName='ByInterfaceIndex')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetRoute.AddressFamily]\n    ${AddressFamily},\n\n    [Parameter(ParameterSetName='ByInterfaceAlias')]\n    [Parameter(ParameterSetName='ByInterfaceIndex')]\n    [string]\n    ${NextHop},\n\n    [Parameter(ParameterSetName='ByInterfaceAlias')]\n    [Parameter(ParameterSetName='ByInterfaceIndex')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='ByInterfaceAlias')]\n    [Parameter(ParameterSetName='ByInterfaceIndex')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetRoute.Publish]\n    ${Publish},\n\n    [Parameter(ParameterSetName='ByInterfaceAlias')]\n    [Parameter(ParameterSetName='ByInterfaceIndex')]\n    [uint16]\n    ${RouteMetric},\n\n    [Parameter(ParameterSetName='ByInterfaceAlias')]\n    [Parameter(ParameterSetName='ByInterfaceIndex')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetRoute.Protocol]\n    ${Protocol},\n\n    [Parameter(ParameterSetName='ByInterfaceAlias')]\n    [Parameter(ParameterSetName='ByInterfaceIndex')]\n    [timespan]\n    ${ValidLifetime},\n\n    [Parameter(ParameterSetName='ByInterfaceAlias')]\n    [Parameter(ParameterSetName='ByInterfaceIndex')]\n    [timespan]\n    ${PreferredLifetime},\n\n    [Parameter(ParameterSetName='ByInterfaceIndex', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]\n    [Alias('ifIndex')]\n    [uint32]\n    ${InterfaceIndex},\n\n    [Parameter(ParameterSetName='ByInterfaceAlias')]\n    [Parameter(ParameterSetName='ByInterfaceIndex')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByInterfaceAlias')]\n    [Parameter(ParameterSetName='ByInterfaceIndex')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByInterfaceAlias')]\n    [Parameter(ParameterSetName='ByInterfaceIndex')]\n    [switch]\n    ${AsJob})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n      $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n\n      switch -exact ($PSCmdlet.ParameterSetName) { \n        { @('ByInterfaceAlias') -contains $_ } {\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('DestinationPrefix')) {\n          [object]$__cmdletization_value = ${DestinationPrefix}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DestinationPrefix'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DestinationPrefix'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('InterfaceAlias')) {\n          [object]$__cmdletization_value = ${InterfaceAlias}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InterfaceAlias'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InterfaceAlias'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('AddressFamily')) {\n          [object]$__cmdletization_value = ${AddressFamily}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AddressFamily'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetRoute.AddressFamily'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AddressFamily'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetRoute.AddressFamily'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('NextHop')) {\n          [object]$__cmdletization_value = ${NextHop}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NextHop'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NextHop'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('PolicyStore')) {\n          [object]$__cmdletization_value = ${PolicyStore}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('Publish')) {\n          [object]$__cmdletization_value = ${Publish}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Publish'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetRoute.Publish'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Publish'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetRoute.Publish'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('RouteMetric')) {\n          [object]$__cmdletization_value = ${RouteMetric}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RouteMetric'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RouteMetric'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('Protocol')) {\n          [object]$__cmdletization_value = ${Protocol}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Protocol'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetRoute.Protocol'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Protocol'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetRoute.Protocol'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('ValidLifetime')) {\n          [object]$__cmdletization_value = ${ValidLifetime}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ValidLifetime'; ParameterType = 'System.TimeSpan'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ValidLifetime'; ParameterType = 'System.TimeSpan'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('PreferredLifetime')) {\n          [object]$__cmdletization_value = ${PreferredLifetime}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PreferredLifetime'; ParameterType = 'System.TimeSpan'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PreferredLifetime'; ParameterType = 'System.TimeSpan'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'CmdletOutput'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'Out'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.UInt32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Create', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo)\n        }\n        { @('ByInterfaceIndex') -contains $_ } {\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundPara\n48060392-8085-4a6e-82e3-4ff6908cbacc",
    "_time": "2025-08-06T17:24:22.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:17117",
    "_indextime": "1754501062",
    "_serial": "46",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "301",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:24:22 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=475\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Get-NetPrefixPolicy\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 3d722da8-4c22-4035-ae86-da8b8d39bbd9\n        Host Application = powershell.exe -Command Get-NetIPAddress\n        Engine Version = 5.1.20348.3932\n        Runspace ID = a126cfe4-e1d1-496d-9c5a-1ee8bf7f15cd\n        Pipeline ID = 20\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 86\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:24:22.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:17076",
    "_indextime": "1754501062",
    "_serial": "47",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "39",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:24:22 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=474\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 3d722da8-4c22-4035-ae86-da8b8d39bbd9\n        Host Application = powershell.exe -Command Get-NetIPAddress\n        Engine Version = 5.1.20348.3932\n        Runspace ID = a126cfe4-e1d1-496d-9c5a-1ee8bf7f15cd\n        Pipeline ID = 20\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 84\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:24:22.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:17038",
    "_indextime": "1754501062",
    "_serial": "48",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "38",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:24:22 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=473\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Set-StrictMode): \"Set-StrictMode\"\nParameterBinding(Set-StrictMode): name=\"Off\"; value=\"True\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 3d722da8-4c22-4035-ae86-da8b8d39bbd9\n        Host Application = powershell.exe -Command Get-NetIPAddress\n        Engine Version = 5.1.20348.3932\n        Runspace ID = a126cfe4-e1d1-496d-9c5a-1ee8bf7f15cd\n        Pipeline ID = 20\n        Command Name = Set-StrictMode\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 82\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:24:22.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:17000",
    "_indextime": "1754501062",
    "_serial": "49",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "38",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:24:22 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4104\nEventType=3\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Warning\nRecordNumber=472\nKeywords=None\nTaskCategory=Execute a Remote Command\nOpCode=On create calls\nMessage=Creating Scriptblock text (1 of 1):\n\n#requires -version 3.0\n\ntry { Microsoft.PowerShell.Core\\Set-StrictMode -Off } catch { }\n\n$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module\n\n$script:ClassName = 'ROOT/StandardCimv2/MSFT_NetPrefixPolicy'\n$script:ClassVersion = '1.0.0'\n$script:ModuleVersion = '1.0.0'\n$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]\n\n$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()\n\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function @()\n        \n\nfunction __cmdletization_BindCommonParameters\n{\n    param(\n        $__cmdletization_objectModelWrapper,\n        $myPSBoundParameters\n    )       \n                \n\n        if ($myPSBoundParameters.ContainsKey('CimSession')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('AsJob')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] \n        }\n                    \n\n}\n                \n\nfunction Get-NetPrefixPolicy\n{\n    [CmdletBinding(DefaultParameterSetName='ByName', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/StandardCimv2/MSFT_NetPrefixPolicy')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByName', Position=0)]\n    [ValidateNotNull()]\n    [string[]]\n    ${Prefix},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${Precedence},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${Label},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [switch]\n    ${AsJob})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('Prefix') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Prefix})\n        $__cmdletization_queryBuilder.FilterByProperty('Prefix', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Precedence') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Precedence})\n        $__cmdletization_queryBuilder.FilterByProperty('Precedence', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Label') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Label})\n        $__cmdletization_queryBuilder.FilterByProperty('Label', $__cmdletization_values, $false, 'Default')\n    }\n\n\n    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP MSFT_NetPrefixPolicy.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Get-NetPrefixPolicy' -Alias '*'\n        \n\n\nScriptBlock ID: 8ce7702c-ad16-47ad-baac-38d5f76bfba5\nPath:",
    "_time": "2025-08-06T17:24:22.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:16819",
    "_indextime": "1754501062",
    "_serial": "50",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "185",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:24:22 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=471\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Set-NetOffloadGlobalSetting\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 3d722da8-4c22-4035-ae86-da8b8d39bbd9\n        Host Application = powershell.exe -Command Get-NetIPAddress\n        Engine Version = 5.1.20348.3932\n        Runspace ID = a126cfe4-e1d1-496d-9c5a-1ee8bf7f15cd\n        Pipeline ID = 20\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 80\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:24:22.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:16778",
    "_indextime": "1754501062",
    "_serial": "51",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "39",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:24:22 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=470\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Get-NetOffloadGlobalSetting\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 3d722da8-4c22-4035-ae86-da8b8d39bbd9\n        Host Application = powershell.exe -Command Get-NetIPAddress\n        Engine Version = 5.1.20348.3932\n        Runspace ID = a126cfe4-e1d1-496d-9c5a-1ee8bf7f15cd\n        Pipeline ID = 20\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 78\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:24:22.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:16737",
    "_indextime": "1754501062",
    "_serial": "52",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "39",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:24:22 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=469\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 3d722da8-4c22-4035-ae86-da8b8d39bbd9\n        Host Application = powershell.exe -Command Get-NetIPAddress\n        Engine Version = 5.1.20348.3932\n        Runspace ID = a126cfe4-e1d1-496d-9c5a-1ee8bf7f15cd\n        Pipeline ID = 20\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 76\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:24:22.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:16699",
    "_indextime": "1754501062",
    "_serial": "53",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "38",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:24:22 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=468\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Set-StrictMode): \"Set-StrictMode\"\nParameterBinding(Set-StrictMode): name=\"Off\"; value=\"True\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 3d722da8-4c22-4035-ae86-da8b8d39bbd9\n        Host Application = powershell.exe -Command Get-NetIPAddress\n        Engine Version = 5.1.20348.3932\n        Runspace ID = a126cfe4-e1d1-496d-9c5a-1ee8bf7f15cd\n        Pipeline ID = 20\n        Command Name = Set-StrictMode\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 74\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:24:22.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:16661",
    "_indextime": "1754501062",
    "_serial": "54",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "38",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:24:22 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4104\nEventType=3\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Warning\nRecordNumber=467\nKeywords=None\nTaskCategory=Execute a Remote Command\nOpCode=On create calls\nMessage=Creating Scriptblock text (2 of 2):\n  $__cmdletization_returnValue = $null\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:ModifyInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru\n            if ($PSBoundParameters.ContainsKey('InputObject')) {\n                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }\n            } else {\n                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)\n            }\n        }\n    }\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP MSFT_NetOffloadGlobalSetting.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Set-NetOffloadGlobalSetting' -Alias '*'\n        \n\n\nScriptBlock ID: b6a8cb29-a9ec-4490-95ec-d95f7bc63bca\nPath:",
    "_time": "2025-08-06T17:24:22.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:16601",
    "_indextime": "1754501062",
    "_serial": "55",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "58",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:24:22 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4104\nEventType=3\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Warning\nRecordNumber=466\nKeywords=None\nTaskCategory=Execute a Remote Command\nOpCode=On create calls\nMessage=Splunk could not get the description for this event. Either the component that raises this event is not installed on your local computer or the installation is corrupt.\n\nFormatMessage error:\n\nGot the following information from this event: \n\n\n#requires -version 3.0\n\ntry { Microsoft.PowerShell.Core\\Set-StrictMode -Off } catch { }\n\n$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module\n\n$script:ClassName = 'ROOT/StandardCimv2/MSFT_NetOffloadGlobalSetting'\n$script:ClassVersion = '1.0.0'\n$script:ModuleVersion = '1.0.0'\n$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]\n\n$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()\n\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function @()\n        \n\nfunction __cmdletization_BindCommonParameters\n{\n    param(\n        $__cmdletization_objectModelWrapper,\n        $myPSBoundParameters\n    )       \n                \n\n        if ($myPSBoundParameters.ContainsKey('CimSession')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('AsJob')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] \n        }\n                    \n\n}\n                \n\nfunction Get-NetOffloadGlobalSetting\n{\n    [CmdletBinding(DefaultParameterSetName='ByName', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/StandardCimv2/MSFT_NetOffloadGlobalSetting')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetOffloadGlobalSetting.EnabledDisabledEnum[]]\n    ${ReceiveSideScaling},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetOffloadGlobalSetting.EnabledDisabledEnum[]]\n    ${ReceiveSegmentCoalescing},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetOffloadGlobalSetting.ChimneyEnum[]]\n    ${Chimney},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetOffloadGlobalSetting.EnabledDisabledEnum[]]\n    ${TaskOffload},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetOffloadGlobalSetting.EnabledDisabledEnum[]]\n    ${NetworkDirect},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetOffloadGlobalSetting.AllowedBlockedEnum[]]\n    ${NetworkDirectAcrossIPSubnets},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetOffloadGlobalSetting.EnabledDisabledEnum[]]\n    ${PacketCoalescingFilter},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [switch]\n    ${AsJob})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('ReceiveSideScaling') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${ReceiveSideScaling})\n        $__cmdletization_queryBuilder.FilterByProperty('ReceiveSideScaling', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('ReceiveSegmentCoalescing') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${ReceiveSegmentCoalescing})\n        $__cmdletization_queryBuilder.FilterByProperty('ReceiveSegmentCoalescing', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Chimney') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Chimney})\n        $__cmdletization_queryBuilder.FilterByProperty('Chimney', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('TaskOffload') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${TaskOffload})\n        $__cmdletization_queryBuilder.FilterByProperty('TaskOffload', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('NetworkDirect') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${NetworkDirect})\n        $__cmdletization_queryBuilder.FilterByProperty('NetworkDirect', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('NetworkDirectAcrossIPSubnets') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${NetworkDirectAcrossIPSubnets})\n        $__cmdletization_queryBuilder.FilterByProperty('NetworkDirectAcrossIPSubnets', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PacketCoalescingFilter') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PacketCoalescingFilter})\n        $__cmdletization_queryBuilder.FilterByProperty('PacketCoalescingFilter', $__cmdletization_values, $false, 'Default')\n    }\n\n\n    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP MSFT_NetOffloadGlobalSetting.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Get-NetOffloadGlobalSetting' -Alias '*'\n        \n\nfunction Set-NetOffloadGlobalSetting\n{\n    [CmdletBinding(DefaultParameterSetName='InputObject (cdxml)', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/StandardCimv2/MSFT_NetOffloadGlobalSetting')]\n\n    param(\n    \n    [Parameter(ParameterSetName='InputObject (cdxml)', ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetOffloadGlobalSetting')]\n    [ValidateNotNull()]\n    [ciminstance[]]\n    ${InputObject},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetOffloadGlobalSetting.EnabledDisabledEnum]\n    ${ReceiveSideScaling},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetOffloadGlobalSetting.EnabledDisabledEnum]\n    ${ReceiveSegmentCoalescing},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetOffloadGlobalSetting.ChimneyEnum]\n    ${Chimney},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetOffloadGlobalSetting.EnabledDisabledEnum]\n    ${TaskOffload},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetOffloadGlobalSetting.EnabledDisabledEnum]\n    ${NetworkDirect},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetOffloadGlobalSetting.AllowedBlockedEnum]\n    ${NetworkDirectAcrossIPSubnets},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetOffloadGlobalSetting.EnabledDisabledEnum]\n    ${PacketCoalescingFilter},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${AsJob},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${PassThru})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n\n\n    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n    switch -exact ($PSCmdlet.ParameterSetName) { \n        { @('InputObject (cdxml)') -contains $_ } {\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('ReceiveSideScaling')) {\n            [object]$__cmdletization_value = ${ReceiveSideScaling}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ReceiveSideScaling'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetOffloadGlobalSetting.EnabledDisabledEnum'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ReceiveSideScaling'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetOffloadGlobalSetting.EnabledDisabledEnum'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('ReceiveSegmentCoalescing')) {\n            [object]$__cmdletization_value = ${ReceiveSegmentCoalescing}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ReceiveSegmentCoalescing'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetOffloadGlobalSetting.EnabledDisabledEnum'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ReceiveSegmentCoalescing'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetOffloadGlobalSetting.EnabledDisabledEnum'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('Chimney')) {\n            [object]$__cmdletization_value = ${Chimney}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Chimney'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetOffloadGlobalSetting.ChimneyEnum'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Chimney'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetOffloadGlobalSetting.ChimneyEnum'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('TaskOffload')) {\n            [object]$__cmdletization_value = ${TaskOffload}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'TaskOffload'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetOffloadGlobalSetting.EnabledDisabledEnum'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'TaskOffload'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetOffloadGlobalSetting.EnabledDisabledEnum'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('NetworkDirect')) {\n            [object]$__cmdletization_value = ${NetworkDirect}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NetworkDirect'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetOffloadGlobalSetting.EnabledDisabledEnum'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NetworkDirect'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetOffloadGlobalSetting.EnabledDisabledEnum'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('NetworkDirectAcrossIPSubnets')) {\n            [object]$__cmdletization_value = ${NetworkDirectAcrossIPSubnets}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NetworkDirectAcrossIPSubnets'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetOffloadGlobalSetting.AllowedBlockedEnum'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NetworkDirectAcrossIPSubnets'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetOffloadGlobalSetting.AllowedBlockedEnum'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('PacketCoalescingFilter')) {\n            [object]$__cmdletization_value = ${PacketCoalescingFilter}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PacketCoalescingFilter'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetOffloadGlobalSetting.EnabledDisabledEnum'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PacketCoalescingFilter'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetOffloadGlobalSetting.EnabledDisabledEnum'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n    \nb6a8cb29-a9ec-4490-95ec-d95f7bc63bca",
    "_time": "2025-08-06T17:24:22.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:15981",
    "_indextime": "1754501062",
    "_serial": "56",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "403",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:24:22 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=465\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Remove-NetNeighbor\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 3d722da8-4c22-4035-ae86-da8b8d39bbd9\n        Host Application = powershell.exe -Command Get-NetIPAddress\n        Engine Version = 5.1.20348.3932\n        Runspace ID = a126cfe4-e1d1-496d-9c5a-1ee8bf7f15cd\n        Pipeline ID = 20\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 72\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:24:22.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:15940",
    "_indextime": "1754501062",
    "_serial": "57",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "39",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:24:22 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=464\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Set-NetNeighbor\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 3d722da8-4c22-4035-ae86-da8b8d39bbd9\n        Host Application = powershell.exe -Command Get-NetIPAddress\n        Engine Version = 5.1.20348.3932\n        Runspace ID = a126cfe4-e1d1-496d-9c5a-1ee8bf7f15cd\n        Pipeline ID = 20\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 70\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:24:22.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:15899",
    "_indextime": "1754501062",
    "_serial": "58",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "39",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:24:22 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=463\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Get-NetNeighbor\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 3d722da8-4c22-4035-ae86-da8b8d39bbd9\n        Host Application = powershell.exe -Command Get-NetIPAddress\n        Engine Version = 5.1.20348.3932\n        Runspace ID = a126cfe4-e1d1-496d-9c5a-1ee8bf7f15cd\n        Pipeline ID = 20\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 68\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:24:22.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:15858",
    "_indextime": "1754501062",
    "_serial": "59",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "39",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:24:22 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=462\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"New-NetNeighbor\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 3d722da8-4c22-4035-ae86-da8b8d39bbd9\n        Host Application = powershell.exe -Command Get-NetIPAddress\n        Engine Version = 5.1.20348.3932\n        Runspace ID = a126cfe4-e1d1-496d-9c5a-1ee8bf7f15cd\n        Pipeline ID = 20\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 66\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:24:22.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:15817",
    "_indextime": "1754501062",
    "_serial": "60",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "39",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:24:22 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=461\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 3d722da8-4c22-4035-ae86-da8b8d39bbd9\n        Host Application = powershell.exe -Command Get-NetIPAddress\n        Engine Version = 5.1.20348.3932\n        Runspace ID = a126cfe4-e1d1-496d-9c5a-1ee8bf7f15cd\n        Pipeline ID = 20\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 64\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:24:22.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:15779",
    "_indextime": "1754501062",
    "_serial": "61",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "38",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:24:22 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=460\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Set-StrictMode): \"Set-StrictMode\"\nParameterBinding(Set-StrictMode): name=\"Off\"; value=\"True\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 3d722da8-4c22-4035-ae86-da8b8d39bbd9\n        Host Application = powershell.exe -Command Get-NetIPAddress\n        Engine Version = 5.1.20348.3932\n        Runspace ID = a126cfe4-e1d1-496d-9c5a-1ee8bf7f15cd\n        Pipeline ID = 20\n        Command Name = Set-StrictMode\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 62\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:24:22.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:15741",
    "_indextime": "1754501062",
    "_serial": "62",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "38",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:24:22 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4104\nEventType=3\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Warning\nRecordNumber=459\nKeywords=None\nTaskCategory=Execute a Remote Command\nOpCode=On create calls\nMessage=Splunk could not get the description for this event. Either the component that raises this event is not installed on your local computer or the installation is corrupt.\n\nFormatMessage error:\n\nGot the following information from this event: \n\ncmdletization_queryBuilder.AddQueryOption('IncludeAllCompartments', ${IncludeAllCompartments})\n    }\n\n\n    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n    switch -exact ($PSCmdlet.ParameterSetName) { \n        { @('ByName', 'InputObject (cdxml)') -contains $_ } {\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('LinkLayerAddress')) {\n            [object]$__cmdletization_value = ${LinkLayerAddress}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LinkLayerAddress'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LinkLayerAddress'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n      $__cmdletization_returnValue = $null\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:ModifyInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru\n            if ($PSBoundParameters.ContainsKey('InputObject')) {\n                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }\n            } else {\n                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)\n            }\n        }\n    }\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP MSFT_NetNeighbor.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Set-NetNeighbor' -Alias '*'\n        \n\nfunction Remove-NetNeighbor\n{\n    [CmdletBinding(DefaultParameterSetName='ByName', SupportsShouldProcess=$true, ConfirmImpact='High', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/StandardCimv2/MSFT_NetNeighbor')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByName', Position=0)]\n    [ValidateNotNull()]\n    [string[]]\n    ${IPAddress},\n\n    [Parameter(ParameterSetName='ByName', ValueFromPipelineByPropertyName=$true)]\n    [Alias('ifIndex')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${InterfaceIndex},\n\n    [Parameter(ParameterSetName='ByName', ValueFromPipelineByPropertyName=$true)]\n    [Alias('ifAlias')]\n    [ValidateNotNull()]\n    [string[]]\n    ${InterfaceAlias},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [string[]]\n    ${LinkLayerAddress},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetNeighbor.State[]]\n    ${State},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetNeighbor.AddressFamily[]]\n    ${AddressFamily},\n\n    [Parameter(ParameterSetName='ByName', ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIPInterface')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedIPInterface},\n\n    [Parameter(ParameterSetName='ByName')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='ByName')]\n    [switch]\n    ${IncludeAllCompartments},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetNeighbor')]\n    [ValidateNotNull()]\n    [ciminstance[]]\n    ${InputObject},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${AsJob},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${PassThru})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('IPAddress') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${IPAddress})\n        $__cmdletization_queryBuilder.FilterByProperty('IPAddress', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('InterfaceIndex') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${InterfaceIndex})\n        $__cmdletization_queryBuilder.FilterByProperty('InterfaceIndex', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('InterfaceAlias') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${InterfaceAlias})\n        $__cmdletization_queryBuilder.FilterByProperty('InterfaceAlias', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('LinkLayerAddress') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${LinkLayerAddress})\n        $__cmdletization_queryBuilder.FilterByProperty('LinkLayerAddress', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('State') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${State})\n        $__cmdletization_queryBuilder.FilterByProperty('State', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AddressFamily') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${AddressFamily})\n        $__cmdletization_queryBuilder.FilterByProperty('AddressFamily', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedIPInterface') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedIPInterface}, 'MSFT_NetIPInterfaceNeighbor', 'Antecedent', 'Dependent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})\n    }\n    if ($PSBoundParameters.ContainsKey('IncludeAllCompartments') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('IncludeAllCompartments', ${IncludeAllCompartments})\n    }\n\n\n    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n    switch -exact ($PSCmdlet.ParameterSetName) { \n        { @('ByName', 'InputObject (cdxml)') -contains $_ } {\n      $__cmdletization_returnValue = $null\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:DeleteInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru\n            if ($PSBoundParameters.ContainsKey('InputObject')) {\n                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }\n            } else {\n                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)\n            }\n        }\n    }\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP MSFT_NetNeighbor.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Remove-NetNeighbor' -Alias '*'\n        \n\nb2b11435-8e4a-413e-9950-e932328f07d9",
    "_time": "2025-08-06T17:24:22.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:15384",
    "_indextime": "1754501062",
    "_serial": "63",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "281",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:24:22 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4104\nEventType=3\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Warning\nRecordNumber=458\nKeywords=None\nTaskCategory=Execute a Remote Command\nOpCode=On create calls\nMessage=Splunk could not get the description for this event. Either the component that raises this event is not installed on your local computer or the installation is corrupt.\n\nFormatMessage error:\n\nGot the following information from this event: \n\n.PowerShell.Cmdletization.GeneratedTypes.NetNeighbor.State'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'State'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetNeighbor.State'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('AddressFamily')) {\n          [object]$__cmdletization_value = ${AddressFamily}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AddressFamily'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetNeighbor.AddressFamily'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AddressFamily'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetNeighbor.AddressFamily'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'CmdletOutput'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'Out'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.UInt32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Create', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo)\n        }\n    }\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP MSFT_NetNeighbor.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'New-NetNeighbor' -Alias '*'\n        \n\nfunction Get-NetNeighbor\n{\n    [CmdletBinding(DefaultParameterSetName='ByName', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/StandardCimv2/MSFT_NetNeighbor')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByName', Position=0)]\n    [ValidateNotNull()]\n    [string[]]\n    ${IPAddress},\n\n    [Parameter(ParameterSetName='ByName', ValueFromPipelineByPropertyName=$true)]\n    [Alias('ifIndex')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${InterfaceIndex},\n\n    [Parameter(ParameterSetName='ByName', ValueFromPipelineByPropertyName=$true)]\n    [Alias('ifAlias')]\n    [ValidateNotNull()]\n    [string[]]\n    ${InterfaceAlias},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [string[]]\n    ${LinkLayerAddress},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetNeighbor.State[]]\n    ${State},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetNeighbor.AddressFamily[]]\n    ${AddressFamily},\n\n    [Parameter(ParameterSetName='ByName', ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIPInterface')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedIPInterface},\n\n    [Parameter(ParameterSetName='ByName')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='ByName')]\n    [switch]\n    ${IncludeAllCompartments},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [switch]\n    ${AsJob})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('IPAddress') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${IPAddress})\n        $__cmdletization_queryBuilder.FilterByProperty('IPAddress', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('InterfaceIndex') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${InterfaceIndex})\n        $__cmdletization_queryBuilder.FilterByProperty('InterfaceIndex', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('InterfaceAlias') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${InterfaceAlias})\n        $__cmdletization_queryBuilder.FilterByProperty('InterfaceAlias', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('LinkLayerAddress') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${LinkLayerAddress})\n        $__cmdletization_queryBuilder.FilterByProperty('LinkLayerAddress', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('State') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${State})\n        $__cmdletization_queryBuilder.FilterByProperty('State', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AddressFamily') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${AddressFamily})\n        $__cmdletization_queryBuilder.FilterByProperty('AddressFamily', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedIPInterface') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedIPInterface}, 'MSFT_NetIPInterfaceNeighbor', 'Antecedent', 'Dependent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})\n    }\n    if ($PSBoundParameters.ContainsKey('IncludeAllCompartments') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('IncludeAllCompartments', ${IncludeAllCompartments})\n    }\n\n\n    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP MSFT_NetNeighbor.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Get-NetNeighbor' -Alias '*'\n        \n\nfunction Set-NetNeighbor\n{\n    [CmdletBinding(DefaultParameterSetName='ByName', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/StandardCimv2/MSFT_NetNeighbor')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByName', Position=0)]\n    [ValidateNotNull()]\n    [string[]]\n    ${IPAddress},\n\n    [Parameter(ParameterSetName='ByName', ValueFromPipelineByPropertyName=$true)]\n    [Alias('ifIndex')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${InterfaceIndex},\n\n    [Parameter(ParameterSetName='ByName', ValueFromPipelineByPropertyName=$true)]\n    [Alias('ifAlias')]\n    [ValidateNotNull()]\n    [string[]]\n    ${InterfaceAlias},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetNeighbor.State[]]\n    ${State},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetNeighbor.AddressFamily[]]\n    ${AddressFamily},\n\n    [Parameter(ParameterSetName='ByName')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='ByName')]\n    [switch]\n    ${IncludeAllCompartments},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetNeighbor')]\n    [ValidateNotNull()]\n    [ciminstance[]]\n    ${InputObject},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [string]\n    ${LinkLayerAddress},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${AsJob},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${PassThru})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('IPAddress') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${IPAddress})\n        $__cmdletization_queryBuilder.FilterByProperty('IPAddress', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('InterfaceIndex') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${InterfaceIndex})\n        $__cmdletization_queryBuilder.FilterByProperty('InterfaceIndex', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('InterfaceAlias') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${InterfaceAlias})\n        $__cmdletization_queryBuilder.FilterByProperty('InterfaceAlias', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('State') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${State})\n        $__cmdletization_queryBuilder.FilterByProperty('State', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AddressFamily') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${AddressFamily})\n        $__cmdletization_queryBuilder.FilterByProperty('AddressFamily', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})\n    }\n    if ($PSBoundParameters.ContainsKey('IncludeAllCompartments') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n    $__\nb2b11435-8e4a-413e-9950-e932328f07d9",
    "_time": "2025-08-06T17:24:22.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:14886",
    "_indextime": "1754501062",
    "_serial": "64",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "397",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:24:22 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4104\nEventType=3\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Warning\nRecordNumber=457\nKeywords=None\nTaskCategory=Execute a Remote Command\nOpCode=On create calls\nMessage=Splunk could not get the description for this event. Either the component that raises this event is not installed on your local computer or the installation is corrupt.\n\nFormatMessage error:\n\nGot the following information from this event: \n\n\n#requires -version 3.0\n\ntry { Microsoft.PowerShell.Core\\Set-StrictMode -Off } catch { }\n\n$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module\n\n$script:ClassName = 'ROOT/StandardCimv2/MSFT_NetNeighbor'\n$script:ClassVersion = '1.0.0'\n$script:ModuleVersion = '1.0.0'\n$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]\n\n$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()\n\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function @()\n        \n\nfunction __cmdletization_BindCommonParameters\n{\n    param(\n        $__cmdletization_objectModelWrapper,\n        $myPSBoundParameters\n    )       \n                \n\n        if ($myPSBoundParameters.ContainsKey('CimSession')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('AsJob')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] \n        }\n                    \n\n}\n                \n\nfunction New-NetNeighbor\n{\n    [CmdletBinding(DefaultParameterSetName='ByInterfaceAlias', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance[]])][OutputType([Microsoft.Management.Infrastructure.CimInstance[]])]\n    param(\n    \n    [Parameter(ParameterSetName='ByInterfaceAlias', Mandatory=$true, Position=0)]\n    [Parameter(ParameterSetName='ByInterfaceIndex', Mandatory=$true, Position=0)]\n    [string]\n    ${IPAddress},\n\n    [Parameter(ParameterSetName='ByInterfaceAlias', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]\n    [Alias('ifAlias')]\n    [string]\n    ${InterfaceAlias},\n\n    [Parameter(ParameterSetName='ByInterfaceAlias')]\n    [Parameter(ParameterSetName='ByInterfaceIndex')]\n    [string]\n    ${LinkLayerAddress},\n\n    [Parameter(ParameterSetName='ByInterfaceAlias')]\n    [Parameter(ParameterSetName='ByInterfaceIndex')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='ByInterfaceAlias')]\n    [Parameter(ParameterSetName='ByInterfaceIndex')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetNeighbor.State]\n    ${State},\n\n    [Parameter(ParameterSetName='ByInterfaceAlias')]\n    [Parameter(ParameterSetName='ByInterfaceIndex')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetNeighbor.AddressFamily]\n    ${AddressFamily},\n\n    [Parameter(ParameterSetName='ByInterfaceIndex', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]\n    [Alias('ifIndex')]\n    [uint32]\n    ${InterfaceIndex},\n\n    [Parameter(ParameterSetName='ByInterfaceAlias')]\n    [Parameter(ParameterSetName='ByInterfaceIndex')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByInterfaceAlias')]\n    [Parameter(ParameterSetName='ByInterfaceIndex')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByInterfaceAlias')]\n    [Parameter(ParameterSetName='ByInterfaceIndex')]\n    [switch]\n    ${AsJob})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n      $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n\n      switch -exact ($PSCmdlet.ParameterSetName) { \n        { @('ByInterfaceAlias') -contains $_ } {\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('IPAddress')) {\n          [object]$__cmdletization_value = ${IPAddress}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IPAddress'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IPAddress'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('InterfaceAlias')) {\n          [object]$__cmdletization_value = ${InterfaceAlias}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InterfaceAlias'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InterfaceAlias'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('LinkLayerAddress')) {\n          [object]$__cmdletization_value = ${LinkLayerAddress}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LinkLayerAddress'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LinkLayerAddress'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('PolicyStore')) {\n          [object]$__cmdletization_value = ${PolicyStore}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('State')) {\n          [object]$__cmdletization_value = ${State}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'State'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetNeighbor.State'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'State'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetNeighbor.State'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('AddressFamily')) {\n          [object]$__cmdletization_value = ${AddressFamily}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AddressFamily'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetNeighbor.AddressFamily'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AddressFamily'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetNeighbor.AddressFamily'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'CmdletOutput'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'Out'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.UInt32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Create', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo)\n        }\n        { @('ByInterfaceIndex') -contains $_ } {\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('IPAddress')) {\n          [object]$__cmdletization_value = ${IPAddress}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IPAddress'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IPAddress'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('InterfaceIndex')) {\n          [object]$__cmdletization_value = ${InterfaceIndex}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InterfaceIndex'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InterfaceIndex'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('LinkLayerAddress')) {\n          [object]$__cmdletization_value = ${LinkLayerAddress}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LinkLayerAddress'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LinkLayerAddress'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('PolicyStore')) {\n          [object]$__cmdletization_value = ${PolicyStore}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('State')) {\n          [object]$__cmdletization_value = ${State}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'State'; ParameterType = 'Microsoft\nb2b11435-8e4a-413e-9950-e932328f07d9",
    "_time": "2025-08-06T17:24:22.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:14388",
    "_indextime": "1754501062",
    "_serial": "65",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "283",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:24:22 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=456\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Set-NetIPv6Protocol\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 3d722da8-4c22-4035-ae86-da8b8d39bbd9\n        Host Application = powershell.exe -Command Get-NetIPAddress\n        Engine Version = 5.1.20348.3932\n        Runspace ID = a126cfe4-e1d1-496d-9c5a-1ee8bf7f15cd\n        Pipeline ID = 20\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 60\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:24:22.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:14347",
    "_indextime": "1754501062",
    "_serial": "66",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "39",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:24:22 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=455\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Get-NetIPv6Protocol\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 3d722da8-4c22-4035-ae86-da8b8d39bbd9\n        Host Application = powershell.exe -Command Get-NetIPAddress\n        Engine Version = 5.1.20348.3932\n        Runspace ID = a126cfe4-e1d1-496d-9c5a-1ee8bf7f15cd\n        Pipeline ID = 20\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 58\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:24:22.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:14306",
    "_indextime": "1754501062",
    "_serial": "67",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "39",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:24:22 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=454\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 3d722da8-4c22-4035-ae86-da8b8d39bbd9\n        Host Application = powershell.exe -Command Get-NetIPAddress\n        Engine Version = 5.1.20348.3932\n        Runspace ID = a126cfe4-e1d1-496d-9c5a-1ee8bf7f15cd\n        Pipeline ID = 20\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 56\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:24:22.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:14268",
    "_indextime": "1754501062",
    "_serial": "68",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "38",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:24:22 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=453\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Set-StrictMode): \"Set-StrictMode\"\nParameterBinding(Set-StrictMode): name=\"Off\"; value=\"True\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 3d722da8-4c22-4035-ae86-da8b8d39bbd9\n        Host Application = powershell.exe -Command Get-NetIPAddress\n        Engine Version = 5.1.20348.3932\n        Runspace ID = a126cfe4-e1d1-496d-9c5a-1ee8bf7f15cd\n        Pipeline ID = 20\n        Command Name = Set-StrictMode\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 54\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:24:22.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:14230",
    "_indextime": "1754501062",
    "_serial": "69",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "38",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:24:22 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4104\nEventType=3\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Warning\nRecordNumber=452\nKeywords=None\nTaskCategory=Execute a Remote Command\nOpCode=On create calls\nMessage=Creating Scriptblock text (3 of 3):\non_value = ${UseTemporaryAddresses}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'UseTemporaryAddresses'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.UseTemporaryAddresses'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'UseTemporaryAddresses'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.UseTemporaryAddresses'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('MaxTemporaryDadAttempts')) {\n            [object]$__cmdletization_value = ${MaxTemporaryDadAttempts}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MaxDadAttempts'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MaxDadAttempts'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('MaxTemporaryValidLifetime')) {\n            [object]$__cmdletization_value = ${MaxTemporaryValidLifetime}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MaxValidLifetime'; ParameterType = 'System.TimeSpan'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MaxValidLifetime'; ParameterType = 'System.TimeSpan'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('MaxTemporaryPreferredLifetime')) {\n            [object]$__cmdletization_value = ${MaxTemporaryPreferredLifetime}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MaxPreferredLifetime'; ParameterType = 'System.TimeSpan'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MaxPreferredLifetime'; ParameterType = 'System.TimeSpan'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('TemporaryRegenerateTime')) {\n            [object]$__cmdletization_value = ${TemporaryRegenerateTime}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RegenerateTime'; ParameterType = 'System.TimeSpan'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RegenerateTime'; ParameterType = 'System.TimeSpan'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('MaxTemporaryDesyncTime')) {\n            [object]$__cmdletization_value = ${MaxTemporaryDesyncTime}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MaxRandomTime'; ParameterType = 'System.TimeSpan'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MaxRandomTime'; ParameterType = 'System.TimeSpan'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n      $__cmdletization_returnValue = $null\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:ModifyInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru\n            if ($PSBoundParameters.ContainsKey('InputObject')) {\n                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }\n            } else {\n                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)\n            }\n        }\n    }\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP MSFT_NetIPv6Protocol.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Set-NetIPv6Protocol' -Alias '*'\n        \n\n\nScriptBlock ID: c4bc9262-bb75-48c0-b6bd-2bb0124d55fb\nPath:",
    "_time": "2025-08-06T17:24:22.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:14003",
    "_indextime": "1754501062",
    "_serial": "70",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "115",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:24:22 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4104\nEventType=3\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Warning\nRecordNumber=451\nKeywords=None\nTaskCategory=Execute a Remote Command\nOpCode=On create calls\nMessage=Splunk could not get the description for this event. Either the component that raises this event is not installed on your local computer or the installation is corrupt.\n\nFormatMessage error:\n\nGot the following information from this event: \n\nbject (cdxml)')]\n    [Alias('MaxValidLifetime')]\n    [timespan]\n    ${MaxTemporaryValidLifetime},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('MaxPreferredLifetime')]\n    [timespan]\n    ${MaxTemporaryPreferredLifetime},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('RegenerateTime')]\n    [timespan]\n    ${TemporaryRegenerateTime},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('MaxRandomTime')]\n    [timespan]\n    ${MaxTemporaryDesyncTime},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${AsJob},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${PassThru})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n\n\n    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n    switch -exact ($PSCmdlet.ParameterSetName) { \n        { @('InputObject (cdxml)') -contains $_ } {\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('DefaultHopLimit')) {\n            [object]$__cmdletization_value = ${DefaultHopLimit}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DefaultHopLimit'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DefaultHopLimit'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('NeighborCacheLimitEntries')) {\n            [object]$__cmdletization_value = ${NeighborCacheLimitEntries}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NeighborCacheLimit'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NeighborCacheLimit'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('RouteCacheLimitEntries')) {\n            [object]$__cmdletization_value = ${RouteCacheLimitEntries}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RouteCacheLimit'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RouteCacheLimit'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('ReassemblyLimitBytes')) {\n            [object]$__cmdletization_value = ${ReassemblyLimitBytes}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ReassemblyLimit'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ReassemblyLimit'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('IcmpRedirects')) {\n            [object]$__cmdletization_value = ${IcmpRedirects}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IcmpRedirects'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.IcmpRedirects'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IcmpRedirects'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.IcmpRedirects'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('SourceRoutingBehavior')) {\n            [object]$__cmdletization_value = ${SourceRoutingBehavior}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SourceRoutingBehavior'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.SourceRoutingBehavior'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SourceRoutingBehavior'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.SourceRoutingBehavior'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('DhcpMediaSense')) {\n            [object]$__cmdletization_value = ${DhcpMediaSense}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DhcpMediaSense'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.DhcpMediaSense'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DhcpMediaSense'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.DhcpMediaSense'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('MediaSenseEventLog')) {\n            [object]$__cmdletization_value = ${MediaSenseEventLog}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MediaSenseEventLog'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.MediaSenseEventLog'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MediaSenseEventLog'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.MediaSenseEventLog'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('MldLevel')) {\n            [object]$__cmdletization_value = ${MldLevel}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MldLevel'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.MldLevel'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MldLevel'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.MldLevel'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('MldVersion')) {\n            [object]$__cmdletization_value = ${MldVersion}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MldVersion'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.MldVersion'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MldVersion'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.MldVersion'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('MulticastForwarding')) {\n            [object]$__cmdletization_value = ${MulticastForwarding}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MulticastForwarding'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.MulticastForwarding'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MulticastForwarding'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.MulticastForwarding'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('GroupForwardedFragments')) {\n            [object]$__cmdletization_value = ${GroupForwardedFragments}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'GroupForwardedFragments'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.GroupForwardedFragments'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'GroupForwardedFragments'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.GroupForwardedFragments'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('RandomizeIdentifiers')) {\n            [object]$__cmdletization_value = ${RandomizeIdentifiers}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RandomizeIdentifiers'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.RandomizeIdentifiers'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RandomizeIdentifiers'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.RandomizeIdentifiers'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('AddressMaskReply')) {\n            [object]$__cmdletization_value = ${AddressMaskReply}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AddressMaskReply'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.AddressMaskReply'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AddressMaskReply'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.AddressMaskReply'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('DeadGatewayDetection')) {\n            [object]$__cmdletization_value = ${DeadGatewayDetection}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DeadGatewayDetection'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.DeadGatewayDetection'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DeadGatewayDetection'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.DeadGatewayDetection'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('UseTemporaryAddresses')) {\n            [object]$__cmdletizati\nc4bc9262-bb75-48c0-b6bd-2bb0124d55fb",
    "_time": "2025-08-06T17:24:22.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:13426",
    "_indextime": "1754501062",
    "_serial": "71",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "260",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:24:22 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4104\nEventType=3\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Warning\nRecordNumber=450\nKeywords=None\nTaskCategory=Execute a Remote Command\nOpCode=On create calls\nMessage=Splunk could not get the description for this event. Either the component that raises this event is not installed on your local computer or the installation is corrupt.\n\nFormatMessage error:\n\nGot the following information from this event: \n\n\n#requires -version 3.0\n\ntry { Microsoft.PowerShell.Core\\Set-StrictMode -Off } catch { }\n\n$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module\n\n$script:ClassName = 'ROOT/StandardCimv2/MSFT_NetIPv6Protocol'\n$script:ClassVersion = '1.0.0'\n$script:ModuleVersion = '1.0.0'\n$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]\n\n$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()\n\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function @()\n        \n\nfunction __cmdletization_BindCommonParameters\n{\n    param(\n        $__cmdletization_objectModelWrapper,\n        $myPSBoundParameters\n    )       \n                \n\n        if ($myPSBoundParameters.ContainsKey('CimSession')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('AsJob')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] \n        }\n                    \n\n}\n                \n\nfunction Get-NetIPv6Protocol\n{\n    [CmdletBinding(DefaultParameterSetName='ByName', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/StandardCimv2/MSFT_NetIPv6Protocol')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${DefaultHopLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Alias('NeighborCacheLimit')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${NeighborCacheLimitEntries},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Alias('RouteCacheLimit')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${RouteCacheLimitEntries},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Alias('ReassemblyLimit')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${ReassemblyLimitBytes},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.IcmpRedirects[]]\n    ${IcmpRedirects},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.SourceRoutingBehavior[]]\n    ${SourceRoutingBehavior},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.DhcpMediaSense[]]\n    ${DhcpMediaSense},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.MediaSenseEventLog[]]\n    ${MediaSenseEventLog},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.MldLevel[]]\n    ${MldLevel},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.MldVersion[]]\n    ${MldVersion},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.MulticastForwarding[]]\n    ${MulticastForwarding},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.GroupForwardedFragments[]]\n    ${GroupForwardedFragments},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.RandomizeIdentifiers[]]\n    ${RandomizeIdentifiers},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.AddressMaskReply[]]\n    ${AddressMaskReply},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.DeadGatewayDetection[]]\n    ${DeadGatewayDetection},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.UseTemporaryAddresses[]]\n    ${UseTemporaryAddresses},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Alias('MaxDadAttempts')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${MaxTemporaryDadAttempts},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Alias('MaxValidLifetime')]\n    [ValidateNotNull()]\n    [timespan[]]\n    ${MaxTemporaryValidLifetime},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Alias('MaxPreferredLifetime')]\n    [ValidateNotNull()]\n    [timespan[]]\n    ${MaxTemporaryPreferredLifetime},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Alias('RegenerateTime')]\n    [ValidateNotNull()]\n    [timespan[]]\n    ${TemporaryRegenerateTime},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Alias('MaxRandomTime')]\n    [ValidateNotNull()]\n    [timespan[]]\n    ${MaxTemporaryDesyncTime},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [switch]\n    ${AsJob})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('DefaultHopLimit') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DefaultHopLimit})\n        $__cmdletization_queryBuilder.FilterByProperty('DefaultHopLimit', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('NeighborCacheLimitEntries') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${NeighborCacheLimitEntries})\n        $__cmdletization_queryBuilder.FilterByProperty('NeighborCacheLimit', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('RouteCacheLimitEntries') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${RouteCacheLimitEntries})\n        $__cmdletization_queryBuilder.FilterByProperty('RouteCacheLimit', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('ReassemblyLimitBytes') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${ReassemblyLimitBytes})\n        $__cmdletization_queryBuilder.FilterByProperty('ReassemblyLimit', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('IcmpRedirects') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${IcmpRedirects})\n        $__cmdletization_queryBuilder.FilterByProperty('IcmpRedirects', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('SourceRoutingBehavior') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${SourceRoutingBehavior})\n        $__cmdletization_queryBuilder.FilterByProperty('SourceRoutingBehavior', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DhcpMediaSense') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DhcpMediaSense})\n        $__cmdletization_queryBuilder.FilterByProperty('DhcpMediaSense', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('MediaSenseEventLog') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${MediaSenseEventLog})\n        $__cmdletization_queryBuilder.FilterByProperty('MediaSenseEventLog', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('MldLevel') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${MldLevel})\n        $__cmdletization_queryBuilder.FilterByProperty('MldLevel', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('MldVersion') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${MldVersion})\n        $__cmdletization_queryBuilder.FilterByProperty('MldVersion', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('MulticastForwarding') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${MulticastForwarding})\n        $__cmdletization_queryBuilder.FilterByProperty('MulticastForwarding', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('GroupForwardedFragments') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${GroupForwardedFragments})\n        $__cmdletization_queryBuilder.FilterByProperty('GroupForwardedFragments', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('RandomizeIdentifiers') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${RandomizeIdentifiers})\n        $__cmdletization_queryBuilder.FilterByProperty('RandomizeIdentifiers', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AddressMaskReply') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${AddressMaskReply})\n        $__cmdletization_queryBuilder.FilterByProperty('AddressMaskReply', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DeadGatewayDetection') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DeadGatewayDetection})\n        $__cmdletization_queryBuilder.FilterByProperty('DeadGatewayDetection', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('UseTemporaryAddresses') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${UseTemporaryAddresses})\n        $__cmdletization_queryBuilder.FilterByProperty('UseTemporaryAddresses', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('MaxTemporaryDadAttempts') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${MaxTemporaryDadAttempts})\n        $__cmdletization_queryBuilder.FilterByProperty('MaxDadAttempts', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('MaxTemporaryValidLifetime') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${MaxTemporaryValidLifetime})\n        $__cmdletization_queryBuilder.FilterByProperty('MaxValidLifetime', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('MaxTemporaryPreferredLifetime') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${MaxTemporaryPreferredLifetime})\n        $__cmdletization_queryBuilder.FilterByProperty('MaxPreferredLifetime', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('TemporaryRegenerateTime') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${TemporaryRegenerateTime})\n        $__cmdletization_queryBuilder.FilterByProperty('RegenerateTime', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('MaxTemporaryDesyncTime') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${MaxTemporaryDesyncTime})\n        $__cmdletization_queryBuilder.FilterByProperty('MaxRandomTime', $__cmdletization_values, $false, 'Default')\n    }\n\n\n    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP MSFT_NetIPv6Protocol.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Get-NetIPv6Protocol' -Alias '*'\n        \n\nfunction Set-NetIPv6Protocol\n{\n    [CmdletBinding(DefaultParameterSetName='InputObject (cdxml)', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/StandardCimv2/MSFT_NetIPv6Protocol')]\n\n    param(\n    \n    [Parameter(ParameterSetName='InputObject (cdxml)', ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetIPv6Protocol')]\n    [ValidateNotNull()]\n    [ciminstance[]]\n    ${InputObject},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [uint32]\n    ${DefaultHopLimit},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('NeighborCacheLimit')]\n    [uint32]\n    ${NeighborCacheLimitEntries},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('RouteCacheLimit')]\n    [uint32]\n    ${RouteCacheLimitEntries},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('ReassemblyLimit')]\n    [uint32]\n    ${ReassemblyLimitBytes},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.IcmpRedirects]\n    ${IcmpRedirects},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.SourceRoutingBehavior]\n    ${SourceRoutingBehavior},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.DhcpMediaSense]\n    ${DhcpMediaSense},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.MediaSenseEventLog]\n    ${MediaSenseEventLog},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.MldLevel]\n    ${MldLevel},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.MldVersion]\n    ${MldVersion},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.MulticastForwarding]\n    ${MulticastForwarding},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.GroupForwardedFragments]\n    ${GroupForwardedFragments},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.RandomizeIdentifiers]\n    ${RandomizeIdentifiers},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.AddressMaskReply]\n    ${AddressMaskReply},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.DeadGatewayDetection]\n    ${DeadGatewayDetection},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.UseTemporaryAddresses]\n    ${UseTemporaryAddresses},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('MaxDadAttempts')]\n    [uint32]\n    ${MaxTemporaryDadAttempts},\n\n    [Parameter(ParameterSetName='InputO\nc4bc9262-bb75-48c0-b6bd-2bb0124d55fb",
    "_time": "2025-08-06T17:24:22.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:12849",
    "_indextime": "1754501062",
    "_serial": "72",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "446",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:24:22 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=449\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Set-NetIPv4Protocol\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 3d722da8-4c22-4035-ae86-da8b8d39bbd9\n        Host Application = powershell.exe -Command Get-NetIPAddress\n        Engine Version = 5.1.20348.3932\n        Runspace ID = a126cfe4-e1d1-496d-9c5a-1ee8bf7f15cd\n        Pipeline ID = 20\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 52\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:24:22.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:12808",
    "_indextime": "1754501062",
    "_serial": "73",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "39",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:24:22 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=448\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Get-NetIPv4Protocol\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 3d722da8-4c22-4035-ae86-da8b8d39bbd9\n        Host Application = powershell.exe -Command Get-NetIPAddress\n        Engine Version = 5.1.20348.3932\n        Runspace ID = a126cfe4-e1d1-496d-9c5a-1ee8bf7f15cd\n        Pipeline ID = 20\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 50\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:24:22.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:12767",
    "_indextime": "1754501062",
    "_serial": "74",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "39",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:24:22 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=447\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 3d722da8-4c22-4035-ae86-da8b8d39bbd9\n        Host Application = powershell.exe -Command Get-NetIPAddress\n        Engine Version = 5.1.20348.3932\n        Runspace ID = a126cfe4-e1d1-496d-9c5a-1ee8bf7f15cd\n        Pipeline ID = 20\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 48\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:24:22.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:12729",
    "_indextime": "1754501062",
    "_serial": "75",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "38",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:24:22 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=446\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Set-StrictMode): \"Set-StrictMode\"\nParameterBinding(Set-StrictMode): name=\"Off\"; value=\"True\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 3d722da8-4c22-4035-ae86-da8b8d39bbd9\n        Host Application = powershell.exe -Command Get-NetIPAddress\n        Engine Version = 5.1.20348.3932\n        Runspace ID = a126cfe4-e1d1-496d-9c5a-1ee8bf7f15cd\n        Pipeline ID = 20\n        Command Name = Set-StrictMode\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 46\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:24:22.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:12691",
    "_indextime": "1754501062",
    "_serial": "76",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "38",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:24:22 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4104\nEventType=3\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Warning\nRecordNumber=445\nKeywords=None\nTaskCategory=Execute a Remote Command\nOpCode=On create calls\nMessage=Creating Scriptblock text (3 of 3):\n  [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('AddressMaskReply')) {\n            [object]$__cmdletization_value = ${AddressMaskReply}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AddressMaskReply'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.AddressMaskReply'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AddressMaskReply'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.AddressMaskReply'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('DeadGatewayDetection')) {\n            [object]$__cmdletization_value = ${DeadGatewayDetection}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DeadGatewayDetection'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.DeadGatewayDetection'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DeadGatewayDetection'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.DeadGatewayDetection'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('MinimumMtu')) {\n            [object]$__cmdletization_value = ${MinimumMtu}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MinimumMtu'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MinimumMtu'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n      $__cmdletization_returnValue = $null\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:ModifyInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru\n            if ($PSBoundParameters.ContainsKey('InputObject')) {\n                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }\n            } else {\n                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)\n            }\n        }\n    }\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP MSFT_NetIPv4Protocol.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Set-NetIPv4Protocol' -Alias '*'\n        \n\n\nScriptBlock ID: 7fefef24-0fbc-4314-b6d7-8a027bce348b\nPath:",
    "_time": "2025-08-06T17:24:22.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:12542",
    "_indextime": "1754501062",
    "_serial": "77",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "87",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:24:22 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4104\nEventType=3\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Warning\nRecordNumber=444\nKeywords=None\nTaskCategory=Execute a Remote Command\nOpCode=On create calls\nMessage=Splunk could not get the description for this event. Either the component that raises this event is not installed on your local computer or the installation is corrupt.\n\nFormatMessage error:\n\nGot the following information from this event: \n\nect (cdxml)')]\n    [uint32]\n    ${MinimumMtu},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${AsJob},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${PassThru})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n\n\n    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n    switch -exact ($PSCmdlet.ParameterSetName) { \n        { @('InputObject (cdxml)') -contains $_ } {\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('DefaultHopLimit')) {\n            [object]$__cmdletization_value = ${DefaultHopLimit}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DefaultHopLimit'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DefaultHopLimit'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('NeighborCacheLimitEntries')) {\n            [object]$__cmdletization_value = ${NeighborCacheLimitEntries}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NeighborCacheLimit'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NeighborCacheLimit'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('RouteCacheLimitEntries')) {\n            [object]$__cmdletization_value = ${RouteCacheLimitEntries}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RouteCacheLimit'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RouteCacheLimit'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('ReassemblyLimitBytes')) {\n            [object]$__cmdletization_value = ${ReassemblyLimitBytes}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ReassemblyLimit'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ReassemblyLimit'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('IcmpRedirects')) {\n            [object]$__cmdletization_value = ${IcmpRedirects}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IcmpRedirects'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.IcmpRedirects'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IcmpRedirects'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.IcmpRedirects'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('SourceRoutingBehavior')) {\n            [object]$__cmdletization_value = ${SourceRoutingBehavior}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SourceRoutingBehavior'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.SourceRoutingBehavior'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SourceRoutingBehavior'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.SourceRoutingBehavior'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('DhcpMediaSense')) {\n            [object]$__cmdletization_value = ${DhcpMediaSense}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DhcpMediaSense'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.DhcpMediaSense'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DhcpMediaSense'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.DhcpMediaSense'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('MediaSenseEventLog')) {\n            [object]$__cmdletization_value = ${MediaSenseEventLog}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MediaSenseEventLog'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.MediaSenseEventLog'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MediaSenseEventLog'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.MediaSenseEventLog'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('IGMPLevel')) {\n            [object]$__cmdletization_value = ${IGMPLevel}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MldLevel'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.MldLevel'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MldLevel'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.MldLevel'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('IGMPVersion')) {\n            [object]$__cmdletization_value = ${IGMPVersion}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MldVersion'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.MldVersion'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MldVersion'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.MldVersion'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('MulticastForwarding')) {\n            [object]$__cmdletization_value = ${MulticastForwarding}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MulticastForwarding'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.MulticastForwarding'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MulticastForwarding'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.MulticastForwarding'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('GroupForwardedFragments')) {\n            [object]$__cmdletization_value = ${GroupForwardedFragments}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'GroupForwardedFragments'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.GroupForwardedFragments'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'GroupForwardedFragments'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.GroupForwardedFragments'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('RandomizeIdentifiers')) {\n            [object]$__cmdletization_value = ${RandomizeIdentifiers}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RandomizeIdentifiers'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.RandomizeIdentifiers'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RandomizeIdentifiers'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.RandomizeIdentifiers'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n        \n7fefef24-0fbc-4314-b6d7-8a027bce348b",
    "_time": "2025-08-06T17:24:22.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:12050",
    "_indextime": "1754501062",
    "_serial": "78",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "222",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:24:22 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4104\nEventType=3\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Warning\nRecordNumber=443\nKeywords=None\nTaskCategory=Execute a Remote Command\nOpCode=On create calls\nMessage=Splunk could not get the description for this event. Either the component that raises this event is not installed on your local computer or the installation is corrupt.\n\nFormatMessage error:\n\nGot the following information from this event: \n\n\n#requires -version 3.0\n\ntry { Microsoft.PowerShell.Core\\Set-StrictMode -Off } catch { }\n\n$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module\n\n$script:ClassName = 'ROOT/StandardCimv2/MSFT_NetIPv4Protocol'\n$script:ClassVersion = '1.0.0'\n$script:ModuleVersion = '1.0.0'\n$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]\n\n$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()\n\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function @()\n        \n\nfunction __cmdletization_BindCommonParameters\n{\n    param(\n        $__cmdletization_objectModelWrapper,\n        $myPSBoundParameters\n    )       \n                \n\n        if ($myPSBoundParameters.ContainsKey('CimSession')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('AsJob')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] \n        }\n                    \n\n}\n                \n\nfunction Get-NetIPv4Protocol\n{\n    [CmdletBinding(DefaultParameterSetName='ByName', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/StandardCimv2/MSFT_NetIPv4Protocol')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${DefaultHopLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Alias('NeighborCacheLimit')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${NeighborCacheLimitEntries},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Alias('RouteCacheLimit')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${RouteCacheLimitEntries},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Alias('ReassemblyLimit')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${ReassemblyLimitBytes},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.IcmpRedirects[]]\n    ${IcmpRedirects},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.SourceRoutingBehavior[]]\n    ${SourceRoutingBehavior},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.DhcpMediaSense[]]\n    ${DhcpMediaSense},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.MediaSenseEventLog[]]\n    ${MediaSenseEventLog},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Alias('MldLevel')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.MldLevel[]]\n    ${IGMPLevel},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Alias('MldVersion')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.MldVersion[]]\n    ${IGMPVersion},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.MulticastForwarding[]]\n    ${MulticastForwarding},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.GroupForwardedFragments[]]\n    ${GroupForwardedFragments},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.RandomizeIdentifiers[]]\n    ${RandomizeIdentifiers},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.AddressMaskReply[]]\n    ${AddressMaskReply},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.DeadGatewayDetection[]]\n    ${DeadGatewayDetection},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${MinimumMtu},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [switch]\n    ${AsJob})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('DefaultHopLimit') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DefaultHopLimit})\n        $__cmdletization_queryBuilder.FilterByProperty('DefaultHopLimit', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('NeighborCacheLimitEntries') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${NeighborCacheLimitEntries})\n        $__cmdletization_queryBuilder.FilterByProperty('NeighborCacheLimit', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('RouteCacheLimitEntries') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${RouteCacheLimitEntries})\n        $__cmdletization_queryBuilder.FilterByProperty('RouteCacheLimit', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('ReassemblyLimitBytes') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${ReassemblyLimitBytes})\n        $__cmdletization_queryBuilder.FilterByProperty('ReassemblyLimit', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('IcmpRedirects') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${IcmpRedirects})\n        $__cmdletization_queryBuilder.FilterByProperty('IcmpRedirects', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('SourceRoutingBehavior') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${SourceRoutingBehavior})\n        $__cmdletization_queryBuilder.FilterByProperty('SourceRoutingBehavior', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DhcpMediaSense') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DhcpMediaSense})\n        $__cmdletization_queryBuilder.FilterByProperty('DhcpMediaSense', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('MediaSenseEventLog') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${MediaSenseEventLog})\n        $__cmdletization_queryBuilder.FilterByProperty('MediaSenseEventLog', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('IGMPLevel') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${IGMPLevel})\n        $__cmdletization_queryBuilder.FilterByProperty('MldLevel', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('IGMPVersion') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${IGMPVersion})\n        $__cmdletization_queryBuilder.FilterByProperty('MldVersion', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('MulticastForwarding') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${MulticastForwarding})\n        $__cmdletization_queryBuilder.FilterByProperty('MulticastForwarding', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('GroupForwardedFragments') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${GroupForwardedFragments})\n        $__cmdletization_queryBuilder.FilterByProperty('GroupForwardedFragments', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('RandomizeIdentifiers') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${RandomizeIdentifiers})\n        $__cmdletization_queryBuilder.FilterByProperty('RandomizeIdentifiers', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AddressMaskReply') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${AddressMaskReply})\n        $__cmdletization_queryBuilder.FilterByProperty('AddressMaskReply', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DeadGatewayDetection') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DeadGatewayDetection})\n        $__cmdletization_queryBuilder.FilterByProperty('DeadGatewayDetection', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('MinimumMtu') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${MinimumMtu})\n        $__cmdletization_queryBuilder.FilterByProperty('MinimumMtu', $__cmdletization_values, $false, 'Default')\n    }\n\n\n    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP MSFT_NetIPv4Protocol.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Get-NetIPv4Protocol' -Alias '*'\n        \n\nfunction Set-NetIPv4Protocol\n{\n    [CmdletBinding(DefaultParameterSetName='InputObject (cdxml)', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/StandardCimv2/MSFT_NetIPv4Protocol')]\n\n    param(\n    \n    [Parameter(ParameterSetName='InputObject (cdxml)', ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetIPv4Protocol')]\n    [ValidateNotNull()]\n    [ciminstance[]]\n    ${InputObject},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [uint32]\n    ${DefaultHopLimit},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('NeighborCacheLimit')]\n    [uint32]\n    ${NeighborCacheLimitEntries},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('RouteCacheLimit')]\n    [uint32]\n    ${RouteCacheLimitEntries},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('ReassemblyLimit')]\n    [uint32]\n    ${ReassemblyLimitBytes},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.IcmpRedirects]\n    ${IcmpRedirects},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.SourceRoutingBehavior]\n    ${SourceRoutingBehavior},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.DhcpMediaSense]\n    ${DhcpMediaSense},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.MediaSenseEventLog]\n    ${MediaSenseEventLog},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('MldLevel')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.MldLevel]\n    ${IGMPLevel},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('MldVersion')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.MldVersion]\n    ${IGMPVersion},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.MulticastForwarding]\n    ${MulticastForwarding},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.GroupForwardedFragments]\n    ${GroupForwardedFragments},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.RandomizeIdentifiers]\n    ${RandomizeIdentifiers},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.AddressMaskReply]\n    ${AddressMaskReply},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.DeadGatewayDetection]\n    ${DeadGatewayDetection},\n\n    [Parameter(ParameterSetName='InputObj\n7fefef24-0fbc-4314-b6d7-8a027bce348b",
    "_time": "2025-08-06T17:24:22.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:11558",
    "_indextime": "1754501062",
    "_serial": "79",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "391",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:24:22 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=442\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Set-NetIPInterface\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 3d722da8-4c22-4035-ae86-da8b8d39bbd9\n        Host Application = powershell.exe -Command Get-NetIPAddress\n        Engine Version = 5.1.20348.3932\n        Runspace ID = a126cfe4-e1d1-496d-9c5a-1ee8bf7f15cd\n        Pipeline ID = 20\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 44\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:24:22.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:11517",
    "_indextime": "1754501062",
    "_serial": "80",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "39",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:24:22 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=441\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Get-NetIPInterface\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 3d722da8-4c22-4035-ae86-da8b8d39bbd9\n        Host Application = powershell.exe -Command Get-NetIPAddress\n        Engine Version = 5.1.20348.3932\n        Runspace ID = a126cfe4-e1d1-496d-9c5a-1ee8bf7f15cd\n        Pipeline ID = 20\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 42\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:24:22.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:11476",
    "_indextime": "1754501062",
    "_serial": "81",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "39",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:24:22 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=440\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 3d722da8-4c22-4035-ae86-da8b8d39bbd9\n        Host Application = powershell.exe -Command Get-NetIPAddress\n        Engine Version = 5.1.20348.3932\n        Runspace ID = a126cfe4-e1d1-496d-9c5a-1ee8bf7f15cd\n        Pipeline ID = 20\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 40\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:24:22.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:11438",
    "_indextime": "1754501062",
    "_serial": "82",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "38",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:24:22 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=439\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Set-StrictMode): \"Set-StrictMode\"\nParameterBinding(Set-StrictMode): name=\"Off\"; value=\"True\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 3d722da8-4c22-4035-ae86-da8b8d39bbd9\n        Host Application = powershell.exe -Command Get-NetIPAddress\n        Engine Version = 5.1.20348.3932\n        Runspace ID = a126cfe4-e1d1-496d-9c5a-1ee8bf7f15cd\n        Pipeline ID = 20\n        Command Name = Set-StrictMode\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 38\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:24:22.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:11400",
    "_indextime": "1754501062",
    "_serial": "83",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "38",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:24:22 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4104\nEventType=3\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Warning\nRecordNumber=438\nKeywords=None\nTaskCategory=Execute a Remote Command\nOpCode=On create calls\nMessage=Creating Scriptblock text (6 of 6):\neneratedTypes.NetIPInterface.Dhcp'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('AutomaticMetric')) {\n            [object]$__cmdletization_value = ${AutomaticMetric}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AutomaticMetric'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.AutomaticMetric'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AutomaticMetric'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.AutomaticMetric'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n      $__cmdletization_returnValue = $null\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:ModifyInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru\n            if ($PSBoundParameters.ContainsKey('InputObject')) {\n                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }\n            } else {\n                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)\n            }\n        }\n    }\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP MSFT_NetIPInterface.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Set-NetIPInterface' -Alias '*'\n        \n\n\nScriptBlock ID: 343fccb5-062c-4740-9717-83a3eaa64776\nPath:",
    "_time": "2025-08-06T17:24:22.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:11301",
    "_indextime": "1754501062",
    "_serial": "84",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "72",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:24:22 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4104\nEventType=3\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Warning\nRecordNumber=437\nKeywords=None\nTaskCategory=Execute a Remote Command\nOpCode=On create calls\nMessage=Splunk could not get the description for this event. Either the component that raises this event is not installed on your local computer or the installation is corrupt.\n\nFormatMessage error:\n\nGot the following information from this event: \n\nAddressConfiguration'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.ManagedAddressConfiguration'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('OtherStatefulConfiguration')) {\n            [object]$__cmdletization_value = ${OtherStatefulConfiguration}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'OtherStatefulConfiguration'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.OtherStatefulConfiguration'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'OtherStatefulConfiguration'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.OtherStatefulConfiguration'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('WeakHostSend')) {\n            [object]$__cmdletization_value = ${WeakHostSend}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'WeakHostSend'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.WeakHostSend'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'WeakHostSend'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.WeakHostSend'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('WeakHostReceive')) {\n            [object]$__cmdletization_value = ${WeakHostReceive}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'WeakHostReceive'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.WeakHostReceive'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'WeakHostReceive'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.WeakHostReceive'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('IgnoreDefaultRoutes')) {\n            [object]$__cmdletization_value = ${IgnoreDefaultRoutes}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IgnoreDefaultRoutes'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.IgnoreDefaultRoutes'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IgnoreDefaultRoutes'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.IgnoreDefaultRoutes'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('AdvertisedRouterLifetime')) {\n            [object]$__cmdletization_value = ${AdvertisedRouterLifetime}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AdvertisedRouterLifetime'; ParameterType = 'System.TimeSpan'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AdvertisedRouterLifetime'; ParameterType = 'System.TimeSpan'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('AdvertiseDefaultRoute')) {\n            [object]$__cmdletization_value = ${AdvertiseDefaultRoute}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AdvertiseDefaultRoute'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.AdvertiseDefaultRoute'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AdvertiseDefaultRoute'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.AdvertiseDefaultRoute'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('CurrentHopLimit')) {\n            [object]$__cmdletization_value = ${CurrentHopLimit}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'CurrentHopLimit'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'CurrentHopLimit'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('ForceArpNdWolPattern')) {\n            [object]$__cmdletization_value = ${ForceArpNdWolPattern}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ForceArpNdWolPattern'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.ForceArpNdWolPattern'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ForceArpNdWolPattern'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.ForceArpNdWolPattern'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('DirectedMacWolPattern')) {\n            [object]$__cmdletization_value = ${DirectedMacWolPattern}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DirectedMacWolPattern'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.DirectedMacWolPattern'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DirectedMacWolPattern'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.DirectedMacWolPattern'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('EcnMarking')) {\n            [object]$__cmdletization_value = ${EcnMarking}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EcnMarking'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.EcnMarking'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EcnMarking'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.EcnMarking'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('Dhcp')) {\n            [object]$__cmdletization_value = ${Dhcp}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Dhcp'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.Dhcp'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Dhcp'; ParameterType = 'Microsoft.PowerShell.Cmdletization.G\n343fccb5-062c-4740-9717-83a3eaa64776",
    "_time": "2025-08-06T17:24:22.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:10931",
    "_indextime": "1754501062",
    "_serial": "85",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "132",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:24:22 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4104\nEventType=3\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Warning\nRecordNumber=436\nKeywords=None\nTaskCategory=Execute a Remote Command\nOpCode=On create calls\nMessage=Splunk could not get the description for this event. Either the component that raises this event is not installed on your local computer or the installation is corrupt.\n\nFormatMessage error:\n\nGot the following information from this event: \n\n (cdxml)') -contains $_ } {\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('Forwarding')) {\n            [object]$__cmdletization_value = ${Forwarding}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Forwarding'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.Forwarding'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Forwarding'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.Forwarding'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('ClampMss')) {\n            [object]$__cmdletization_value = ${ClampMss}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ClampMss'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.ClampMss'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ClampMss'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.ClampMss'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('Advertising')) {\n            [object]$__cmdletization_value = ${Advertising}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Advertising'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.Advertising'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Advertising'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.Advertising'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('NlMtuBytes')) {\n            [object]$__cmdletization_value = ${NlMtuBytes}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NlMtu'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NlMtu'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('InterfaceMetric')) {\n            [object]$__cmdletization_value = ${InterfaceMetric}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InterfaceMetric'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InterfaceMetric'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('NeighborUnreachabilityDetection')) {\n            [object]$__cmdletization_value = ${NeighborUnreachabilityDetection}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NeighborUnreachabilityDetection'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.NeighborUnreachabilityDetection'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NeighborUnreachabilityDetection'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.NeighborUnreachabilityDetection'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('BaseReachableTimeMs')) {\n            [object]$__cmdletization_value = ${BaseReachableTimeMs}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'BaseReachableTime'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'BaseReachableTime'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('RetransmitTimeMs')) {\n            [object]$__cmdletization_value = ${RetransmitTimeMs}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RetransmitTime'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RetransmitTime'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('DadTransmits')) {\n            [object]$__cmdletization_value = ${DadTransmits}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DadTransmits'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DadTransmits'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('DadRetransmitTimeMs')) {\n            [object]$__cmdletization_value = ${DadRetransmitTimeMs}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DadRetransmitTime'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DadRetransmitTime'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('RouterDiscovery')) {\n            [object]$__cmdletization_value = ${RouterDiscovery}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RouterDiscovery'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.RouterDiscovery'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RouterDiscovery'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.RouterDiscovery'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('ManagedAddressConfiguration')) {\n            [object]$__cmdletization_value = ${ManagedAddressConfiguration}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ManagedAddressConfiguration'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.ManagedAddressConfiguration'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Managed\n343fccb5-062c-4740-9717-83a3eaa64776",
    "_time": "2025-08-06T17:24:22.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:10561",
    "_indextime": "1754501062",
    "_serial": "86",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "139",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:24:22 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4104\nEventType=3\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Warning\nRecordNumber=435\nKeywords=None\nTaskCategory=Execute a Remote Command\nOpCode=On create calls\nMessage=Splunk could not get the description for this event. Either the component that raises this event is not installed on your local computer or the installation is corrupt.\n\nFormatMessage error:\n\nGot the following information from this event: \n\n\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Get-NetIPInterface' -Alias '*'\n        \n\nfunction Set-NetIPInterface\n{\n    [CmdletBinding(DefaultParameterSetName='ByName', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/StandardCimv2/MSFT_NetIPInterface')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByName', ValueFromPipelineByPropertyName=$true)]\n    [Alias('ifIndex')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${InterfaceIndex},\n\n    [Parameter(ParameterSetName='ByName', Position=0, ValueFromPipelineByPropertyName=$true)]\n    [Alias('ifAlias')]\n    [ValidateNotNull()]\n    [string[]]\n    ${InterfaceAlias},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.AddressFamily[]]\n    ${AddressFamily},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${ReachableTime},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.NeighborDiscoverySupported[]]\n    ${NeighborDiscoverySupported},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${CompartmentId},\n\n    [Parameter(ParameterSetName='ByName')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='ByName')]\n    [switch]\n    ${IncludeAllCompartments},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetIPInterface')]\n    [ValidateNotNull()]\n    [ciminstance[]]\n    ${InputObject},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.Forwarding]\n    ${Forwarding},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.ClampMss]\n    ${ClampMss},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.Advertising]\n    ${Advertising},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [uint32]\n    ${NlMtuBytes},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [uint32]\n    ${InterfaceMetric},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.NeighborUnreachabilityDetection]\n    ${NeighborUnreachabilityDetection},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('BaseReachableTime')]\n    [uint32]\n    ${BaseReachableTimeMs},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('RetransmitTime')]\n    [uint32]\n    ${RetransmitTimeMs},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [uint32]\n    ${DadTransmits},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('DadRetransmitTime')]\n    [uint32]\n    ${DadRetransmitTimeMs},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.RouterDiscovery]\n    ${RouterDiscovery},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.ManagedAddressConfiguration]\n    ${ManagedAddressConfiguration},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.OtherStatefulConfiguration]\n    ${OtherStatefulConfiguration},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.WeakHostSend]\n    ${WeakHostSend},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.WeakHostReceive]\n    ${WeakHostReceive},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.IgnoreDefaultRoutes]\n    ${IgnoreDefaultRoutes},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [timespan]\n    ${AdvertisedRouterLifetime},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.AdvertiseDefaultRoute]\n    ${AdvertiseDefaultRoute},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [uint32]\n    ${CurrentHopLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.ForceArpNdWolPattern]\n    ${ForceArpNdWolPattern},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.DirectedMacWolPattern]\n    ${DirectedMacWolPattern},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.EcnMarking]\n    ${EcnMarking},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.Dhcp]\n    ${Dhcp},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.AutomaticMetric]\n    ${AutomaticMetric},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${AsJob},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${PassThru})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('InterfaceIndex') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${InterfaceIndex})\n        $__cmdletization_queryBuilder.FilterByProperty('InterfaceIndex', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('InterfaceAlias') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${InterfaceAlias})\n        $__cmdletization_queryBuilder.FilterByProperty('InterfaceAlias', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AddressFamily') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${AddressFamily})\n        $__cmdletization_queryBuilder.FilterByProperty('AddressFamily', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('ReachableTime') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${ReachableTime})\n        $__cmdletization_queryBuilder.FilterByProperty('ReachableTime', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('NeighborDiscoverySupported') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${NeighborDiscoverySupported})\n        $__cmdletization_queryBuilder.FilterByProperty('NeighborDiscoverySupported', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('CompartmentId') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${CompartmentId})\n        $__cmdletization_queryBuilder.FilterByProperty('CompartmentId', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})\n    }\n    if ($PSBoundParameters.ContainsKey('IncludeAllCompartments') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('IncludeAllCompartments', ${IncludeAllCompartments})\n    }\n\n\n    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n    switch -exact ($PSCmdlet.ParameterSetName) { \n        { @('ByName', 'InputObject\n343fccb5-062c-4740-9717-83a3eaa64776",
    "_time": "2025-08-06T17:24:22.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:10191",
    "_indextime": "1754501062",
    "_serial": "87",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "302",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:24:22 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4104\nEventType=3\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Warning\nRecordNumber=434\nKeywords=None\nTaskCategory=Execute a Remote Command\nOpCode=On create calls\nMessage=Splunk could not get the description for this event. Either the component that raises this event is not installed on your local computer or the installation is corrupt.\n\nFormatMessage error:\n\nGot the following information from this event: \n\n', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AddressFamily') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${AddressFamily})\n        $__cmdletization_queryBuilder.FilterByProperty('AddressFamily', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Forwarding') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Forwarding})\n        $__cmdletization_queryBuilder.FilterByProperty('Forwarding', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('ClampMss') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${ClampMss})\n        $__cmdletization_queryBuilder.FilterByProperty('ClampMss', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Advertising') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Advertising})\n        $__cmdletization_queryBuilder.FilterByProperty('Advertising', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('NlMtuBytes') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${NlMtuBytes})\n        $__cmdletization_queryBuilder.FilterByProperty('NlMtu', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('InterfaceMetric') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${InterfaceMetric})\n        $__cmdletization_queryBuilder.FilterByProperty('InterfaceMetric', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('NeighborUnreachabilityDetection') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${NeighborUnreachabilityDetection})\n        $__cmdletization_queryBuilder.FilterByProperty('NeighborUnreachabilityDetection', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('BaseReachableTimeMs') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${BaseReachableTimeMs})\n        $__cmdletization_queryBuilder.FilterByProperty('BaseReachableTime', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('ReachableTimeMs') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${ReachableTimeMs})\n        $__cmdletization_queryBuilder.FilterByProperty('ReachableTime', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('RetransmitTimeMs') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${RetransmitTimeMs})\n        $__cmdletization_queryBuilder.FilterByProperty('RetransmitTime', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DadTransmits') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DadTransmits})\n        $__cmdletization_queryBuilder.FilterByProperty('DadTransmits', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DadRetransmitTimeMs') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DadRetransmitTimeMs})\n        $__cmdletization_queryBuilder.FilterByProperty('DadRetransmitTime', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('RouterDiscovery') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${RouterDiscovery})\n        $__cmdletization_queryBuilder.FilterByProperty('RouterDiscovery', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('ManagedAddressConfiguration') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${ManagedAddressConfiguration})\n        $__cmdletization_queryBuilder.FilterByProperty('ManagedAddressConfiguration', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('OtherStatefulConfiguration') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${OtherStatefulConfiguration})\n        $__cmdletization_queryBuilder.FilterByProperty('OtherStatefulConfiguration', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('WeakHostSend') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${WeakHostSend})\n        $__cmdletization_queryBuilder.FilterByProperty('WeakHostSend', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('WeakHostReceive') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${WeakHostReceive})\n        $__cmdletization_queryBuilder.FilterByProperty('WeakHostReceive', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('IgnoreDefaultRoutes') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${IgnoreDefaultRoutes})\n        $__cmdletization_queryBuilder.FilterByProperty('IgnoreDefaultRoutes', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AdvertisedRouterLifetime') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${AdvertisedRouterLifetime})\n        $__cmdletization_queryBuilder.FilterByProperty('AdvertisedRouterLifetime', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AdvertiseDefaultRoute') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${AdvertiseDefaultRoute})\n        $__cmdletization_queryBuilder.FilterByProperty('AdvertiseDefaultRoute', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('CurrentHopLimit') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${CurrentHopLimit})\n        $__cmdletization_queryBuilder.FilterByProperty('CurrentHopLimit', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('ForceArpNdWolPattern') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${ForceArpNdWolPattern})\n        $__cmdletization_queryBuilder.FilterByProperty('ForceArpNdWolPattern', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DirectedMacWolPattern') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DirectedMacWolPattern})\n        $__cmdletization_queryBuilder.FilterByProperty('DirectedMacWolPattern', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('EcnMarking') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${EcnMarking})\n        $__cmdletization_queryBuilder.FilterByProperty('EcnMarking', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Dhcp') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Dhcp})\n        $__cmdletization_queryBuilder.FilterByProperty('Dhcp', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('ConnectionState') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${ConnectionState})\n        $__cmdletization_queryBuilder.FilterByProperty('ConnectionState', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AutomaticMetric') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${AutomaticMetric})\n        $__cmdletization_queryBuilder.FilterByProperty('AutomaticMetric', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('NeighborDiscoverySupported') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${NeighborDiscoverySupported})\n        $__cmdletization_queryBuilder.FilterByProperty('NeighborDiscoverySupported', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('CompartmentId') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${CompartmentId})\n        $__cmdletization_queryBuilder.FilterByProperty('CompartmentId', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedRoute') -and (@('ByRoute') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedRoute}, 'MSFT_NetIPInterfaceRoute', 'Dependent', 'Antecedent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedIPAddress') -and (@('ByIPAddress') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedIPAddress}, 'MSFT_NetIPInterfaceIPAddress', 'Dependent', 'Antecedent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNeighbor') -and (@('ByNeighbor') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNeighbor}, 'MSFT_NetIPInterfaceNeighbor', 'Dependent', 'Antecedent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedAdapter') -and (@('ByAdapter') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedAdapter}, 'MSFT_NetIPInterfaceAdapter', 'Dependent', 'Antecedent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})\n    }\n    if ($PSBoundParameters.ContainsKey('IncludeAllCompartments') -and (@('ByName', 'ByRoute', 'ByIPAddress', 'ByNeighbor', 'ByAdapter') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('IncludeAllCompartments', ${IncludeAllCompartments})\n    }\n\n\n    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP MSFT_NetIPInterface.cdxml-Help.xml\n}\n343fccb5-062c-4740-9717-83a3eaa64776",
    "_time": "2025-08-06T17:24:22.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:9821",
    "_indextime": "1754501062",
    "_serial": "88",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "186",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:24:22 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4104\nEventType=3\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Warning\nRecordNumber=433\nKeywords=None\nTaskCategory=Execute a Remote Command\nOpCode=On create calls\nMessage=Splunk could not get the description for this event. Either the component that raises this event is not installed on your local computer or the installation is corrupt.\n\nFormatMessage error:\n\nGot the following information from this event: \n\n\n#requires -version 3.0\n\ntry { Microsoft.PowerShell.Core\\Set-StrictMode -Off } catch { }\n\n$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module\n\n$script:ClassName = 'ROOT/StandardCimv2/MSFT_NetIPInterface'\n$script:ClassVersion = '1.0.0'\n$script:ModuleVersion = '1.0.0'\n$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]\n\n$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()\n\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function @()\n        \n\nfunction __cmdletization_BindCommonParameters\n{\n    param(\n        $__cmdletization_objectModelWrapper,\n        $myPSBoundParameters\n    )       \n                \n\n        if ($myPSBoundParameters.ContainsKey('CimSession')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('AsJob')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] \n        }\n                    \n\n}\n                \n\nfunction Get-NetIPInterface\n{\n    [CmdletBinding(DefaultParameterSetName='ByName', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/StandardCimv2/MSFT_NetIPInterface')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByName', ValueFromPipelineByPropertyName=$true)]\n    [Alias('ifIndex')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${InterfaceIndex},\n\n    [Parameter(ParameterSetName='ByName', Position=0, ValueFromPipelineByPropertyName=$true)]\n    [Alias('ifAlias')]\n    [ValidateNotNull()]\n    [string[]]\n    ${InterfaceAlias},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.AddressFamily[]]\n    ${AddressFamily},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.Forwarding[]]\n    ${Forwarding},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.ClampMss[]]\n    ${ClampMss},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.Advertising[]]\n    ${Advertising},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${NlMtuBytes},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${InterfaceMetric},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.NeighborUnreachabilityDetection[]]\n    ${NeighborUnreachabilityDetection},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Alias('BaseReachableTime')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${BaseReachableTimeMs},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Alias('ReachableTime')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${ReachableTimeMs},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Alias('RetransmitTime')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${RetransmitTimeMs},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${DadTransmits},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Alias('DadRetransmitTime')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${DadRetransmitTimeMs},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.RouterDiscovery[]]\n    ${RouterDiscovery},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.ManagedAddressConfiguration[]]\n    ${ManagedAddressConfiguration},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.OtherStatefulConfiguration[]]\n    ${OtherStatefulConfiguration},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.WeakHostSend[]]\n    ${WeakHostSend},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.WeakHostReceive[]]\n    ${WeakHostReceive},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.IgnoreDefaultRoutes[]]\n    ${IgnoreDefaultRoutes},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [timespan[]]\n    ${AdvertisedRouterLifetime},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.AdvertiseDefaultRoute[]]\n    ${AdvertiseDefaultRoute},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${CurrentHopLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.ForceArpNdWolPattern[]]\n    ${ForceArpNdWolPattern},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.DirectedMacWolPattern[]]\n    ${DirectedMacWolPattern},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.EcnMarking[]]\n    ${EcnMarking},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.Dhcp[]]\n    ${Dhcp},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.ConnectionState[]]\n    ${ConnectionState},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.AutomaticMetric[]]\n    ${AutomaticMetric},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.NeighborDiscoverySupported[]]\n    ${NeighborDiscoverySupported},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${CompartmentId},\n\n    [Parameter(ParameterSetName='ByRoute', ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetRoute')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedRoute},\n\n    [Parameter(ParameterSetName='ByIPAddress', ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIPAddress')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedIPAddress},\n\n    [Parameter(ParameterSetName='ByNeighbor', ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetNeighbor')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNeighbor},\n\n    [Parameter(ParameterSetName='ByAdapter', ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetAdapter')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedAdapter},\n\n    [Parameter(ParameterSetName='ByName')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByRoute')]\n    [Parameter(ParameterSetName='ByIPAddress')]\n    [Parameter(ParameterSetName='ByNeighbor')]\n    [Parameter(ParameterSetName='ByAdapter')]\n    [switch]\n    ${IncludeAllCompartments},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByRoute')]\n    [Parameter(ParameterSetName='ByIPAddress')]\n    [Parameter(ParameterSetName='ByNeighbor')]\n    [Parameter(ParameterSetName='ByAdapter')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByRoute')]\n    [Parameter(ParameterSetName='ByIPAddress')]\n    [Parameter(ParameterSetName='ByNeighbor')]\n    [Parameter(ParameterSetName='ByAdapter')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByRoute')]\n    [Parameter(ParameterSetName='ByIPAddress')]\n    [Parameter(ParameterSetName='ByNeighbor')]\n    [Parameter(ParameterSetName='ByAdapter')]\n    [switch]\n    ${AsJob})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('InterfaceIndex') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${InterfaceIndex})\n        $__cmdletization_queryBuilder.FilterByProperty('InterfaceIndex', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('InterfaceAlias') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${InterfaceAlias})\n        $__cmdletization_queryBuilder.FilterByProperty('InterfaceAlias\n343fccb5-062c-4740-9717-83a3eaa64776",
    "_time": "2025-08-06T17:24:22.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:9451",
    "_indextime": "1754501062",
    "_serial": "89",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "345",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:24:21 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=432\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Remove-NetIPAddress\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 3d722da8-4c22-4035-ae86-da8b8d39bbd9\n        Host Application = powershell.exe -Command Get-NetIPAddress\n        Engine Version = 5.1.20348.3932\n        Runspace ID = a126cfe4-e1d1-496d-9c5a-1ee8bf7f15cd\n        Pipeline ID = 20\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 36\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:24:21.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:9410",
    "_indextime": "1754501062",
    "_serial": "90",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "39",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:24:21 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=431\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Set-NetIPAddress\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 3d722da8-4c22-4035-ae86-da8b8d39bbd9\n        Host Application = powershell.exe -Command Get-NetIPAddress\n        Engine Version = 5.1.20348.3932\n        Runspace ID = a126cfe4-e1d1-496d-9c5a-1ee8bf7f15cd\n        Pipeline ID = 20\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 34\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:24:21.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:9369",
    "_indextime": "1754501062",
    "_serial": "91",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "39",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:24:21 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=430\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Get-NetIPAddress\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 3d722da8-4c22-4035-ae86-da8b8d39bbd9\n        Host Application = powershell.exe -Command Get-NetIPAddress\n        Engine Version = 5.1.20348.3932\n        Runspace ID = a126cfe4-e1d1-496d-9c5a-1ee8bf7f15cd\n        Pipeline ID = 20\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 32\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:24:21.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:9328",
    "_indextime": "1754501062",
    "_serial": "92",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "39",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:24:21 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=429\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"New-NetIPAddress\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 3d722da8-4c22-4035-ae86-da8b8d39bbd9\n        Host Application = powershell.exe -Command Get-NetIPAddress\n        Engine Version = 5.1.20348.3932\n        Runspace ID = a126cfe4-e1d1-496d-9c5a-1ee8bf7f15cd\n        Pipeline ID = 20\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 30\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:24:21.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:9287",
    "_indextime": "1754501062",
    "_serial": "93",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "39",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:24:21 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=428\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 3d722da8-4c22-4035-ae86-da8b8d39bbd9\n        Host Application = powershell.exe -Command Get-NetIPAddress\n        Engine Version = 5.1.20348.3932\n        Runspace ID = a126cfe4-e1d1-496d-9c5a-1ee8bf7f15cd\n        Pipeline ID = 20\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 28\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:24:21.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:9249",
    "_indextime": "1754501062",
    "_serial": "94",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "38",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:24:21 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=427\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Set-StrictMode): \"Set-StrictMode\"\nParameterBinding(Set-StrictMode): name=\"Off\"; value=\"True\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 3d722da8-4c22-4035-ae86-da8b8d39bbd9\n        Host Application = powershell.exe -Command Get-NetIPAddress\n        Engine Version = 5.1.20348.3932\n        Runspace ID = a126cfe4-e1d1-496d-9c5a-1ee8bf7f15cd\n        Pipeline ID = 20\n        Command Name = Set-StrictMode\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 26\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:24:21.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:9211",
    "_indextime": "1754501062",
    "_serial": "95",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "38",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:24:21 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4104\nEventType=3\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Warning\nRecordNumber=426\nKeywords=None\nTaskCategory=Execute a Remote Command\nOpCode=On create calls\nMessage=Splunk could not get the description for this event. Either the component that raises this event is not installed on your local computer or the installation is corrupt.\n\nFormatMessage error:\n\nGot the following information from this event: \n\n${AddressState},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [ValidateNotNull()]\n    [timespan[]]\n    ${ValidLifetime},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [ValidateNotNull()]\n    [timespan[]]\n    ${PreferredLifetime},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [ValidateNotNull()]\n    [bool[]]\n    ${SkipAsSource},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [string]\n    ${DefaultGateway},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [switch]\n    ${IncludeAllCompartments},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetIPAddress')]\n    [ValidateNotNull()]\n    [ciminstance[]]\n    ${InputObject},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${AsJob},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${PassThru})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('IPAddress') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${IPAddress})\n        $__cmdletization_queryBuilder.FilterByProperty('IPAddress', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('InterfaceIndex') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${InterfaceIndex})\n        $__cmdletization_queryBuilder.FilterByProperty('InterfaceIndex', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('InterfaceAlias') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${InterfaceAlias})\n        $__cmdletization_queryBuilder.FilterByProperty('InterfaceAlias', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AddressFamily') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${AddressFamily})\n        $__cmdletization_queryBuilder.FilterByProperty('AddressFamily', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Type') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Type})\n        $__cmdletization_queryBuilder.FilterByProperty('Type', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PrefixLength') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PrefixLength})\n        $__cmdletization_queryBuilder.FilterByProperty('PrefixLength', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PrefixOrigin') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PrefixOrigin})\n        $__cmdletization_queryBuilder.FilterByProperty('PrefixOrigin', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('SuffixOrigin') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${SuffixOrigin})\n        $__cmdletization_queryBuilder.FilterByProperty('SuffixOrigin', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AddressState') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${AddressState})\n        $__cmdletization_queryBuilder.FilterByProperty('AddressState', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('ValidLifetime') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${ValidLifetime})\n        $__cmdletization_queryBuilder.FilterByProperty('ValidLifetime', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PreferredLifetime') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PreferredLifetime})\n        $__cmdletization_queryBuilder.FilterByProperty('PreferredLifetime', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('SkipAsSource') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${SkipAsSource})\n        $__cmdletization_queryBuilder.FilterByProperty('SkipAsSource', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})\n    }\n    if ($PSBoundParameters.ContainsKey('DefaultGateway') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('DefaultGateway', ${DefaultGateway})\n    }\n    if ($PSBoundParameters.ContainsKey('IncludeAllCompartments') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('IncludeAllCompartments', ${IncludeAllCompartments})\n    }\n\n\n    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n    switch -exact ($PSCmdlet.ParameterSetName) { \n        { @('Query (cdxml)', 'InputObject (cdxml)') -contains $_ } {\n      $__cmdletization_returnValue = $null\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:DeleteInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru\n            if ($PSBoundParameters.ContainsKey('InputObject')) {\n                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }\n            } else {\n                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)\n            }\n        }\n    }\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP MSFT_NetIPAddress.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Remove-NetIPAddress' -Alias '*'\n        \n\nff521d0c-1fd0-48cc-b159-dadf97dd9ef8",
    "_time": "2025-08-06T17:24:21.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:8912",
    "_indextime": "1754501062",
    "_serial": "96",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "222",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:24:21 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4104\nEventType=3\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Warning\nRecordNumber=425\nKeywords=None\nTaskCategory=Execute a Remote Command\nOpCode=On create calls\nMessage=Splunk could not get the description for this event. Either the component that raises this event is not installed on your local computer or the installation is corrupt.\n\nFormatMessage error:\n\nGot the following information from this event: \n\ntization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('IPAddress') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${IPAddress})\n        $__cmdletization_queryBuilder.FilterByProperty('IPAddress', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('InterfaceIndex') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${InterfaceIndex})\n        $__cmdletization_queryBuilder.FilterByProperty('InterfaceIndex', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('InterfaceAlias') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${InterfaceAlias})\n        $__cmdletization_queryBuilder.FilterByProperty('InterfaceAlias', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AddressFamily') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${AddressFamily})\n        $__cmdletization_queryBuilder.FilterByProperty('AddressFamily', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Type') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Type})\n        $__cmdletization_queryBuilder.FilterByProperty('Type', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PrefixOrigin') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PrefixOrigin})\n        $__cmdletization_queryBuilder.FilterByProperty('PrefixOrigin', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('SuffixOrigin') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${SuffixOrigin})\n        $__cmdletization_queryBuilder.FilterByProperty('SuffixOrigin', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AddressState') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${AddressState})\n        $__cmdletization_queryBuilder.FilterByProperty('AddressState', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})\n    }\n    if ($PSBoundParameters.ContainsKey('IncludeAllCompartments') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('IncludeAllCompartments', ${IncludeAllCompartments})\n    }\n\n\n    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n    switch -exact ($PSCmdlet.ParameterSetName) { \n        { @('Query (cdxml)', 'InputObject (cdxml)') -contains $_ } {\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('PrefixLength')) {\n            [object]$__cmdletization_value = ${PrefixLength}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PrefixLength'; ParameterType = 'System.Byte'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PrefixLength'; ParameterType = 'System.Byte'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('ValidLifetime')) {\n            [object]$__cmdletization_value = ${ValidLifetime}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ValidLifetime'; ParameterType = 'System.TimeSpan'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ValidLifetime'; ParameterType = 'System.TimeSpan'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('PreferredLifetime')) {\n            [object]$__cmdletization_value = ${PreferredLifetime}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PreferredLifetime'; ParameterType = 'System.TimeSpan'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PreferredLifetime'; ParameterType = 'System.TimeSpan'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('SkipAsSource')) {\n            [object]$__cmdletization_value = ${SkipAsSource}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SkipAsSource'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SkipAsSource'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n      $__cmdletization_returnValue = $null\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:ModifyInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru\n            if ($PSBoundParameters.ContainsKey('InputObject')) {\n                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }\n            } else {\n                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)\n            }\n        }\n    }\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP MSFT_NetIPAddress.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Set-NetIPAddress' -Alias '*'\n        \n\nfunction Remove-NetIPAddress\n{\n    [CmdletBinding(DefaultParameterSetName='Query (cdxml)', SupportsShouldProcess=$true, ConfirmImpact='High', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/StandardCimv2/MSFT_NetIPAddress')]\n\n    param(\n    \n    [Parameter(ParameterSetName='Query (cdxml)', Position=0, ValueFromPipelineByPropertyName=$true)]\n    [Alias('LocalAddress')]\n    [ValidateNotNull()]\n    [string[]]\n    ${IPAddress},\n\n    [Parameter(ParameterSetName='Query (cdxml)', ValueFromPipelineByPropertyName=$true)]\n    [Alias('ifIndex')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${InterfaceIndex},\n\n    [Parameter(ParameterSetName='Query (cdxml)', ValueFromPipelineByPropertyName=$true)]\n    [Alias('ifAlias')]\n    [ValidateNotNull()]\n    [string[]]\n    ${InterfaceAlias},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPAddress.AddressFamily[]]\n    ${AddressFamily},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPAddress.Type[]]\n    ${Type},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [ValidateNotNull()]\n    [byte[]]\n    ${PrefixLength},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPAddress.PrefixOrigin[]]\n    ${PrefixOrigin},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPAddress.SuffixOrigin[]]\n    ${SuffixOrigin},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPAddress.AddressState[]]\n    \nff521d0c-1fd0-48cc-b159-dadf97dd9ef8",
    "_time": "2025-08-06T17:24:21.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:8576",
    "_indextime": "1754501062",
    "_serial": "97",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "203",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:24:21 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4104\nEventType=3\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Warning\nRecordNumber=424\nKeywords=None\nTaskCategory=Execute a Remote Command\nOpCode=On create calls\nMessage=Splunk could not get the description for this event. Either the component that raises this event is not installed on your local computer or the installation is corrupt.\n\nFormatMessage error:\n\nGot the following information from this event: \n\n\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('IPAddress') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${IPAddress})\n        $__cmdletization_queryBuilder.FilterByProperty('IPAddress', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('InterfaceIndex') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${InterfaceIndex})\n        $__cmdletization_queryBuilder.FilterByProperty('InterfaceIndex', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('InterfaceAlias') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${InterfaceAlias})\n        $__cmdletization_queryBuilder.FilterByProperty('InterfaceAlias', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AddressFamily') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${AddressFamily})\n        $__cmdletization_queryBuilder.FilterByProperty('AddressFamily', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Type') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Type})\n        $__cmdletization_queryBuilder.FilterByProperty('Type', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PrefixLength') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PrefixLength})\n        $__cmdletization_queryBuilder.FilterByProperty('PrefixLength', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PrefixOrigin') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PrefixOrigin})\n        $__cmdletization_queryBuilder.FilterByProperty('PrefixOrigin', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('SuffixOrigin') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${SuffixOrigin})\n        $__cmdletization_queryBuilder.FilterByProperty('SuffixOrigin', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AddressState') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${AddressState})\n        $__cmdletization_queryBuilder.FilterByProperty('AddressState', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('ValidLifetime') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${ValidLifetime})\n        $__cmdletization_queryBuilder.FilterByProperty('ValidLifetime', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PreferredLifetime') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PreferredLifetime})\n        $__cmdletization_queryBuilder.FilterByProperty('PreferredLifetime', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('SkipAsSource') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${SkipAsSource})\n        $__cmdletization_queryBuilder.FilterByProperty('SkipAsSource', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedIPInterface') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedIPInterface}, 'MSFT_NetIPInterfaceIPAddress', 'Antecedent', 'Dependent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})\n    }\n    if ($PSBoundParameters.ContainsKey('IncludeAllCompartments') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('IncludeAllCompartments', ${IncludeAllCompartments})\n    }\n\n\n    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP MSFT_NetIPAddress.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Get-NetIPAddress' -Alias '*'\n        \n\nfunction Set-NetIPAddress\n{\n    [CmdletBinding(DefaultParameterSetName='Query (cdxml)', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/StandardCimv2/MSFT_NetIPAddress')]\n\n    param(\n    \n    [Parameter(ParameterSetName='Query (cdxml)', Position=0, ValueFromPipelineByPropertyName=$true)]\n    [Alias('LocalAddress')]\n    [ValidateNotNull()]\n    [string[]]\n    ${IPAddress},\n\n    [Parameter(ParameterSetName='Query (cdxml)', ValueFromPipelineByPropertyName=$true)]\n    [Alias('ifIndex')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${InterfaceIndex},\n\n    [Parameter(ParameterSetName='Query (cdxml)', ValueFromPipelineByPropertyName=$true)]\n    [Alias('ifAlias')]\n    [ValidateNotNull()]\n    [string[]]\n    ${InterfaceAlias},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPAddress.AddressFamily[]]\n    ${AddressFamily},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPAddress.Type[]]\n    ${Type},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPAddress.PrefixOrigin[]]\n    ${PrefixOrigin},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPAddress.SuffixOrigin[]]\n    ${SuffixOrigin},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPAddress.AddressState[]]\n    ${AddressState},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [switch]\n    ${IncludeAllCompartments},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetIPAddress')]\n    [ValidateNotNull()]\n    [ciminstance[]]\n    ${InputObject},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [byte]\n    ${PrefixLength},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [timespan]\n    ${ValidLifetime},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [timespan]\n    ${PreferredLifetime},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [bool]\n    ${SkipAsSource},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${AsJob},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${PassThru})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdle\nff521d0c-1fd0-48cc-b159-dadf97dd9ef8",
    "_time": "2025-08-06T17:24:21.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:8240",
    "_indextime": "1754501062",
    "_serial": "98",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "269",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:24:21 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4104\nEventType=3\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Warning\nRecordNumber=423\nKeywords=None\nTaskCategory=Execute a Remote Command\nOpCode=On create calls\nMessage=Splunk could not get the description for this event. Either the component that raises this event is not installed on your local computer or the installation is corrupt.\n\nFormatMessage error:\n\nGot the following information from this event: \n\nl\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('PrefixLength')) {\n          [object]$__cmdletization_value = ${PrefixLength}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PrefixLength'; ParameterType = 'System.Byte'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PrefixLength'; ParameterType = 'System.Byte'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('ValidLifetime')) {\n          [object]$__cmdletization_value = ${ValidLifetime}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ValidLifetime'; ParameterType = 'System.TimeSpan'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ValidLifetime'; ParameterType = 'System.TimeSpan'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('PreferredLifetime')) {\n          [object]$__cmdletization_value = ${PreferredLifetime}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PreferredLifetime'; ParameterType = 'System.TimeSpan'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PreferredLifetime'; ParameterType = 'System.TimeSpan'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('SkipAsSource')) {\n          [object]$__cmdletization_value = ${SkipAsSource}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SkipAsSource'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SkipAsSource'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('PolicyStore')) {\n          [object]$__cmdletization_value = ${PolicyStore}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'CmdletOutput'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'Out'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.UInt32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Create', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo)\n        }\n    }\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP MSFT_NetIPAddress.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'New-NetIPAddress' -Alias '*'\n        \n\nfunction Get-NetIPAddress\n{\n    [CmdletBinding(DefaultParameterSetName='Query (cdxml)', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/StandardCimv2/MSFT_NetIPAddress')]\n\n    param(\n    \n    [Parameter(ParameterSetName='Query (cdxml)', Position=0, ValueFromPipelineByPropertyName=$true)]\n    [Alias('LocalAddress')]\n    [ValidateNotNull()]\n    [string[]]\n    ${IPAddress},\n\n    [Parameter(ParameterSetName='Query (cdxml)', ValueFromPipelineByPropertyName=$true)]\n    [Alias('ifIndex')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${InterfaceIndex},\n\n    [Parameter(ParameterSetName='Query (cdxml)', ValueFromPipelineByPropertyName=$true)]\n    [Alias('ifAlias')]\n    [ValidateNotNull()]\n    [string[]]\n    ${InterfaceAlias},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPAddress.AddressFamily[]]\n    ${AddressFamily},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPAddress.Type[]]\n    ${Type},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [ValidateNotNull()]\n    [byte[]]\n    ${PrefixLength},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPAddress.PrefixOrigin[]]\n    ${PrefixOrigin},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPAddress.SuffixOrigin[]]\n    ${SuffixOrigin},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPAddress.AddressState[]]\n    ${AddressState},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [ValidateNotNull()]\n    [timespan[]]\n    ${ValidLifetime},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [ValidateNotNull()]\n    [timespan[]]\n    ${PreferredLifetime},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [ValidateNotNull()]\n    [bool[]]\n    ${SkipAsSource},\n\n    [Parameter(ParameterSetName='Query (cdxml)', ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIPInterface')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedIPInterface},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [switch]\n    ${IncludeAllCompartments},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [switch]\n    ${AsJob})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\nff521d0c-1fd0-48cc-b159-dadf97dd9ef8",
    "_time": "2025-08-06T17:24:21.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:7904",
    "_indextime": "1754501062",
    "_serial": "99",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "243",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:24:44 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4104\nEventType=5\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Verbose\nRecordNumber=633\nKeywords=None\nTaskCategory=Execute a Remote Command\nOpCode=On create calls\nMessage=Creating Scriptblock text (1 of 1):\n$global:?\n\nScriptBlock ID: d51f5d39-2d14-4e61-86bb-20cfeb6ea98b\nPath:",
    "_time": "2025-08-06T17:24:44.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:40906",
    "_indextime": "1754501084",
    "_serial": "0",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "19",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:24:44 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=632\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Out-Default): \"Out-Default\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"MSFT_NetRoute (InstanceID = \"???8???8???8???9??55@55:8:8:8:55;\")\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"MSFT_NetRoute (InstanceID = \"???8???8???8???9??55;55:8:8:8:55;\")\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"MSFT_NetRoute (InstanceID = \"???8:8:8:9?55@55:8:8:8:55;\")\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"MSFT_NetRoute (InstanceID = \"???8:8:8:9?55;55:8:8:8:55;\")\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"MSFT_NetRoute (InstanceID = \";@C8???8;@C8???9??55@55;:8:8:8;55;\")\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"MSFT_NetRoute (InstanceID = \";@B8@?8;?C8;@9??55@55;:8:8:8;55;\")\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"MSFT_NetRoute (InstanceID = \";?A8???8???8???9??55;55:8:8:8:55;\")\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"MSFT_NetRoute (InstanceID = \";?A8:8:8;9??55;55:8:8:8:55;\")\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"MSFT_NetRoute (InstanceID = \";?A8:8:8:9B55;55:8:8:8:55;\")\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"MSFT_NetRoute (InstanceID = \";:8:8:8???9??55@55:8:8:8:55;\")\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"MSFT_NetRoute (InstanceID = \";:8:8:8?9??55@55:8:8:8:55;\")\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"MSFT_NetRoute (InstanceID = \";:8:8:8:9??55@55:8:8:8:55;\")\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"MSFT_NetRoute (InstanceID = \":8:8:8:9:55@55;:8:8:8;55;\")\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"MSFT_NetRoute (InstanceID = \"pp::DD9B55@55DD55;\")\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"MSFT_NetRoute (InstanceID = \"pp::DD9B55;55DD55;\")\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"MSFT_NetRoute (InstanceID = \"poB:DD;l:oD?A?DBlm?D?@B?9;?B55@55DD55;\")\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"MSFT_NetRoute (InstanceID = \"poB:DD9@?55@55DD55;\")\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"MSFT_NetRoute (InstanceID = \"DD;9;?B55;55DD55;\")\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 49676010-e625-42cf-8e30-283ec0bb3b53\n        Host Application = powershell.exe -Command Get-NetRoute\n        Engine Version = 5.1.20348.3932\n        Runspace ID = 732a0e6b-7e97-4496-9632-404c49335999\n        Pipeline ID = 1\n        Command Name = \n        Command Type = Script\n        Script Name = \n        Command Path = \n        Sequence Number = 150\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:24:44.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:40804",
    "_indextime": "1754501084",
    "_serial": "1",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "55",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:24:44 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=631\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Get-NetRoute): \"Get-NetRoute\"\nParameterBinding(Get-NetRoute): name=\"PolicyStore\"; value=\"\"\nParameterBinding(Get-NetRoute): name=\"IncludeAllCompartments\"; value=\"False\"\nParameterBinding(Get-NetRoute): name=\"ThrottleLimit\"; value=\"0\"\nParameterBinding(Get-NetRoute): name=\"AsJob\"; value=\"False\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 49676010-e625-42cf-8e30-283ec0bb3b53\n        Host Application = powershell.exe -Command Get-NetRoute\n        Engine Version = 5.1.20348.3932\n        Runspace ID = 732a0e6b-7e97-4496-9632-404c49335999\n        Pipeline ID = 1\n        Command Name = Get-NetRoute\n        Command Type = Function\n        Script Name = \n        Command Path = \n        Sequence Number = 148\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:24:44.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:40760",
    "_indextime": "1754501084",
    "_serial": "2",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "41",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:24:44 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4104\nEventType=5\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Verbose\nRecordNumber=630\nKeywords=None\nTaskCategory=Execute a Remote Command\nOpCode=On create calls\nMessage=Creating Scriptblock text (1 of 1):\nfunction __cmdletization_BindCommonParameters\n{\n    param(\n        $__cmdletization_objectModelWrapper,\n        $myPSBoundParameters\n    )       \n                \n\n        if ($myPSBoundParameters.ContainsKey('CimSession')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('AsJob')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] \n        }\n                    \n\n}\n\nScriptBlock ID: 3d86f19d-5df0-4cd7-8586-519f12d4e513\nPath:",
    "_time": "2025-08-06T17:24:44.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:40717",
    "_indextime": "1754501084",
    "_serial": "3",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "42",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:24:43 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=629\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"TNC\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Test-NetConnection\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 49676010-e625-42cf-8e30-283ec0bb3b53\n        Host Application = powershell.exe -Command Get-NetRoute\n        Engine Version = 5.1.20348.3932\n        Runspace ID = 732a0e6b-7e97-4496-9632-404c49335999\n        Pipeline ID = 20\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = C:\\Windows\\system32\\WindowsPowerShell\\v1.0\\Modules\\NetTCPIP\\Test-NetConnection.psm1\n        Command Path = \n        Sequence Number = 146\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:24:43.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:40673",
    "_indextime": "1754501084",
    "_serial": "4",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "39",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:24:43 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=628\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(New-Alias): \"New-Alias\"\nParameterBinding(New-Alias): name=\"Name\"; value=\"TNC\"\nParameterBinding(New-Alias): name=\"Value\"; value=\"Test-NetConnection\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 49676010-e625-42cf-8e30-283ec0bb3b53\n        Host Application = powershell.exe -Command Get-NetRoute\n        Engine Version = 5.1.20348.3932\n        Runspace ID = 732a0e6b-7e97-4496-9632-404c49335999\n        Pipeline ID = 20\n        Command Name = New-Alias\n        Command Type = Cmdlet\n        Script Name = C:\\Windows\\system32\\WindowsPowerShell\\v1.0\\Modules\\NetTCPIP\\Test-NetConnection.psm1\n        Command Path = \n        Sequence Number = 144\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:24:43.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:40631",
    "_indextime": "1754501084",
    "_serial": "5",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "39",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:24:43 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=627\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"gip\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Get-NetIPConfiguration\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 49676010-e625-42cf-8e30-283ec0bb3b53\n        Host Application = powershell.exe -Command Get-NetRoute\n        Engine Version = 5.1.20348.3932\n        Runspace ID = 732a0e6b-7e97-4496-9632-404c49335999\n        Pipeline ID = 20\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = C:\\Windows\\system32\\WindowsPowerShell\\v1.0\\Modules\\NetTCPIP\\NetIPConfiguration.psm1\n        Command Path = \n        Sequence Number = 142\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:24:43.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:40587",
    "_indextime": "1754501084",
    "_serial": "6",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "39",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:24:43 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=626\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(New-Alias): \"New-Alias\"\nParameterBinding(New-Alias): name=\"Name\"; value=\"gip\"\nParameterBinding(New-Alias): name=\"Value\"; value=\"Get-NetIPConfiguration\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 49676010-e625-42cf-8e30-283ec0bb3b53\n        Host Application = powershell.exe -Command Get-NetRoute\n        Engine Version = 5.1.20348.3932\n        Runspace ID = 732a0e6b-7e97-4496-9632-404c49335999\n        Pipeline ID = 20\n        Command Name = New-Alias\n        Command Type = Cmdlet\n        Script Name = C:\\Windows\\system32\\WindowsPowerShell\\v1.0\\Modules\\NetTCPIP\\NetIPConfiguration.psm1\n        Command Path = \n        Sequence Number = 140\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:24:43.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:40545",
    "_indextime": "1754501084",
    "_serial": "7",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "39",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:24:43 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=625\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Set-NetUDPSetting\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 49676010-e625-42cf-8e30-283ec0bb3b53\n        Host Application = powershell.exe -Command Get-NetRoute\n        Engine Version = 5.1.20348.3932\n        Runspace ID = 732a0e6b-7e97-4496-9632-404c49335999\n        Pipeline ID = 20\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 138\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:24:43.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:40504",
    "_indextime": "1754501084",
    "_serial": "8",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "39",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:24:43 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=624\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Get-NetUDPSetting\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 49676010-e625-42cf-8e30-283ec0bb3b53\n        Host Application = powershell.exe -Command Get-NetRoute\n        Engine Version = 5.1.20348.3932\n        Runspace ID = 732a0e6b-7e97-4496-9632-404c49335999\n        Pipeline ID = 20\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 136\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:24:43.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:40463",
    "_indextime": "1754501084",
    "_serial": "9",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "39",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:24:43 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=623\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 49676010-e625-42cf-8e30-283ec0bb3b53\n        Host Application = powershell.exe -Command Get-NetRoute\n        Engine Version = 5.1.20348.3932\n        Runspace ID = 732a0e6b-7e97-4496-9632-404c49335999\n        Pipeline ID = 20\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 134\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:24:43.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:40425",
    "_indextime": "1754501084",
    "_serial": "10",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "38",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:24:43 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=622\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Set-StrictMode): \"Set-StrictMode\"\nParameterBinding(Set-StrictMode): name=\"Off\"; value=\"True\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 49676010-e625-42cf-8e30-283ec0bb3b53\n        Host Application = powershell.exe -Command Get-NetRoute\n        Engine Version = 5.1.20348.3932\n        Runspace ID = 732a0e6b-7e97-4496-9632-404c49335999\n        Pipeline ID = 20\n        Command Name = Set-StrictMode\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 132\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:24:43.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:40387",
    "_indextime": "1754501084",
    "_serial": "11",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "38",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:24:43 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4104\nEventType=3\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Warning\nRecordNumber=621\nKeywords=None\nTaskCategory=Execute a Remote Command\nOpCode=On create calls\nMessage=Splunk could not get the description for this event. Either the component that raises this event is not installed on your local computer or the installation is corrupt.\n\nFormatMessage error:\n\nGot the following information from this event: \n\n\n#requires -version 3.0\n\ntry { Microsoft.PowerShell.Core\\Set-StrictMode -Off } catch { }\n\n$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module\n\n$script:ClassName = 'ROOT/StandardCimv2/MSFT_NetUDPSetting'\n$script:ClassVersion = '1.0.0'\n$script:ModuleVersion = '1.0.0'\n$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]\n\n$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()\n\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function @()\n        \n\nfunction __cmdletization_BindCommonParameters\n{\n    param(\n        $__cmdletization_objectModelWrapper,\n        $myPSBoundParameters\n    )       \n                \n\n        if ($myPSBoundParameters.ContainsKey('CimSession')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('AsJob')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] \n        }\n                    \n\n}\n                \n\nfunction Get-NetUDPSetting\n{\n    [CmdletBinding(DefaultParameterSetName='ByName', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/StandardCimv2/MSFT_NetUDPSetting')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByName', Position=0)]\n    [ValidateNotNull()]\n    [uint16[]]\n    ${DynamicPortRangeStartPort},\n\n    [Parameter(ParameterSetName='ByName', Position=1)]\n    [ValidateNotNull()]\n    [uint16[]]\n    ${DynamicPortRangeNumberOfPorts},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [switch]\n    ${AsJob})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('DynamicPortRangeStartPort') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DynamicPortRangeStartPort})\n        $__cmdletization_queryBuilder.FilterByProperty('DynamicPortRangeStartPort', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DynamicPortRangeNumberOfPorts') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DynamicPortRangeNumberOfPorts})\n        $__cmdletization_queryBuilder.FilterByProperty('DynamicPortRangeNumberOfPorts', $__cmdletization_values, $false, 'Default')\n    }\n\n\n    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP MSFT_NetUDPSetting.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Get-NetUDPSetting' -Alias '*'\n        \n\nfunction Set-NetUDPSetting\n{\n    [CmdletBinding(DefaultParameterSetName='InputObject (cdxml)', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/StandardCimv2/MSFT_NetUDPSetting')]\n\n    param(\n    \n    [Parameter(ParameterSetName='InputObject (cdxml)', ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetUDPSetting')]\n    [ValidateNotNull()]\n    [ciminstance[]]\n    ${InputObject},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [uint16]\n    ${DynamicPortRangeStartPort},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [uint16]\n    ${DynamicPortRangeNumberOfPorts},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${AsJob},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${PassThru})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n\n\n    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n    switch -exact ($PSCmdlet.ParameterSetName) { \n        { @('InputObject (cdxml)') -contains $_ } {\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('DynamicPortRangeStartPort')) {\n            [object]$__cmdletization_value = ${DynamicPortRangeStartPort}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DynamicPortRangeStartPort'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DynamicPortRangeStartPort'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('DynamicPortRangeNumberOfPorts')) {\n            [object]$__cmdletization_value = ${DynamicPortRangeNumberOfPorts}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DynamicPortRangeNumberOfPorts'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DynamicPortRangeNumberOfPorts'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n      $__cmdletization_returnValue = $null\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:ModifyInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru\n            if ($PSBoundParameters.ContainsKey('InputObject')) {\n                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }\n            } else {\n                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)\n            }\n        }\n    }\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP MSFT_NetUDPSetting.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Set-NetUDPSetting' -Alias '*'\n        \n\nf8359e85-a5da-4ed6-8a08-d49047eb81c8",
    "_time": "2025-08-06T17:24:43.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:40014",
    "_indextime": "1754501084",
    "_serial": "12",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "327",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:24:43 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=620\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Get-NetUDPEndpoint\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 49676010-e625-42cf-8e30-283ec0bb3b53\n        Host Application = powershell.exe -Command Get-NetRoute\n        Engine Version = 5.1.20348.3932\n        Runspace ID = 732a0e6b-7e97-4496-9632-404c49335999\n        Pipeline ID = 20\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 130\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:24:43.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:39973",
    "_indextime": "1754501084",
    "_serial": "13",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "39",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:24:43 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=619\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 49676010-e625-42cf-8e30-283ec0bb3b53\n        Host Application = powershell.exe -Command Get-NetRoute\n        Engine Version = 5.1.20348.3932\n        Runspace ID = 732a0e6b-7e97-4496-9632-404c49335999\n        Pipeline ID = 20\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 128\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:24:43.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:39935",
    "_indextime": "1754501084",
    "_serial": "14",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "38",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:24:43 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=618\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Set-StrictMode): \"Set-StrictMode\"\nParameterBinding(Set-StrictMode): name=\"Off\"; value=\"True\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 49676010-e625-42cf-8e30-283ec0bb3b53\n        Host Application = powershell.exe -Command Get-NetRoute\n        Engine Version = 5.1.20348.3932\n        Runspace ID = 732a0e6b-7e97-4496-9632-404c49335999\n        Pipeline ID = 20\n        Command Name = Set-StrictMode\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 126\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:24:43.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:39897",
    "_indextime": "1754501084",
    "_serial": "15",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "38",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:24:43 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4104\nEventType=3\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Warning\nRecordNumber=617\nKeywords=None\nTaskCategory=Execute a Remote Command\nOpCode=On create calls\nMessage=Creating Scriptblock text (1 of 1):\n\n#requires -version 3.0\n\ntry { Microsoft.PowerShell.Core\\Set-StrictMode -Off } catch { }\n\n$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module\n\n$script:ClassName = 'ROOT/StandardCimv2/MSFT_NetUDPEndpoint'\n$script:ClassVersion = '1.0.0'\n$script:ModuleVersion = '1.0.0'\n$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]\n\n$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()\n\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function @()\n        \n\nfunction __cmdletization_BindCommonParameters\n{\n    param(\n        $__cmdletization_objectModelWrapper,\n        $myPSBoundParameters\n    )       \n                \n\n        if ($myPSBoundParameters.ContainsKey('CimSession')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('AsJob')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] \n        }\n                    \n\n}\n                \n\nfunction Get-NetUDPEndpoint\n{\n    [CmdletBinding(DefaultParameterSetName='ByName', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/StandardCimv2/MSFT_NetUDPEndpoint')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByName', Position=0, ValueFromPipelineByPropertyName=$true)]\n    [Alias('IPAddress')]\n    [ValidateNotNull()]\n    [string[]]\n    ${LocalAddress},\n\n    [Parameter(ParameterSetName='ByName', Position=1)]\n    [ValidateNotNull()]\n    [uint16[]]\n    ${LocalPort},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${OwningProcess},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [datetime[]]\n    ${CreationTime},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [switch]\n    ${AsJob})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('LocalAddress') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${LocalAddress})\n        $__cmdletization_queryBuilder.FilterByProperty('LocalAddress', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('LocalPort') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${LocalPort})\n        $__cmdletization_queryBuilder.FilterByProperty('LocalPort', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('OwningProcess') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${OwningProcess})\n        $__cmdletization_queryBuilder.FilterByProperty('OwningProcess', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('CreationTime') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${CreationTime})\n        $__cmdletization_queryBuilder.FilterByProperty('CreationTime', $__cmdletization_values, $false, 'Default')\n    }\n\n\n    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP MSFT_NetUDPEndpoint.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Get-NetUDPEndpoint' -Alias '*'\n        \n\n\nScriptBlock ID: 6ff73a81-c5fd-4fcd-b2a3-d3d95ef3d20b\nPath:",
    "_time": "2025-08-06T17:24:43.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:39699",
    "_indextime": "1754501084",
    "_serial": "16",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "195",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:24:43 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=616\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Remove-NetTransportFilter\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 49676010-e625-42cf-8e30-283ec0bb3b53\n        Host Application = powershell.exe -Command Get-NetRoute\n        Engine Version = 5.1.20348.3932\n        Runspace ID = 732a0e6b-7e97-4496-9632-404c49335999\n        Pipeline ID = 20\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 124\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:24:43.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:39658",
    "_indextime": "1754501083",
    "_serial": "17",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "39",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:24:43 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=615\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Get-NetTransportFilter\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 49676010-e625-42cf-8e30-283ec0bb3b53\n        Host Application = powershell.exe -Command Get-NetRoute\n        Engine Version = 5.1.20348.3932\n        Runspace ID = 732a0e6b-7e97-4496-9632-404c49335999\n        Pipeline ID = 20\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 122\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:24:43.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:39617",
    "_indextime": "1754501083",
    "_serial": "18",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "39",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:24:43 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=614\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"New-NetTransportFilter\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 49676010-e625-42cf-8e30-283ec0bb3b53\n        Host Application = powershell.exe -Command Get-NetRoute\n        Engine Version = 5.1.20348.3932\n        Runspace ID = 732a0e6b-7e97-4496-9632-404c49335999\n        Pipeline ID = 20\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 120\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:24:43.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:39576",
    "_indextime": "1754501083",
    "_serial": "19",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "39",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:24:43 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=613\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 49676010-e625-42cf-8e30-283ec0bb3b53\n        Host Application = powershell.exe -Command Get-NetRoute\n        Engine Version = 5.1.20348.3932\n        Runspace ID = 732a0e6b-7e97-4496-9632-404c49335999\n        Pipeline ID = 20\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 118\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:24:43.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:39538",
    "_indextime": "1754501083",
    "_serial": "20",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "38",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:24:43 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=612\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Set-StrictMode): \"Set-StrictMode\"\nParameterBinding(Set-StrictMode): name=\"Off\"; value=\"True\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 49676010-e625-42cf-8e30-283ec0bb3b53\n        Host Application = powershell.exe -Command Get-NetRoute\n        Engine Version = 5.1.20348.3932\n        Runspace ID = 732a0e6b-7e97-4496-9632-404c49335999\n        Pipeline ID = 20\n        Command Name = Set-StrictMode\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 116\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:24:43.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:39500",
    "_indextime": "1754501083",
    "_serial": "21",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "38",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:24:43 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4104\nEventType=3\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Warning\nRecordNumber=611\nKeywords=None\nTaskCategory=Execute a Remote Command\nOpCode=On create calls\nMessage=Creating Scriptblock text (3 of 3):\nse {\n                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)\n            }\n        }\n    }\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP MSFT_NetTransportFilter.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Remove-NetTransportFilter' -Alias '*'\n        \n\n\nScriptBlock ID: 3b1d7a6c-8497-4463-a420-068446a5ef2b\nPath:",
    "_time": "2025-08-06T17:24:43.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:39459",
    "_indextime": "1754501083",
    "_serial": "22",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "53",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:24:43 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4104\nEventType=3\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Warning\nRecordNumber=610\nKeywords=None\nTaskCategory=Execute a Remote Command\nOpCode=On create calls\nMessage=Splunk could not get the description for this event. Either the component that raises this event is not installed on your local computer or the installation is corrupt.\n\nFormatMessage error:\n\nGot the following information from this event: \n\n()]\n    [uint16[]]\n    ${RemotePortStart},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [uint16[]]\n    ${RemotePortEnd},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [string[]]\n    ${DestinationPrefix},\n\n    [Parameter(ParameterSetName='ByName', ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetTCPSetting')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedTCPSetting},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [switch]\n    ${AsJob})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('SettingName') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${SettingName})\n        $__cmdletization_queryBuilder.FilterByProperty('SettingName', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Protocol') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Protocol})\n        $__cmdletization_queryBuilder.FilterByProperty('Protocol', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('LocalPortStart') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${LocalPortStart})\n        $__cmdletization_queryBuilder.FilterByProperty('LocalPortStart', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('LocalPortEnd') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${LocalPortEnd})\n        $__cmdletization_queryBuilder.FilterByProperty('LocalPortEnd', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('RemotePortStart') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${RemotePortStart})\n        $__cmdletization_queryBuilder.FilterByProperty('RemotePortStart', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('RemotePortEnd') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${RemotePortEnd})\n        $__cmdletization_queryBuilder.FilterByProperty('RemotePortEnd', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DestinationPrefix') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DestinationPrefix})\n        $__cmdletization_queryBuilder.FilterByProperty('DestinationPrefix', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedTCPSetting') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedTCPSetting}, 'MSFT_NetTransportFilterTCPSetting', 'Dependent', 'Antecedent', 'Default')\n    }\n\n\n    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP MSFT_NetTransportFilter.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Get-NetTransportFilter' -Alias '*'\n        \n\nfunction Remove-NetTransportFilter\n{\n    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='High', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/StandardCimv2/MSFT_NetTransportFilter')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [string[]]\n    ${SettingName},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTransportFilter.Protocol[]]\n    ${Protocol},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [uint16[]]\n    ${LocalPortStart},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [uint16[]]\n    ${LocalPortEnd},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [uint16[]]\n    ${RemotePortStart},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [uint16[]]\n    ${RemotePortEnd},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [string[]]\n    ${DestinationPrefix},\n\n    [Parameter(ParameterSetName='ByName', ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetTCPSetting')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedTCPSetting},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetTransportFilter')]\n    [ValidateNotNull()]\n    [ciminstance[]]\n    ${InputObject},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${AsJob},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${PassThru})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('SettingName') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${SettingName})\n        $__cmdletization_queryBuilder.FilterByProperty('SettingName', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Protocol') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Protocol})\n        $__cmdletization_queryBuilder.FilterByProperty('Protocol', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('LocalPortStart') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${LocalPortStart})\n        $__cmdletization_queryBuilder.FilterByProperty('LocalPortStart', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('LocalPortEnd') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${LocalPortEnd})\n        $__cmdletization_queryBuilder.FilterByProperty('LocalPortEnd', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('RemotePortStart') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${RemotePortStart})\n        $__cmdletization_queryBuilder.FilterByProperty('RemotePortStart', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('RemotePortEnd') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${RemotePortEnd})\n        $__cmdletization_queryBuilder.FilterByProperty('RemotePortEnd', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DestinationPrefix') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DestinationPrefix})\n        $__cmdletization_queryBuilder.FilterByProperty('DestinationPrefix', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedTCPSetting') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedTCPSetting}, 'MSFT_NetTransportFilterTCPSetting', 'Dependent', 'Antecedent', 'Default')\n    }\n\n\n    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n    switch -exact ($PSCmdlet.ParameterSetName) { \n        { @('ByName', 'InputObject (cdxml)') -contains $_ } {\n      $__cmdletization_returnValue = $null\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:DeleteInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru\n            if ($PSBoundParameters.ContainsKey('InputObject')) {\n                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }\n            } el\n3b1d7a6c-8497-4463-a420-068446a5ef2b",
    "_time": "2025-08-06T17:24:43.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:39055",
    "_indextime": "1754501083",
    "_serial": "23",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "322",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:24:43 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4104\nEventType=3\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Warning\nRecordNumber=609\nKeywords=None\nTaskCategory=Execute a Remote Command\nOpCode=On create calls\nMessage=Splunk could not get the description for this event. Either the component that raises this event is not installed on your local computer or the installation is corrupt.\n\nFormatMessage error:\n\nGot the following information from this event: \n\n\n#requires -version 3.0\n\ntry { Microsoft.PowerShell.Core\\Set-StrictMode -Off } catch { }\n\n$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module\n\n$script:ClassName = 'ROOT/StandardCimv2/MSFT_NetTransportFilter'\n$script:ClassVersion = '1.0.0'\n$script:ModuleVersion = '1.0.0'\n$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]\n\n$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()\n\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function @()\n        \n\nfunction __cmdletization_BindCommonParameters\n{\n    param(\n        $__cmdletization_objectModelWrapper,\n        $myPSBoundParameters\n    )       \n                \n\n        if ($myPSBoundParameters.ContainsKey('CimSession')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('AsJob')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] \n        }\n                    \n\n}\n                \n\nfunction New-NetTransportFilter\n{\n    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]\n    \n    \n    param(\n    \n    [Parameter(ParameterSetName='cim:CreateInstance0', Mandatory=$true)]\n    [string]\n    ${SettingName},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTransportFilter.Protocol]\n    ${Protocol},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [uint16]\n    ${LocalPortStart},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [uint16]\n    ${LocalPortEnd},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [uint16]\n    ${RemotePortStart},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [uint16]\n    ${RemotePortEnd},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [string]\n    ${DestinationPrefix},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [switch]\n    ${AsJob})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n      $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('SettingName')) {\n          [object]$__cmdletization_value = ${SettingName}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SettingName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SettingName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('Protocol')) {\n          [object]$__cmdletization_value = ${Protocol}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Protocol'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTransportFilter.Protocol'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Protocol'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTransportFilter.Protocol'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('LocalPortStart')) {\n          [object]$__cmdletization_value = ${LocalPortStart}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LocalPortStart'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LocalPortStart'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('LocalPortEnd')) {\n          [object]$__cmdletization_value = ${LocalPortEnd}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LocalPortEnd'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LocalPortEnd'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('RemotePortStart')) {\n          [object]$__cmdletization_value = ${RemotePortStart}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemotePortStart'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemotePortStart'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('RemotePortEnd')) {\n          [object]$__cmdletization_value = ${RemotePortEnd}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemotePortEnd'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemotePortEnd'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('DestinationPrefix')) {\n          [object]$__cmdletization_value = ${DestinationPrefix}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DestinationPrefix'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DestinationPrefix'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:CreateInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo)\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP MSFT_NetTransportFilter.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'New-NetTransportFilter' -Alias '*'\n        \n\nfunction Get-NetTransportFilter\n{\n    [CmdletBinding(PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/StandardCimv2/MSFT_NetTransportFilter')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [string[]]\n    ${SettingName},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTransportFilter.Protocol[]]\n    ${Protocol},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [uint16[]]\n    ${LocalPortStart},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [uint16[]]\n    ${LocalPortEnd},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull\n3b1d7a6c-8497-4463-a420-068446a5ef2b",
    "_time": "2025-08-06T17:24:43.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:38651",
    "_indextime": "1754501083",
    "_serial": "24",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "290",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:24:43 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=608\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Set-NetTCPSetting\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 49676010-e625-42cf-8e30-283ec0bb3b53\n        Host Application = powershell.exe -Command Get-NetRoute\n        Engine Version = 5.1.20348.3932\n        Runspace ID = 732a0e6b-7e97-4496-9632-404c49335999\n        Pipeline ID = 20\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 114\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:24:43.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:38610",
    "_indextime": "1754501083",
    "_serial": "25",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "39",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:24:43 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=607\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Get-NetTCPSetting\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 49676010-e625-42cf-8e30-283ec0bb3b53\n        Host Application = powershell.exe -Command Get-NetRoute\n        Engine Version = 5.1.20348.3932\n        Runspace ID = 732a0e6b-7e97-4496-9632-404c49335999\n        Pipeline ID = 20\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 112\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:24:43.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:38569",
    "_indextime": "1754501083",
    "_serial": "26",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "39",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:24:43 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=606\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 49676010-e625-42cf-8e30-283ec0bb3b53\n        Host Application = powershell.exe -Command Get-NetRoute\n        Engine Version = 5.1.20348.3932\n        Runspace ID = 732a0e6b-7e97-4496-9632-404c49335999\n        Pipeline ID = 20\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 110\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:24:43.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:38531",
    "_indextime": "1754501083",
    "_serial": "27",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "38",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:24:43 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=605\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Set-StrictMode): \"Set-StrictMode\"\nParameterBinding(Set-StrictMode): name=\"Off\"; value=\"True\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 49676010-e625-42cf-8e30-283ec0bb3b53\n        Host Application = powershell.exe -Command Get-NetRoute\n        Engine Version = 5.1.20348.3932\n        Runspace ID = 732a0e6b-7e97-4496-9632-404c49335999\n        Pipeline ID = 20\n        Command Name = Set-StrictMode\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 108\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:24:43.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:38493",
    "_indextime": "1754501083",
    "_serial": "28",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "38",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:24:43 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4104\nEventType=3\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Warning\nRecordNumber=604\nKeywords=None\nTaskCategory=Execute a Remote Command\nOpCode=On create calls\nMessage=Splunk could not get the description for this event. Either the component that raises this event is not installed on your local computer or the installation is corrupt.\n\nFormatMessage error:\n\nGot the following information from this event: \n\nl.Cmdletization.GeneratedTypes.NetTCPSetting.AutoTuningLevelLocal'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('EcnCapability')) {\n            [object]$__cmdletization_value = ${EcnCapability}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EcnCapability'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.EcnCapability'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EcnCapability'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.EcnCapability'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('Timestamps')) {\n            [object]$__cmdletization_value = ${Timestamps}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Timestamps'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.Timestamps'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Timestamps'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.Timestamps'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('InitialRtoMs')) {\n            [object]$__cmdletization_value = ${InitialRtoMs}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InitialRto'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InitialRto'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('ScalingHeuristics')) {\n            [object]$__cmdletization_value = ${ScalingHeuristics}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScalingHeuristics'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.ScalingHeuristics'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScalingHeuristics'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.ScalingHeuristics'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('DynamicPortRangeStartPort')) {\n            [object]$__cmdletization_value = ${DynamicPortRangeStartPort}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DynamicPortRangeStartPort'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DynamicPortRangeStartPort'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('DynamicPortRangeNumberOfPorts')) {\n            [object]$__cmdletization_value = ${DynamicPortRangeNumberOfPorts}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DynamicPortRangeNumberOfPorts'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DynamicPortRangeNumberOfPorts'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('AutomaticUseCustom')) {\n            [object]$__cmdletization_value = ${AutomaticUseCustom}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AutomaticUseCustom'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.AutomaticUseCustom'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AutomaticUseCustom'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.AutomaticUseCustom'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('NonSackRttResiliency')) {\n            [object]$__cmdletization_value = ${NonSackRttResiliency}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NonSackRttResiliency'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.NonSackRttResiliency'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NonSackRttResiliency'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.NonSackRttResiliency'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('ForceWS')) {\n            [object]$__cmdletization_value = ${ForceWS}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ForceWS'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.ForceWS'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ForceWS'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.ForceWS'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('MaxSynRetransmissions')) {\n            [object]$__cmdletization_value = ${MaxSynRetransmissions}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MaxSynRetransmissions'; ParameterType = 'System.Byte'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MaxSynRetransmissions'; ParameterType = 'System.Byte'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('AutoReusePortRangeStartPort')) {\n            [object]$__cmdletization_value = ${AutoReusePortRangeStartPort}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AutoReusePortRangeStartPort'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AutoReusePortRangeStartPort'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('AutoReusePortRangeNumberOfPorts')) {\n            [object]$__cmdletization_value = ${AutoReusePortRangeNumberOfPorts}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AutoReusePortRangeNumberOfPorts'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AutoReusePortRangeNumberOfPorts'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n      $__cmdletization_returnValue = $null\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:ModifyInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru\n            if ($PSBoundParameters.ContainsKey('InputObject')) {\n                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }\n            } else {\n                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)\n            }\n        }\n    }\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP MSFT_NetTCPSetting.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Set-NetTCPSetting' -Alias '*'\n        \n\n04301966-cfbf-4075-b5a5-c6b8d70ad2a5",
    "_time": "2025-08-06T17:24:43.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:38058",
    "_indextime": "1754501083",
    "_serial": "29",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "185",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:24:43 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4104\nEventType=3\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Warning\nRecordNumber=603\nKeywords=None\nTaskCategory=Execute a Remote Command\nOpCode=On create calls\nMessage=Splunk could not get the description for this event. Either the component that raises this event is not installed on your local computer or the installation is corrupt.\n\nFormatMessage error:\n\nGot the following information from this event: \n\n   {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP MSFT_NetTCPSetting.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Get-NetTCPSetting' -Alias '*'\n        \n\nfunction Set-NetTCPSetting\n{\n    [CmdletBinding(DefaultParameterSetName='ByName', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/StandardCimv2/MSFT_NetTCPSetting')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByName', Position=0)]\n    [ValidateNotNull()]\n    [string[]]\n    ${SettingName},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetTCPSetting')]\n    [ValidateNotNull()]\n    [ciminstance[]]\n    ${InputObject},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('MinRto')]\n    [uint32]\n    ${MinRtoMs},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('InitialCongestionWindow')]\n    [uint32]\n    ${InitialCongestionWindowMss},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.CongestionProvider]\n    ${CongestionProvider},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.CwndRestart]\n    ${CwndRestart},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('DelayedAckTimeout')]\n    [uint32]\n    ${DelayedAckTimeoutMs},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [byte]\n    ${DelayedAckFrequency},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.MemoryPressureProtection]\n    ${MemoryPressureProtection},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.AutoTuningLevelLocal]\n    ${AutoTuningLevelLocal},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.EcnCapability]\n    ${EcnCapability},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.Timestamps]\n    ${Timestamps},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('InitialRto')]\n    [uint32]\n    ${InitialRtoMs},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.ScalingHeuristics]\n    ${ScalingHeuristics},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [uint16]\n    ${DynamicPortRangeStartPort},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [uint16]\n    ${DynamicPortRangeNumberOfPorts},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.AutomaticUseCustom]\n    ${AutomaticUseCustom},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.NonSackRttResiliency]\n    ${NonSackRttResiliency},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.ForceWS]\n    ${ForceWS},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [byte]\n    ${MaxSynRetransmissions},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [uint16]\n    ${AutoReusePortRangeStartPort},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [uint16]\n    ${AutoReusePortRangeNumberOfPorts},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${AsJob},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${PassThru})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('SettingName') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${SettingName})\n        $__cmdletization_queryBuilder.FilterByProperty('SettingName', $__cmdletization_values, $true, 'Default')\n    }\n\n\n    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n    switch -exact ($PSCmdlet.ParameterSetName) { \n        { @('ByName', 'InputObject (cdxml)') -contains $_ } {\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('MinRtoMs')) {\n            [object]$__cmdletization_value = ${MinRtoMs}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MinRto'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MinRto'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('InitialCongestionWindowMss')) {\n            [object]$__cmdletization_value = ${InitialCongestionWindowMss}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InitialCongestionWindow'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InitialCongestionWindow'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('CongestionProvider')) {\n            [object]$__cmdletization_value = ${CongestionProvider}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'CongestionProvider'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.CongestionProvider'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'CongestionProvider'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.CongestionProvider'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('CwndRestart')) {\n            [object]$__cmdletization_value = ${CwndRestart}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'CwndRestart'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.CwndRestart'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'CwndRestart'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.CwndRestart'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('DelayedAckTimeoutMs')) {\n            [object]$__cmdletization_value = ${DelayedAckTimeoutMs}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DelayedAckTimeout'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DelayedAckTimeout'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('DelayedAckFrequency')) {\n            [object]$__cmdletization_value = ${DelayedAckFrequency}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DelayedAckFrequency'; ParameterType = 'System.Byte'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DelayedAckFrequency'; ParameterType = 'System.Byte'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('MemoryPressureProtection')) {\n            [object]$__cmdletization_value = ${MemoryPressureProtection}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MemoryPressureProtection'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.MemoryPressureProtection'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MemoryPressureProtection'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.MemoryPressureProtection'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('AutoTuningLevelLocal')) {\n            [object]$__cmdletization_value = ${AutoTuningLevelLocal}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AutoTuningLevelLocal'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.AutoTuningLevelLocal'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AutoTuningLevelLocal'; ParameterType = 'Microsoft.PowerShel\n04301966-cfbf-4075-b5a5-c6b8d70ad2a5",
    "_time": "2025-08-06T17:24:43.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:37566",
    "_indextime": "1754501083",
    "_serial": "30",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "321",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:24:43 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4104\nEventType=3\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Warning\nRecordNumber=602\nKeywords=None\nTaskCategory=Execute a Remote Command\nOpCode=On create calls\nMessage=Splunk could not get the description for this event. Either the component that raises this event is not installed on your local computer or the installation is corrupt.\n\nFormatMessage error:\n\nGot the following information from this event: \n\n\n#requires -version 3.0\n\ntry { Microsoft.PowerShell.Core\\Set-StrictMode -Off } catch { }\n\n$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module\n\n$script:ClassName = 'ROOT/StandardCimv2/MSFT_NetTCPSetting'\n$script:ClassVersion = '1.0.0'\n$script:ModuleVersion = '1.0.0'\n$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]\n\n$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()\n\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function @()\n        \n\nfunction __cmdletization_BindCommonParameters\n{\n    param(\n        $__cmdletization_objectModelWrapper,\n        $myPSBoundParameters\n    )       \n                \n\n        if ($myPSBoundParameters.ContainsKey('CimSession')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('AsJob')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] \n        }\n                    \n\n}\n                \n\nfunction Get-NetTCPSetting\n{\n    [CmdletBinding(DefaultParameterSetName='ByName', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/StandardCimv2/MSFT_NetTCPSetting')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByName', Position=0)]\n    [ValidateNotNull()]\n    [string[]]\n    ${SettingName},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Alias('MinRto')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${MinRtoMs},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Alias('InitialCongestionWindow')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${InitialCongestionWindowMss},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.CongestionProvider[]]\n    ${CongestionProvider},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.CwndRestart[]]\n    ${CwndRestart},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Alias('DelayedAckTimeout')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${DelayedAckTimeoutMs},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [byte[]]\n    ${DelayedAckFrequency},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.MemoryPressureProtection[]]\n    ${MemoryPressureProtection},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.AutoTuningLevelLocal[]]\n    ${AutoTuningLevelLocal},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.AutoTuningLevelGroupPolicy[]]\n    ${AutoTuningLevelGroupPolicy},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.AutoTuningLevelEffective[]]\n    ${AutoTuningLevelEffective},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.EcnCapability[]]\n    ${EcnCapability},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.Timestamps[]]\n    ${Timestamps},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Alias('InitialRto')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${InitialRtoMs},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.ScalingHeuristics[]]\n    ${ScalingHeuristics},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [uint16[]]\n    ${DynamicPortRangeStartPort},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [uint16[]]\n    ${DynamicPortRangeNumberOfPorts},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.AutomaticUseCustom[]]\n    ${AutomaticUseCustom},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.NonSackRttResiliency[]]\n    ${NonSackRttResiliency},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.ForceWS[]]\n    ${ForceWS},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [byte[]]\n    ${MaxSynRetransmissions},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [uint16[]]\n    ${AutoReusePortRangeStartPort},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [uint16[]]\n    ${AutoReusePortRangeNumberOfPorts},\n\n    [Parameter(ParameterSetName='ByName', ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetTransportFilter')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedTransportFilter},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [switch]\n    ${AsJob})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('SettingName') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${SettingName})\n        $__cmdletization_queryBuilder.FilterByProperty('SettingName', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('MinRtoMs') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${MinRtoMs})\n        $__cmdletization_queryBuilder.FilterByProperty('MinRto', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('InitialCongestionWindowMss') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${InitialCongestionWindowMss})\n        $__cmdletization_queryBuilder.FilterByProperty('InitialCongestionWindow', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('CongestionProvider') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${CongestionProvider})\n        $__cmdletization_queryBuilder.FilterByProperty('CongestionProvider', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('CwndRestart') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${CwndRestart})\n        $__cmdletization_queryBuilder.FilterByProperty('CwndRestart', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DelayedAckTimeoutMs') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DelayedAckTimeoutMs})\n        $__cmdletization_queryBuilder.FilterByProperty('DelayedAckTimeout', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DelayedAckFrequency') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DelayedAckFrequency})\n        $__cmdletization_queryBuilder.FilterByProperty('DelayedAckFrequency', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('MemoryPressureProtection') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${MemoryPressureProtection})\n        $__cmdletization_queryBuilder.FilterByProperty('MemoryPressureProtection', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AutoTuningLevelLocal') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${AutoTuningLevelLocal})\n        $__cmdletization_queryBuilder.FilterByProperty('AutoTuningLevelLocal', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AutoTuningLevelGroupPolicy') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${AutoTuningLevelGroupPolicy})\n        $__cmdletization_queryBuilder.FilterByProperty('AutoTuningLevelGroupPolicy', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AutoTuningLevelEffective') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${AutoTuningLevelEffective})\n        $__cmdletization_queryBuilder.FilterByProperty('AutoTuningLevelEffective', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('EcnCapability') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${EcnCapability})\n        $__cmdletization_queryBuilder.FilterByProperty('EcnCapability', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Timestamps') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Timestamps})\n        $__cmdletization_queryBuilder.FilterByProperty('Timestamps', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('InitialRtoMs') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${InitialRtoMs})\n        $__cmdletization_queryBuilder.FilterByProperty('InitialRto', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('ScalingHeuristics') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${ScalingHeuristics})\n        $__cmdletization_queryBuilder.FilterByProperty('ScalingHeuristics', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DynamicPortRangeStartPort') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DynamicPortRangeStartPort})\n        $__cmdletization_queryBuilder.FilterByProperty('DynamicPortRangeStartPort', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DynamicPortRangeNumberOfPorts') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DynamicPortRangeNumberOfPorts})\n        $__cmdletization_queryBuilder.FilterByProperty('DynamicPortRangeNumberOfPorts', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AutomaticUseCustom') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${AutomaticUseCustom})\n        $__cmdletization_queryBuilder.FilterByProperty('AutomaticUseCustom', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('NonSackRttResiliency') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${NonSackRttResiliency})\n        $__cmdletization_queryBuilder.FilterByProperty('NonSackRttResiliency', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('ForceWS') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${ForceWS})\n        $__cmdletization_queryBuilder.FilterByProperty('ForceWS', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('MaxSynRetransmissions') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${MaxSynRetransmissions})\n        $__cmdletization_queryBuilder.FilterByProperty('MaxSynRetransmissions', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AutoReusePortRangeStartPort') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${AutoReusePortRangeStartPort})\n        $__cmdletization_queryBuilder.FilterByProperty('AutoReusePortRangeStartPort', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AutoReusePortRangeNumberOfPorts') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${AutoReusePortRangeNumberOfPorts})\n        $__cmdletization_queryBuilder.FilterByProperty('AutoReusePortRangeNumberOfPorts', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedTransportFilter') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedTransportFilter}, 'MSFT_NetTransportFilterTCPSetting', 'Antecedent', 'Dependent', 'Default')\n    }\n\n\n    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)\n            }\n        }\n        catch\n     \n04301966-cfbf-4075-b5a5-c6b8d70ad2a5",
    "_time": "2025-08-06T17:24:43.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:37074",
    "_indextime": "1754501083",
    "_serial": "31",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "356",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:24:43 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=601\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Get-NetTCPConnection\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 49676010-e625-42cf-8e30-283ec0bb3b53\n        Host Application = powershell.exe -Command Get-NetRoute\n        Engine Version = 5.1.20348.3932\n        Runspace ID = 732a0e6b-7e97-4496-9632-404c49335999\n        Pipeline ID = 20\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 106\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:24:43.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:37033",
    "_indextime": "1754501083",
    "_serial": "32",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "39",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:24:43 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=600\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 49676010-e625-42cf-8e30-283ec0bb3b53\n        Host Application = powershell.exe -Command Get-NetRoute\n        Engine Version = 5.1.20348.3932\n        Runspace ID = 732a0e6b-7e97-4496-9632-404c49335999\n        Pipeline ID = 20\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 104\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:24:43.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:36995",
    "_indextime": "1754501083",
    "_serial": "33",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "38",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:24:43 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=599\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Set-StrictMode): \"Set-StrictMode\"\nParameterBinding(Set-StrictMode): name=\"Off\"; value=\"True\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 49676010-e625-42cf-8e30-283ec0bb3b53\n        Host Application = powershell.exe -Command Get-NetRoute\n        Engine Version = 5.1.20348.3932\n        Runspace ID = 732a0e6b-7e97-4496-9632-404c49335999\n        Pipeline ID = 20\n        Command Name = Set-StrictMode\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 102\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:24:43.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:36957",
    "_indextime": "1754501083",
    "_serial": "34",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "38",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:24:43 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4104\nEventType=3\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Warning\nRecordNumber=598\nKeywords=None\nTaskCategory=Execute a Remote Command\nOpCode=On create calls\nMessage=Creating Scriptblock text (1 of 1):\n\n#requires -version 3.0\n\ntry { Microsoft.PowerShell.Core\\Set-StrictMode -Off } catch { }\n\n$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module\n\n$script:ClassName = 'ROOT/StandardCimv2/MSFT_NetTCPConnection'\n$script:ClassVersion = '1.0.0'\n$script:ModuleVersion = '1.0.0'\n$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]\n\n$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()\n\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function @()\n        \n\nfunction __cmdletization_BindCommonParameters\n{\n    param(\n        $__cmdletization_objectModelWrapper,\n        $myPSBoundParameters\n    )       \n                \n\n        if ($myPSBoundParameters.ContainsKey('CimSession')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('AsJob')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] \n        }\n                    \n\n}\n                \n\nfunction Get-NetTCPConnection\n{\n    [CmdletBinding(DefaultParameterSetName='ByName', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/StandardCimv2/MSFT_NetTCPConnection')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByName', Position=0, ValueFromPipelineByPropertyName=$true)]\n    [Alias('IPAddress')]\n    [ValidateNotNull()]\n    [string[]]\n    ${LocalAddress},\n\n    [Parameter(ParameterSetName='ByName', Position=1)]\n    [ValidateNotNull()]\n    [uint16[]]\n    ${LocalPort},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [string[]]\n    ${RemoteAddress},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [uint16[]]\n    ${RemotePort},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPConnection.State[]]\n    ${State},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPConnection.AppliedSetting[]]\n    ${AppliedSetting},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${OwningProcess},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [datetime[]]\n    ${CreationTime},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPConnection.OffloadState[]]\n    ${OffloadState},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [switch]\n    ${AsJob})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('LocalAddress') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${LocalAddress})\n        $__cmdletization_queryBuilder.FilterByProperty('LocalAddress', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('LocalPort') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${LocalPort})\n        $__cmdletization_queryBuilder.FilterByProperty('LocalPort', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('RemoteAddress') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${RemoteAddress})\n        $__cmdletization_queryBuilder.FilterByProperty('RemoteAddress', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('RemotePort') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${RemotePort})\n        $__cmdletization_queryBuilder.FilterByProperty('RemotePort', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('State') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${State})\n        $__cmdletization_queryBuilder.FilterByProperty('State', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AppliedSetting') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${AppliedSetting})\n        $__cmdletization_queryBuilder.FilterByProperty('AppliedSetting', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('OwningProcess') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${OwningProcess})\n        $__cmdletization_queryBuilder.FilterByProperty('OwningProcess', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('CreationTime') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${CreationTime})\n        $__cmdletization_queryBuilder.FilterByProperty('CreationTime', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('OffloadState') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${OffloadState})\n        $__cmdletization_queryBuilder.FilterByProperty('OffloadState', $__cmdletization_values, $false, 'Default')\n    }\n\n\n    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP MSFT_NetTCPConnection.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Get-NetTCPConnection' -Alias '*'\n        \n\n\nScriptBlock ID: b6913b71-88a8-40d3-8872-bce3cb9aa02b\nPath:",
    "_time": "2025-08-06T17:24:43.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:36690",
    "_indextime": "1754501083",
    "_serial": "35",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "240",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:24:43 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=597\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Remove-NetRoute\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 49676010-e625-42cf-8e30-283ec0bb3b53\n        Host Application = powershell.exe -Command Get-NetRoute\n        Engine Version = 5.1.20348.3932\n        Runspace ID = 732a0e6b-7e97-4496-9632-404c49335999\n        Pipeline ID = 20\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 100\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:24:43.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:36649",
    "_indextime": "1754501083",
    "_serial": "36",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "39",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:24:43 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=596\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Set-NetRoute\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 49676010-e625-42cf-8e30-283ec0bb3b53\n        Host Application = powershell.exe -Command Get-NetRoute\n        Engine Version = 5.1.20348.3932\n        Runspace ID = 732a0e6b-7e97-4496-9632-404c49335999\n        Pipeline ID = 20\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 98\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:24:43.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:36608",
    "_indextime": "1754501083",
    "_serial": "37",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "39",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:24:43 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=595\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Get-NetRoute\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 49676010-e625-42cf-8e30-283ec0bb3b53\n        Host Application = powershell.exe -Command Get-NetRoute\n        Engine Version = 5.1.20348.3932\n        Runspace ID = 732a0e6b-7e97-4496-9632-404c49335999\n        Pipeline ID = 20\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 96\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:24:43.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:36567",
    "_indextime": "1754501083",
    "_serial": "38",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "39",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:24:43 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=594\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Find-NetRoute\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 49676010-e625-42cf-8e30-283ec0bb3b53\n        Host Application = powershell.exe -Command Get-NetRoute\n        Engine Version = 5.1.20348.3932\n        Runspace ID = 732a0e6b-7e97-4496-9632-404c49335999\n        Pipeline ID = 20\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 94\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:24:43.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:36526",
    "_indextime": "1754501083",
    "_serial": "39",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "39",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:24:43 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=593\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"New-NetRoute\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 49676010-e625-42cf-8e30-283ec0bb3b53\n        Host Application = powershell.exe -Command Get-NetRoute\n        Engine Version = 5.1.20348.3932\n        Runspace ID = 732a0e6b-7e97-4496-9632-404c49335999\n        Pipeline ID = 20\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 92\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:24:43.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:36485",
    "_indextime": "1754501083",
    "_serial": "40",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "39",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:24:43 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=592\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 49676010-e625-42cf-8e30-283ec0bb3b53\n        Host Application = powershell.exe -Command Get-NetRoute\n        Engine Version = 5.1.20348.3932\n        Runspace ID = 732a0e6b-7e97-4496-9632-404c49335999\n        Pipeline ID = 20\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 90\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:24:43.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:36447",
    "_indextime": "1754501083",
    "_serial": "41",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "38",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:24:43 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=591\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Set-StrictMode): \"Set-StrictMode\"\nParameterBinding(Set-StrictMode): name=\"Off\"; value=\"True\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 49676010-e625-42cf-8e30-283ec0bb3b53\n        Host Application = powershell.exe -Command Get-NetRoute\n        Engine Version = 5.1.20348.3932\n        Runspace ID = 732a0e6b-7e97-4496-9632-404c49335999\n        Pipeline ID = 20\n        Command Name = Set-StrictMode\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 88\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:24:43.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:36409",
    "_indextime": "1754501083",
    "_serial": "42",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "38",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:24:43 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4104\nEventType=3\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Warning\nRecordNumber=590\nKeywords=None\nTaskCategory=Execute a Remote Command\nOpCode=On create calls\nMessage=Splunk could not get the description for this event. Either the component that raises this event is not installed on your local computer or the installation is corrupt.\n\nFormatMessage error:\n\nGot the following information from this event: \n\nParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${InterfaceMetric},\n\n    [Parameter(ParameterSetName='ByName', ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIPInterface')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedIPInterface},\n\n    [Parameter(ParameterSetName='ByName')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='ByName')]\n    [switch]\n    ${IncludeAllCompartments},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetRoute')]\n    [ValidateNotNull()]\n    [ciminstance[]]\n    ${InputObject},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${AsJob},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${PassThru})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('DestinationPrefix') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DestinationPrefix})\n        $__cmdletization_queryBuilder.FilterByProperty('DestinationPrefix', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('InterfaceIndex') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${InterfaceIndex})\n        $__cmdletization_queryBuilder.FilterByProperty('InterfaceIndex', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('InterfaceAlias') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${InterfaceAlias})\n        $__cmdletization_queryBuilder.FilterByProperty('InterfaceAlias', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('NextHop') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${NextHop})\n        $__cmdletization_queryBuilder.FilterByProperty('NextHop', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AddressFamily') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${AddressFamily})\n        $__cmdletization_queryBuilder.FilterByProperty('AddressFamily', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Publish') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Publish})\n        $__cmdletization_queryBuilder.FilterByProperty('Publish', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('RouteMetric') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${RouteMetric})\n        $__cmdletization_queryBuilder.FilterByProperty('RouteMetric', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Protocol') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Protocol})\n        $__cmdletization_queryBuilder.FilterByProperty('Protocol', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('CompartmentId') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${CompartmentId})\n        $__cmdletization_queryBuilder.FilterByProperty('CompartmentId', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('ValidLifetime') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${ValidLifetime})\n        $__cmdletization_queryBuilder.FilterByProperty('ValidLifetime', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PreferredLifetime') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PreferredLifetime})\n        $__cmdletization_queryBuilder.FilterByProperty('PreferredLifetime', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('State') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${State})\n        $__cmdletization_queryBuilder.FilterByProperty('State', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('InterfaceMetric') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${InterfaceMetric})\n        $__cmdletization_queryBuilder.FilterByProperty('InterfaceMetric', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedIPInterface') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedIPInterface}, 'MSFT_NetIPInterfaceRoute', 'Antecedent', 'Dependent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})\n    }\n    if ($PSBoundParameters.ContainsKey('IncludeAllCompartments') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('IncludeAllCompartments', ${IncludeAllCompartments})\n    }\n\n\n    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n    switch -exact ($PSCmdlet.ParameterSetName) { \n        { @('ByName', 'InputObject (cdxml)') -contains $_ } {\n      $__cmdletization_returnValue = $null\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:DeleteInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru\n            if ($PSBoundParameters.ContainsKey('InputObject')) {\n                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }\n            } else {\n                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)\n            }\n        }\n    }\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP MSFT_NetRoute.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Remove-NetRoute' -Alias '*'\n        \n\n0b9d7f3c-4122-48cf-a1fa-8a710eeb49f0",
    "_time": "2025-08-06T17:24:43.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:36107",
    "_indextime": "1754501083",
    "_serial": "43",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "216",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:24:43 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4104\nEventType=3\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Warning\nRecordNumber=589\nKeywords=None\nTaskCategory=Execute a Remote Command\nOpCode=On create calls\nMessage=Splunk could not get the description for this event. Either the component that raises this event is not installed on your local computer or the installation is corrupt.\n\nFormatMessage error:\n\nGot the following information from this event: \n\nName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${AsJob},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${PassThru})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('DestinationPrefix') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DestinationPrefix})\n        $__cmdletization_queryBuilder.FilterByProperty('DestinationPrefix', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('InterfaceIndex') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${InterfaceIndex})\n        $__cmdletization_queryBuilder.FilterByProperty('InterfaceIndex', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('InterfaceAlias') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${InterfaceAlias})\n        $__cmdletization_queryBuilder.FilterByProperty('InterfaceAlias', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('NextHop') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${NextHop})\n        $__cmdletization_queryBuilder.FilterByProperty('NextHop', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AddressFamily') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${AddressFamily})\n        $__cmdletization_queryBuilder.FilterByProperty('AddressFamily', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Protocol') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Protocol})\n        $__cmdletization_queryBuilder.FilterByProperty('Protocol', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})\n    }\n    if ($PSBoundParameters.ContainsKey('IncludeAllCompartments') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('IncludeAllCompartments', ${IncludeAllCompartments})\n    }\n\n\n    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n    switch -exact ($PSCmdlet.ParameterSetName) { \n        { @('ByName', 'InputObject (cdxml)') -contains $_ } {\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('Publish')) {\n            [object]$__cmdletization_value = ${Publish}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Publish'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetRoute.Publish'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Publish'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetRoute.Publish'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('RouteMetric')) {\n            [object]$__cmdletization_value = ${RouteMetric}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RouteMetric'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RouteMetric'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('ValidLifetime')) {\n            [object]$__cmdletization_value = ${ValidLifetime}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ValidLifetime'; ParameterType = 'System.TimeSpan'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ValidLifetime'; ParameterType = 'System.TimeSpan'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('PreferredLifetime')) {\n            [object]$__cmdletization_value = ${PreferredLifetime}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PreferredLifetime'; ParameterType = 'System.TimeSpan'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PreferredLifetime'; ParameterType = 'System.TimeSpan'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n      $__cmdletization_returnValue = $null\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:ModifyInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru\n            if ($PSBoundParameters.ContainsKey('InputObject')) {\n                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }\n            } else {\n                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)\n            }\n        }\n    }\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP MSFT_NetRoute.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Set-NetRoute' -Alias '*'\n        \n\nfunction Remove-NetRoute\n{\n    [CmdletBinding(DefaultParameterSetName='ByName', SupportsShouldProcess=$true, ConfirmImpact='High', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/StandardCimv2/MSFT_NetRoute')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByName', Position=0)]\n    [ValidateNotNull()]\n    [string[]]\n    ${DestinationPrefix},\n\n    [Parameter(ParameterSetName='ByName', ValueFromPipelineByPropertyName=$true)]\n    [Alias('ifIndex')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${InterfaceIndex},\n\n    [Parameter(ParameterSetName='ByName', ValueFromPipelineByPropertyName=$true)]\n    [Alias('ifAlias')]\n    [ValidateNotNull()]\n    [string[]]\n    ${InterfaceAlias},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [string[]]\n    ${NextHop},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetRoute.AddressFamily[]]\n    ${AddressFamily},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetRoute.Publish[]]\n    ${Publish},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [uint16[]]\n    ${RouteMetric},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetRoute.Protocol[]]\n    ${Protocol},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${CompartmentId},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [timespan[]]\n    ${ValidLifetime},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [timespan[]]\n    ${PreferredLifetime},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetRoute.State[]]\n    ${State},\n\n    [Parameter(\n0b9d7f3c-4122-48cf-a1fa-8a710eeb49f0",
    "_time": "2025-08-06T17:24:43.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:35737",
    "_indextime": "1754501083",
    "_serial": "44",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "260",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:24:43 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4104\nEventType=3\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Warning\nRecordNumber=588\nKeywords=None\nTaskCategory=Execute a Remote Command\nOpCode=On create calls\nMessage=Splunk could not get the description for this event. Either the component that raises this event is not installed on your local computer or the installation is corrupt.\n\nFormatMessage error:\n\nGot the following information from this event: \n\non.GeneratedTypes.NetRoute.AddressFamily[]]\n    ${AddressFamily},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetRoute.Publish[]]\n    ${Publish},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [uint16[]]\n    ${RouteMetric},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetRoute.Protocol[]]\n    ${Protocol},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${CompartmentId},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [timespan[]]\n    ${ValidLifetime},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [timespan[]]\n    ${PreferredLifetime},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetRoute.State[]]\n    ${State},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${InterfaceMetric},\n\n    [Parameter(ParameterSetName='ByName', ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIPInterface')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedIPInterface},\n\n    [Parameter(ParameterSetName='ByName')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='ByName')]\n    [switch]\n    ${IncludeAllCompartments},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [switch]\n    ${AsJob})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('DestinationPrefix') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DestinationPrefix})\n        $__cmdletization_queryBuilder.FilterByProperty('DestinationPrefix', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('InterfaceIndex') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${InterfaceIndex})\n        $__cmdletization_queryBuilder.FilterByProperty('InterfaceIndex', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('InterfaceAlias') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${InterfaceAlias})\n        $__cmdletization_queryBuilder.FilterByProperty('InterfaceAlias', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('NextHop') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${NextHop})\n        $__cmdletization_queryBuilder.FilterByProperty('NextHop', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AddressFamily') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${AddressFamily})\n        $__cmdletization_queryBuilder.FilterByProperty('AddressFamily', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Publish') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Publish})\n        $__cmdletization_queryBuilder.FilterByProperty('Publish', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('RouteMetric') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${RouteMetric})\n        $__cmdletization_queryBuilder.FilterByProperty('RouteMetric', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Protocol') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Protocol})\n        $__cmdletization_queryBuilder.FilterByProperty('Protocol', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('CompartmentId') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${CompartmentId})\n        $__cmdletization_queryBuilder.FilterByProperty('CompartmentId', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('ValidLifetime') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${ValidLifetime})\n        $__cmdletization_queryBuilder.FilterByProperty('ValidLifetime', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PreferredLifetime') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PreferredLifetime})\n        $__cmdletization_queryBuilder.FilterByProperty('PreferredLifetime', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('State') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${State})\n        $__cmdletization_queryBuilder.FilterByProperty('State', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('InterfaceMetric') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${InterfaceMetric})\n        $__cmdletization_queryBuilder.FilterByProperty('InterfaceMetric', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedIPInterface') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedIPInterface}, 'MSFT_NetIPInterfaceRoute', 'Antecedent', 'Dependent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})\n    }\n    if ($PSBoundParameters.ContainsKey('IncludeAllCompartments') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('IncludeAllCompartments', ${IncludeAllCompartments})\n    }\n\n\n    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP MSFT_NetRoute.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Get-NetRoute' -Alias '*'\n        \n\nfunction Set-NetRoute\n{\n    [CmdletBinding(DefaultParameterSetName='ByName', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/StandardCimv2/MSFT_NetRoute')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByName', Position=0)]\n    [ValidateNotNull()]\n    [string[]]\n    ${DestinationPrefix},\n\n    [Parameter(ParameterSetName='ByName', ValueFromPipelineByPropertyName=$true)]\n    [Alias('ifIndex')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${InterfaceIndex},\n\n    [Parameter(ParameterSetName='ByName', ValueFromPipelineByPropertyName=$true)]\n    [Alias('ifAlias')]\n    [ValidateNotNull()]\n    [string[]]\n    ${InterfaceAlias},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [string[]]\n    ${NextHop},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetRoute.AddressFamily[]]\n    ${AddressFamily},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetRoute.Protocol[]]\n    ${Protocol},\n\n    [Parameter(ParameterSetName='ByName')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='ByName')]\n    [switch]\n    ${IncludeAllCompartments},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetRoute')]\n    [ValidateNotNull()]\n    [ciminstance[]]\n    ${InputObject},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetRoute.Publish]\n    ${Publish},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [uint16]\n    ${RouteMetric},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [timespan]\n    ${ValidLifetime},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [timespan]\n    ${PreferredLifetime},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSet\n0b9d7f3c-4122-48cf-a1fa-8a710eeb49f0",
    "_time": "2025-08-06T17:24:43.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:35367",
    "_indextime": "1754501083",
    "_serial": "45",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "315",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:24:43 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4104\nEventType=3\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Warning\nRecordNumber=587\nKeywords=None\nTaskCategory=Execute a Remote Command\nOpCode=On create calls\nMessage=Splunk could not get the description for this event. Either the component that raises this event is not installed on your local computer or the installation is corrupt.\n\nFormatMessage error:\n\nGot the following information from this event: \n\nPresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Protocol'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetRoute.Protocol'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('ValidLifetime')) {\n          [object]$__cmdletization_value = ${ValidLifetime}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ValidLifetime'; ParameterType = 'System.TimeSpan'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ValidLifetime'; ParameterType = 'System.TimeSpan'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('PreferredLifetime')) {\n          [object]$__cmdletization_value = ${PreferredLifetime}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PreferredLifetime'; ParameterType = 'System.TimeSpan'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PreferredLifetime'; ParameterType = 'System.TimeSpan'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'CmdletOutput'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'Out'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.UInt32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Create', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo)\n        }\n    }\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP MSFT_NetRoute.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'New-NetRoute' -Alias '*'\n        \n\nfunction Find-NetRoute\n{\n    [CmdletBinding(PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance[]])]\n    param(\n    \n    [Parameter(ParameterSetName='Find0')]\n    [uint32]\n    ${InterfaceIndex},\n\n    [Parameter(ParameterSetName='Find0')]\n    [string]\n    ${LocalIPAddress},\n\n    [Parameter(ParameterSetName='Find0', Mandatory=$true)]\n    [string]\n    ${RemoteIPAddress},\n\n    [Parameter(ParameterSetName='Find0')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='Find0')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='Find0')]\n    [switch]\n    ${AsJob})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n      $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('InterfaceIndex')) {\n          [object]$__cmdletization_value = ${InterfaceIndex}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InterfaceIndex'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InterfaceIndex'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('LocalIPAddress')) {\n          [object]$__cmdletization_value = ${LocalIPAddress}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LocalIPAddress'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LocalIPAddress'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('RemoteIPAddress')) {\n          [object]$__cmdletization_value = ${RemoteIPAddress}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteIPAddress'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteIPAddress'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'CmdletOutput'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'Out'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.UInt32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Find', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo)\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP MSFT_NetRoute.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Find-NetRoute' -Alias '*'\n        \n\nfunction Get-NetRoute\n{\n    [CmdletBinding(DefaultParameterSetName='ByName', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/StandardCimv2/MSFT_NetRoute')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByName', Position=0)]\n    [ValidateNotNull()]\n    [string[]]\n    ${DestinationPrefix},\n\n    [Parameter(ParameterSetName='ByName', ValueFromPipelineByPropertyName=$true)]\n    [Alias('ifIndex')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${InterfaceIndex},\n\n    [Parameter(ParameterSetName='ByName', ValueFromPipelineByPropertyName=$true)]\n    [Alias('ifAlias')]\n    [ValidateNotNull()]\n    [string[]]\n    ${InterfaceAlias},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [string[]]\n    ${NextHop},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletizati\n0b9d7f3c-4122-48cf-a1fa-8a710eeb49f0",
    "_time": "2025-08-06T17:24:43.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:34997",
    "_indextime": "1754501083",
    "_serial": "46",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "265",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:24:43 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4104\nEventType=3\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Warning\nRecordNumber=586\nKeywords=None\nTaskCategory=Execute a Remote Command\nOpCode=On create calls\nMessage=Splunk could not get the description for this event. Either the component that raises this event is not installed on your local computer or the installation is corrupt.\n\nFormatMessage error:\n\nGot the following information from this event: \n\nse\n        if ($PSBoundParameters.ContainsKey('RouteMetric')) {\n          [object]$__cmdletization_value = ${RouteMetric}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RouteMetric'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RouteMetric'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('Protocol')) {\n          [object]$__cmdletization_value = ${Protocol}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Protocol'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetRoute.Protocol'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Protocol'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetRoute.Protocol'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('ValidLifetime')) {\n          [object]$__cmdletization_value = ${ValidLifetime}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ValidLifetime'; ParameterType = 'System.TimeSpan'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ValidLifetime'; ParameterType = 'System.TimeSpan'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('PreferredLifetime')) {\n          [object]$__cmdletization_value = ${PreferredLifetime}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PreferredLifetime'; ParameterType = 'System.TimeSpan'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PreferredLifetime'; ParameterType = 'System.TimeSpan'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'CmdletOutput'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'Out'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.UInt32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Create', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo)\n        }\n        { @('ByInterfaceIndex') -contains $_ } {\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('DestinationPrefix')) {\n          [object]$__cmdletization_value = ${DestinationPrefix}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DestinationPrefix'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DestinationPrefix'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('InterfaceIndex')) {\n          [object]$__cmdletization_value = ${InterfaceIndex}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InterfaceIndex'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InterfaceIndex'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('AddressFamily')) {\n          [object]$__cmdletization_value = ${AddressFamily}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AddressFamily'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetRoute.AddressFamily'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AddressFamily'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetRoute.AddressFamily'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('NextHop')) {\n          [object]$__cmdletization_value = ${NextHop}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NextHop'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NextHop'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('PolicyStore')) {\n          [object]$__cmdletization_value = ${PolicyStore}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('Publish')) {\n          [object]$__cmdletization_value = ${Publish}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Publish'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetRoute.Publish'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Publish'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetRoute.Publish'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('RouteMetric')) {\n          [object]$__cmdletization_value = ${RouteMetric}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RouteMetric'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RouteMetric'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('Protocol')) {\n          [object]$__cmdletization_value = ${Protocol}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Protocol'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetRoute.Protocol'; Bindings = 'In'; Value = $__cmdletization_value; IsValue\n0b9d7f3c-4122-48cf-a1fa-8a710eeb49f0",
    "_time": "2025-08-06T17:24:43.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:34627",
    "_indextime": "1754501083",
    "_serial": "47",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "145",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:24:43 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4104\nEventType=3\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Warning\nRecordNumber=585\nKeywords=None\nTaskCategory=Execute a Remote Command\nOpCode=On create calls\nMessage=Splunk could not get the description for this event. Either the component that raises this event is not installed on your local computer or the installation is corrupt.\n\nFormatMessage error:\n\nGot the following information from this event: \n\n\n#requires -version 3.0\n\ntry { Microsoft.PowerShell.Core\\Set-StrictMode -Off } catch { }\n\n$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module\n\n$script:ClassName = 'ROOT/StandardCimv2/MSFT_NetRoute'\n$script:ClassVersion = '1.0.0'\n$script:ModuleVersion = '1.0.0'\n$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]\n\n$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()\n\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function @()\n        \n\nfunction __cmdletization_BindCommonParameters\n{\n    param(\n        $__cmdletization_objectModelWrapper,\n        $myPSBoundParameters\n    )       \n                \n\n        if ($myPSBoundParameters.ContainsKey('CimSession')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('AsJob')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] \n        }\n                    \n\n}\n                \n\nfunction New-NetRoute\n{\n    [CmdletBinding(DefaultParameterSetName='ByInterfaceAlias', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance[]])][OutputType([Microsoft.Management.Infrastructure.CimInstance[]])]\n    param(\n    \n    [Parameter(ParameterSetName='ByInterfaceAlias', Mandatory=$true, Position=0)]\n    [Parameter(ParameterSetName='ByInterfaceIndex', Mandatory=$true, Position=0)]\n    [string]\n    ${DestinationPrefix},\n\n    [Parameter(ParameterSetName='ByInterfaceAlias', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]\n    [Alias('ifAlias')]\n    [string]\n    ${InterfaceAlias},\n\n    [Parameter(ParameterSetName='ByInterfaceAlias')]\n    [Parameter(ParameterSetName='ByInterfaceIndex')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetRoute.AddressFamily]\n    ${AddressFamily},\n\n    [Parameter(ParameterSetName='ByInterfaceAlias')]\n    [Parameter(ParameterSetName='ByInterfaceIndex')]\n    [string]\n    ${NextHop},\n\n    [Parameter(ParameterSetName='ByInterfaceAlias')]\n    [Parameter(ParameterSetName='ByInterfaceIndex')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='ByInterfaceAlias')]\n    [Parameter(ParameterSetName='ByInterfaceIndex')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetRoute.Publish]\n    ${Publish},\n\n    [Parameter(ParameterSetName='ByInterfaceAlias')]\n    [Parameter(ParameterSetName='ByInterfaceIndex')]\n    [uint16]\n    ${RouteMetric},\n\n    [Parameter(ParameterSetName='ByInterfaceAlias')]\n    [Parameter(ParameterSetName='ByInterfaceIndex')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetRoute.Protocol]\n    ${Protocol},\n\n    [Parameter(ParameterSetName='ByInterfaceAlias')]\n    [Parameter(ParameterSetName='ByInterfaceIndex')]\n    [timespan]\n    ${ValidLifetime},\n\n    [Parameter(ParameterSetName='ByInterfaceAlias')]\n    [Parameter(ParameterSetName='ByInterfaceIndex')]\n    [timespan]\n    ${PreferredLifetime},\n\n    [Parameter(ParameterSetName='ByInterfaceIndex', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]\n    [Alias('ifIndex')]\n    [uint32]\n    ${InterfaceIndex},\n\n    [Parameter(ParameterSetName='ByInterfaceAlias')]\n    [Parameter(ParameterSetName='ByInterfaceIndex')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByInterfaceAlias')]\n    [Parameter(ParameterSetName='ByInterfaceIndex')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByInterfaceAlias')]\n    [Parameter(ParameterSetName='ByInterfaceIndex')]\n    [switch]\n    ${AsJob})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n      $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n\n      switch -exact ($PSCmdlet.ParameterSetName) { \n        { @('ByInterfaceAlias') -contains $_ } {\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('DestinationPrefix')) {\n          [object]$__cmdletization_value = ${DestinationPrefix}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DestinationPrefix'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DestinationPrefix'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('InterfaceAlias')) {\n          [object]$__cmdletization_value = ${InterfaceAlias}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InterfaceAlias'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InterfaceAlias'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('AddressFamily')) {\n          [object]$__cmdletization_value = ${AddressFamily}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AddressFamily'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetRoute.AddressFamily'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AddressFamily'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetRoute.AddressFamily'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('NextHop')) {\n          [object]$__cmdletization_value = ${NextHop}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NextHop'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NextHop'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('PolicyStore')) {\n          [object]$__cmdletization_value = ${PolicyStore}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('Publish')) {\n          [object]$__cmdletization_value = ${Publish}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Publish'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetRoute.Publish'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Publish'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetRoute.Publish'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $fal\n0b9d7f3c-4122-48cf-a1fa-8a710eeb49f0",
    "_time": "2025-08-06T17:24:43.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:34257",
    "_indextime": "1754501083",
    "_serial": "48",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "250",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:24:43 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=584\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Get-NetPrefixPolicy\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 49676010-e625-42cf-8e30-283ec0bb3b53\n        Host Application = powershell.exe -Command Get-NetRoute\n        Engine Version = 5.1.20348.3932\n        Runspace ID = 732a0e6b-7e97-4496-9632-404c49335999\n        Pipeline ID = 20\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 86\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:24:43.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:34216",
    "_indextime": "1754501083",
    "_serial": "49",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "39",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:24:43 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=583\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 49676010-e625-42cf-8e30-283ec0bb3b53\n        Host Application = powershell.exe -Command Get-NetRoute\n        Engine Version = 5.1.20348.3932\n        Runspace ID = 732a0e6b-7e97-4496-9632-404c49335999\n        Pipeline ID = 20\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 84\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:24:43.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:34178",
    "_indextime": "1754501083",
    "_serial": "50",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "38",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:24:43 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=582\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Set-StrictMode): \"Set-StrictMode\"\nParameterBinding(Set-StrictMode): name=\"Off\"; value=\"True\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 49676010-e625-42cf-8e30-283ec0bb3b53\n        Host Application = powershell.exe -Command Get-NetRoute\n        Engine Version = 5.1.20348.3932\n        Runspace ID = 732a0e6b-7e97-4496-9632-404c49335999\n        Pipeline ID = 20\n        Command Name = Set-StrictMode\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 82\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:24:43.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:34140",
    "_indextime": "1754501083",
    "_serial": "51",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "38",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:24:43 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4104\nEventType=3\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Warning\nRecordNumber=581\nKeywords=None\nTaskCategory=Execute a Remote Command\nOpCode=On create calls\nMessage=Creating Scriptblock text (1 of 1):\n\n#requires -version 3.0\n\ntry { Microsoft.PowerShell.Core\\Set-StrictMode -Off } catch { }\n\n$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module\n\n$script:ClassName = 'ROOT/StandardCimv2/MSFT_NetPrefixPolicy'\n$script:ClassVersion = '1.0.0'\n$script:ModuleVersion = '1.0.0'\n$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]\n\n$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()\n\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function @()\n        \n\nfunction __cmdletization_BindCommonParameters\n{\n    param(\n        $__cmdletization_objectModelWrapper,\n        $myPSBoundParameters\n    )       \n                \n\n        if ($myPSBoundParameters.ContainsKey('CimSession')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('AsJob')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] \n        }\n                    \n\n}\n                \n\nfunction Get-NetPrefixPolicy\n{\n    [CmdletBinding(DefaultParameterSetName='ByName', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/StandardCimv2/MSFT_NetPrefixPolicy')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByName', Position=0)]\n    [ValidateNotNull()]\n    [string[]]\n    ${Prefix},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${Precedence},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${Label},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [switch]\n    ${AsJob})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('Prefix') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Prefix})\n        $__cmdletization_queryBuilder.FilterByProperty('Prefix', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Precedence') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Precedence})\n        $__cmdletization_queryBuilder.FilterByProperty('Precedence', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Label') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Label})\n        $__cmdletization_queryBuilder.FilterByProperty('Label', $__cmdletization_values, $false, 'Default')\n    }\n\n\n    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP MSFT_NetPrefixPolicy.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Get-NetPrefixPolicy' -Alias '*'\n        \n\n\nScriptBlock ID: 490a982c-dff7-46e6-87e2-6256ebcc09c7\nPath:",
    "_time": "2025-08-06T17:24:43.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:33959",
    "_indextime": "1754501083",
    "_serial": "52",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "185",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:24:43 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=580\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Set-NetOffloadGlobalSetting\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 49676010-e625-42cf-8e30-283ec0bb3b53\n        Host Application = powershell.exe -Command Get-NetRoute\n        Engine Version = 5.1.20348.3932\n        Runspace ID = 732a0e6b-7e97-4496-9632-404c49335999\n        Pipeline ID = 20\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 80\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:24:43.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:33918",
    "_indextime": "1754501083",
    "_serial": "53",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "39",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:24:43 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=579\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Get-NetOffloadGlobalSetting\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 49676010-e625-42cf-8e30-283ec0bb3b53\n        Host Application = powershell.exe -Command Get-NetRoute\n        Engine Version = 5.1.20348.3932\n        Runspace ID = 732a0e6b-7e97-4496-9632-404c49335999\n        Pipeline ID = 20\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 78\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:24:43.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:33877",
    "_indextime": "1754501083",
    "_serial": "54",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "39",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:24:43 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=578\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 49676010-e625-42cf-8e30-283ec0bb3b53\n        Host Application = powershell.exe -Command Get-NetRoute\n        Engine Version = 5.1.20348.3932\n        Runspace ID = 732a0e6b-7e97-4496-9632-404c49335999\n        Pipeline ID = 20\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 76\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:24:43.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:33839",
    "_indextime": "1754501083",
    "_serial": "55",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "38",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:24:43 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=577\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Set-StrictMode): \"Set-StrictMode\"\nParameterBinding(Set-StrictMode): name=\"Off\"; value=\"True\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 49676010-e625-42cf-8e30-283ec0bb3b53\n        Host Application = powershell.exe -Command Get-NetRoute\n        Engine Version = 5.1.20348.3932\n        Runspace ID = 732a0e6b-7e97-4496-9632-404c49335999\n        Pipeline ID = 20\n        Command Name = Set-StrictMode\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 74\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:24:43.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:33801",
    "_indextime": "1754501083",
    "_serial": "56",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "38",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:24:43 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4104\nEventType=3\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Warning\nRecordNumber=576\nKeywords=None\nTaskCategory=Execute a Remote Command\nOpCode=On create calls\nMessage=Creating Scriptblock text (2 of 2):\naskOffload'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetOffloadGlobalSetting.EnabledDisabledEnum'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('NetworkDirect')) {\n            [object]$__cmdletization_value = ${NetworkDirect}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NetworkDirect'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetOffloadGlobalSetting.EnabledDisabledEnum'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NetworkDirect'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetOffloadGlobalSetting.EnabledDisabledEnum'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('NetworkDirectAcrossIPSubnets')) {\n            [object]$__cmdletization_value = ${NetworkDirectAcrossIPSubnets}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NetworkDirectAcrossIPSubnets'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetOffloadGlobalSetting.AllowedBlockedEnum'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NetworkDirectAcrossIPSubnets'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetOffloadGlobalSetting.AllowedBlockedEnum'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('PacketCoalescingFilter')) {\n            [object]$__cmdletization_value = ${PacketCoalescingFilter}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PacketCoalescingFilter'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetOffloadGlobalSetting.EnabledDisabledEnum'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PacketCoalescingFilter'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetOffloadGlobalSetting.EnabledDisabledEnum'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n      $__cmdletization_returnValue = $null\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:ModifyInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru\n            if ($PSBoundParameters.ContainsKey('InputObject')) {\n                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }\n            } else {\n                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)\n            }\n        }\n    }\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP MSFT_NetOffloadGlobalSetting.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Set-NetOffloadGlobalSetting' -Alias '*'\n        \n\n\nScriptBlock ID: b2f058ce-46da-4822-ae03-6edaef7c8bd6\nPath:",
    "_time": "2025-08-06T17:24:43.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:33631",
    "_indextime": "1754501083",
    "_serial": "57",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "92",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:24:43 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4104\nEventType=3\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Warning\nRecordNumber=575\nKeywords=None\nTaskCategory=Execute a Remote Command\nOpCode=On create calls\nMessage=Splunk could not get the description for this event. Either the component that raises this event is not installed on your local computer or the installation is corrupt.\n\nFormatMessage error:\n\nGot the following information from this event: \n\n\n#requires -version 3.0\n\ntry { Microsoft.PowerShell.Core\\Set-StrictMode -Off } catch { }\n\n$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module\n\n$script:ClassName = 'ROOT/StandardCimv2/MSFT_NetOffloadGlobalSetting'\n$script:ClassVersion = '1.0.0'\n$script:ModuleVersion = '1.0.0'\n$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]\n\n$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()\n\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function @()\n        \n\nfunction __cmdletization_BindCommonParameters\n{\n    param(\n        $__cmdletization_objectModelWrapper,\n        $myPSBoundParameters\n    )       \n                \n\n        if ($myPSBoundParameters.ContainsKey('CimSession')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('AsJob')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] \n        }\n                    \n\n}\n                \n\nfunction Get-NetOffloadGlobalSetting\n{\n    [CmdletBinding(DefaultParameterSetName='ByName', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/StandardCimv2/MSFT_NetOffloadGlobalSetting')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetOffloadGlobalSetting.EnabledDisabledEnum[]]\n    ${ReceiveSideScaling},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetOffloadGlobalSetting.EnabledDisabledEnum[]]\n    ${ReceiveSegmentCoalescing},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetOffloadGlobalSetting.ChimneyEnum[]]\n    ${Chimney},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetOffloadGlobalSetting.EnabledDisabledEnum[]]\n    ${TaskOffload},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetOffloadGlobalSetting.EnabledDisabledEnum[]]\n    ${NetworkDirect},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetOffloadGlobalSetting.AllowedBlockedEnum[]]\n    ${NetworkDirectAcrossIPSubnets},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetOffloadGlobalSetting.EnabledDisabledEnum[]]\n    ${PacketCoalescingFilter},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [switch]\n    ${AsJob})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('ReceiveSideScaling') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${ReceiveSideScaling})\n        $__cmdletization_queryBuilder.FilterByProperty('ReceiveSideScaling', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('ReceiveSegmentCoalescing') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${ReceiveSegmentCoalescing})\n        $__cmdletization_queryBuilder.FilterByProperty('ReceiveSegmentCoalescing', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Chimney') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Chimney})\n        $__cmdletization_queryBuilder.FilterByProperty('Chimney', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('TaskOffload') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${TaskOffload})\n        $__cmdletization_queryBuilder.FilterByProperty('TaskOffload', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('NetworkDirect') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${NetworkDirect})\n        $__cmdletization_queryBuilder.FilterByProperty('NetworkDirect', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('NetworkDirectAcrossIPSubnets') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${NetworkDirectAcrossIPSubnets})\n        $__cmdletization_queryBuilder.FilterByProperty('NetworkDirectAcrossIPSubnets', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PacketCoalescingFilter') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PacketCoalescingFilter})\n        $__cmdletization_queryBuilder.FilterByProperty('PacketCoalescingFilter', $__cmdletization_values, $false, 'Default')\n    }\n\n\n    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP MSFT_NetOffloadGlobalSetting.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Get-NetOffloadGlobalSetting' -Alias '*'\n        \n\nfunction Set-NetOffloadGlobalSetting\n{\n    [CmdletBinding(DefaultParameterSetName='InputObject (cdxml)', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/StandardCimv2/MSFT_NetOffloadGlobalSetting')]\n\n    param(\n    \n    [Parameter(ParameterSetName='InputObject (cdxml)', ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetOffloadGlobalSetting')]\n    [ValidateNotNull()]\n    [ciminstance[]]\n    ${InputObject},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetOffloadGlobalSetting.EnabledDisabledEnum]\n    ${ReceiveSideScaling},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetOffloadGlobalSetting.EnabledDisabledEnum]\n    ${ReceiveSegmentCoalescing},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetOffloadGlobalSetting.ChimneyEnum]\n    ${Chimney},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetOffloadGlobalSetting.EnabledDisabledEnum]\n    ${TaskOffload},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetOffloadGlobalSetting.EnabledDisabledEnum]\n    ${NetworkDirect},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetOffloadGlobalSetting.AllowedBlockedEnum]\n    ${NetworkDirectAcrossIPSubnets},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetOffloadGlobalSetting.EnabledDisabledEnum]\n    ${PacketCoalescingFilter},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${AsJob},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${PassThru})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n\n\n    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n    switch -exact ($PSCmdlet.ParameterSetName) { \n        { @('InputObject (cdxml)') -contains $_ } {\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('ReceiveSideScaling')) {\n            [object]$__cmdletization_value = ${ReceiveSideScaling}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ReceiveSideScaling'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetOffloadGlobalSetting.EnabledDisabledEnum'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ReceiveSideScaling'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetOffloadGlobalSetting.EnabledDisabledEnum'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('ReceiveSegmentCoalescing')) {\n            [object]$__cmdletization_value = ${ReceiveSegmentCoalescing}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ReceiveSegmentCoalescing'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetOffloadGlobalSetting.EnabledDisabledEnum'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ReceiveSegmentCoalescing'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetOffloadGlobalSetting.EnabledDisabledEnum'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('Chimney')) {\n            [object]$__cmdletization_value = ${Chimney}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Chimney'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetOffloadGlobalSetting.ChimneyEnum'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Chimney'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetOffloadGlobalSetting.ChimneyEnum'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('TaskOffload')) {\n            [object]$__cmdletization_value = ${TaskOffload}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'TaskOffload'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetOffloadGlobalSetting.EnabledDisabledEnum'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'T\nb2f058ce-46da-4822-ae03-6edaef7c8bd6",
    "_time": "2025-08-06T17:24:43.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:33121",
    "_indextime": "1754501083",
    "_serial": "58",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "369",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:24:43 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=574\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Remove-NetNeighbor\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 49676010-e625-42cf-8e30-283ec0bb3b53\n        Host Application = powershell.exe -Command Get-NetRoute\n        Engine Version = 5.1.20348.3932\n        Runspace ID = 732a0e6b-7e97-4496-9632-404c49335999\n        Pipeline ID = 20\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 72\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:24:43.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:33080",
    "_indextime": "1754501083",
    "_serial": "59",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "39",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:24:43 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=573\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Set-NetNeighbor\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 49676010-e625-42cf-8e30-283ec0bb3b53\n        Host Application = powershell.exe -Command Get-NetRoute\n        Engine Version = 5.1.20348.3932\n        Runspace ID = 732a0e6b-7e97-4496-9632-404c49335999\n        Pipeline ID = 20\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 70\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:24:43.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:33039",
    "_indextime": "1754501083",
    "_serial": "60",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "39",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:24:43 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=572\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Get-NetNeighbor\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 49676010-e625-42cf-8e30-283ec0bb3b53\n        Host Application = powershell.exe -Command Get-NetRoute\n        Engine Version = 5.1.20348.3932\n        Runspace ID = 732a0e6b-7e97-4496-9632-404c49335999\n        Pipeline ID = 20\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 68\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:24:43.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:32998",
    "_indextime": "1754501083",
    "_serial": "61",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "39",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:24:43 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=571\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"New-NetNeighbor\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 49676010-e625-42cf-8e30-283ec0bb3b53\n        Host Application = powershell.exe -Command Get-NetRoute\n        Engine Version = 5.1.20348.3932\n        Runspace ID = 732a0e6b-7e97-4496-9632-404c49335999\n        Pipeline ID = 20\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 66\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:24:43.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:32957",
    "_indextime": "1754501083",
    "_serial": "62",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "39",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:24:43 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=570\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 49676010-e625-42cf-8e30-283ec0bb3b53\n        Host Application = powershell.exe -Command Get-NetRoute\n        Engine Version = 5.1.20348.3932\n        Runspace ID = 732a0e6b-7e97-4496-9632-404c49335999\n        Pipeline ID = 20\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 64\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:24:43.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:32919",
    "_indextime": "1754501083",
    "_serial": "63",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "38",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:24:43 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=569\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Set-StrictMode): \"Set-StrictMode\"\nParameterBinding(Set-StrictMode): name=\"Off\"; value=\"True\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 49676010-e625-42cf-8e30-283ec0bb3b53\n        Host Application = powershell.exe -Command Get-NetRoute\n        Engine Version = 5.1.20348.3932\n        Runspace ID = 732a0e6b-7e97-4496-9632-404c49335999\n        Pipeline ID = 20\n        Command Name = Set-StrictMode\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 62\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:24:43.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:32881",
    "_indextime": "1754501083",
    "_serial": "64",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "38",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:24:43 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4104\nEventType=3\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Warning\nRecordNumber=568\nKeywords=None\nTaskCategory=Execute a Remote Command\nOpCode=On create calls\nMessage=Creating Scriptblock text (4 of 4):\n()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP MSFT_NetNeighbor.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Remove-NetNeighbor' -Alias '*'\n        \n\n\nScriptBlock ID: c5533512-548d-4be9-a621-5d4106e8312a\nPath:",
    "_time": "2025-08-06T17:24:43.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:32857",
    "_indextime": "1754501083",
    "_serial": "65",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "32",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:24:43 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4104\nEventType=3\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Warning\nRecordNumber=567\nKeywords=None\nTaskCategory=Execute a Remote Command\nOpCode=On create calls\nMessage=Splunk could not get the description for this event. Either the component that raises this event is not installed on your local computer or the installation is corrupt.\n\nFormatMessage error:\n\nGot the following information from this event: \n\n     {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('IPAddress') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${IPAddress})\n        $__cmdletization_queryBuilder.FilterByProperty('IPAddress', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('InterfaceIndex') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${InterfaceIndex})\n        $__cmdletization_queryBuilder.FilterByProperty('InterfaceIndex', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('InterfaceAlias') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${InterfaceAlias})\n        $__cmdletization_queryBuilder.FilterByProperty('InterfaceAlias', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('State') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${State})\n        $__cmdletization_queryBuilder.FilterByProperty('State', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AddressFamily') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${AddressFamily})\n        $__cmdletization_queryBuilder.FilterByProperty('AddressFamily', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})\n    }\n    if ($PSBoundParameters.ContainsKey('IncludeAllCompartments') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('IncludeAllCompartments', ${IncludeAllCompartments})\n    }\n\n\n    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n    switch -exact ($PSCmdlet.ParameterSetName) { \n        { @('ByName', 'InputObject (cdxml)') -contains $_ } {\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('LinkLayerAddress')) {\n            [object]$__cmdletization_value = ${LinkLayerAddress}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LinkLayerAddress'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LinkLayerAddress'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n      $__cmdletization_returnValue = $null\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:ModifyInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru\n            if ($PSBoundParameters.ContainsKey('InputObject')) {\n                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }\n            } else {\n                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)\n            }\n        }\n    }\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP MSFT_NetNeighbor.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Set-NetNeighbor' -Alias '*'\n        \n\nfunction Remove-NetNeighbor\n{\n    [CmdletBinding(DefaultParameterSetName='ByName', SupportsShouldProcess=$true, ConfirmImpact='High', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/StandardCimv2/MSFT_NetNeighbor')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByName', Position=0)]\n    [ValidateNotNull()]\n    [string[]]\n    ${IPAddress},\n\n    [Parameter(ParameterSetName='ByName', ValueFromPipelineByPropertyName=$true)]\n    [Alias('ifIndex')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${InterfaceIndex},\n\n    [Parameter(ParameterSetName='ByName', ValueFromPipelineByPropertyName=$true)]\n    [Alias('ifAlias')]\n    [ValidateNotNull()]\n    [string[]]\n    ${InterfaceAlias},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [string[]]\n    ${LinkLayerAddress},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetNeighbor.State[]]\n    ${State},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetNeighbor.AddressFamily[]]\n    ${AddressFamily},\n\n    [Parameter(ParameterSetName='ByName', ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIPInterface')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedIPInterface},\n\n    [Parameter(ParameterSetName='ByName')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='ByName')]\n    [switch]\n    ${IncludeAllCompartments},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetNeighbor')]\n    [ValidateNotNull()]\n    [ciminstance[]]\n    ${InputObject},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${AsJob},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${PassThru})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('IPAddress') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${IPAddress})\n        $__cmdletization_queryBuilder.FilterByProperty('IPAddress', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('InterfaceIndex') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${InterfaceIndex})\n        $__cmdletization_queryBuilder.FilterByProperty('InterfaceIndex', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('InterfaceAlias') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${InterfaceAlias})\n        $__cmdletization_queryBuilder.FilterByProperty('InterfaceAlias', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('LinkLayerAddress') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${LinkLayerAddress})\n        $__cmdletization_queryBuilder.FilterByProperty('LinkLayerAddress', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('State') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${State})\n        $__cmdletization_queryBuilder.FilterByProperty('State', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AddressFamily') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${AddressFamily})\n        $__cmdletization_queryBuilder.FilterByProperty('AddressFamily', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedIPInterface') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedIPInterface}, 'MSFT_NetIPInterfaceNeighbor', 'Antecedent', 'Dependent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})\n    }\n    if ($PSBoundParameters.ContainsKey('IncludeAllCompartments') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('IncludeAllCompartments', ${IncludeAllCompartments})\n    }\n\n\n    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n    switch -exact ($PSCmdlet.ParameterSetName) { \n        { @('ByName', 'InputObject (cdxml)') -contains $_ } {\n      $__cmdletization_returnValue = $null\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:DeleteInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru\n            if ($PSBoundParameters.ContainsKey('InputObject')) {\n                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }\n            } else {\n                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)\n            }\n        }\n    }\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing\nc5533512-548d-4be9-a621-5d4106e8312a",
    "_time": "2025-08-06T17:24:43.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:32408",
    "_indextime": "1754501083",
    "_serial": "66",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "332",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:24:43 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4104\nEventType=3\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Warning\nRecordNumber=566\nKeywords=None\nTaskCategory=Execute a Remote Command\nOpCode=On create calls\nMessage=Splunk could not get the description for this event. Either the component that raises this event is not installed on your local computer or the installation is corrupt.\n\nFormatMessage error:\n\nGot the following information from this event: \n\n{\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LinkLayerAddress'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('PolicyStore')) {\n          [object]$__cmdletization_value = ${PolicyStore}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('State')) {\n          [object]$__cmdletization_value = ${State}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'State'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetNeighbor.State'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'State'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetNeighbor.State'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('AddressFamily')) {\n          [object]$__cmdletization_value = ${AddressFamily}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AddressFamily'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetNeighbor.AddressFamily'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AddressFamily'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetNeighbor.AddressFamily'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'CmdletOutput'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'Out'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.UInt32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Create', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo)\n        }\n    }\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP MSFT_NetNeighbor.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'New-NetNeighbor' -Alias '*'\n        \n\nfunction Get-NetNeighbor\n{\n    [CmdletBinding(DefaultParameterSetName='ByName', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/StandardCimv2/MSFT_NetNeighbor')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByName', Position=0)]\n    [ValidateNotNull()]\n    [string[]]\n    ${IPAddress},\n\n    [Parameter(ParameterSetName='ByName', ValueFromPipelineByPropertyName=$true)]\n    [Alias('ifIndex')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${InterfaceIndex},\n\n    [Parameter(ParameterSetName='ByName', ValueFromPipelineByPropertyName=$true)]\n    [Alias('ifAlias')]\n    [ValidateNotNull()]\n    [string[]]\n    ${InterfaceAlias},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [string[]]\n    ${LinkLayerAddress},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetNeighbor.State[]]\n    ${State},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetNeighbor.AddressFamily[]]\n    ${AddressFamily},\n\n    [Parameter(ParameterSetName='ByName', ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIPInterface')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedIPInterface},\n\n    [Parameter(ParameterSetName='ByName')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='ByName')]\n    [switch]\n    ${IncludeAllCompartments},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [switch]\n    ${AsJob})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('IPAddress') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${IPAddress})\n        $__cmdletization_queryBuilder.FilterByProperty('IPAddress', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('InterfaceIndex') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${InterfaceIndex})\n        $__cmdletization_queryBuilder.FilterByProperty('InterfaceIndex', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('InterfaceAlias') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${InterfaceAlias})\n        $__cmdletization_queryBuilder.FilterByProperty('InterfaceAlias', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('LinkLayerAddress') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${LinkLayerAddress})\n        $__cmdletization_queryBuilder.FilterByProperty('LinkLayerAddress', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('State') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${State})\n        $__cmdletization_queryBuilder.FilterByProperty('State', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AddressFamily') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${AddressFamily})\n        $__cmdletization_queryBuilder.FilterByProperty('AddressFamily', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedIPInterface') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedIPInterface}, 'MSFT_NetIPInterfaceNeighbor', 'Antecedent', 'Dependent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})\n    }\n    if ($PSBoundParameters.ContainsKey('IncludeAllCompartments') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('IncludeAllCompartments', ${IncludeAllCompartments})\n    }\n\n\n    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP MSFT_NetNeighbor.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Get-NetNeighbor' -Alias '*'\n        \n\nfunction Set-NetNeighbor\n{\n    [CmdletBinding(DefaultParameterSetName='ByName', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/StandardCimv2/MSFT_NetNeighbor')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByName', Position=0)]\n    [ValidateNotNull()]\n    [string[]]\n    ${IPAddress},\n\n    [Parameter(ParameterSetName='ByName', ValueFromPipelineByPropertyName=$true)]\n    [Alias('ifIndex')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${InterfaceIndex},\n\n    [Parameter(ParameterSetName='ByName', ValueFromPipelineByPropertyName=$true)]\n    [Alias('ifAlias')]\n    [ValidateNotNull()]\n    [string[]]\n    ${InterfaceAlias},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetNeighbor.State[]]\n    ${State},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetNeighbor.AddressFamily[]]\n    ${AddressFamily},\n\n    [Parameter(ParameterSetName='ByName')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='ByName')]\n    [switch]\n    ${IncludeAllCompartments},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetNeighbor')]\n    [ValidateNotNull()]\n    [ciminstance[]]\n    ${InputObject},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [string]\n    ${LinkLayerAddress},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${AsJob},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${PassThru})\n\n    DynamicParam {\n        try \n   \nc5533512-548d-4be9-a621-5d4106e8312a",
    "_time": "2025-08-06T17:24:43.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:31959",
    "_indextime": "1754501083",
    "_serial": "67",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "352",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:24:43 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4104\nEventType=3\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Warning\nRecordNumber=565\nKeywords=None\nTaskCategory=Execute a Remote Command\nOpCode=On create calls\nMessage=Splunk could not get the description for this event. Either the component that raises this event is not installed on your local computer or the installation is corrupt.\n\nFormatMessage error:\n\nGot the following information from this event: \n\n\n#requires -version 3.0\n\ntry { Microsoft.PowerShell.Core\\Set-StrictMode -Off } catch { }\n\n$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module\n\n$script:ClassName = 'ROOT/StandardCimv2/MSFT_NetNeighbor'\n$script:ClassVersion = '1.0.0'\n$script:ModuleVersion = '1.0.0'\n$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]\n\n$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()\n\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function @()\n        \n\nfunction __cmdletization_BindCommonParameters\n{\n    param(\n        $__cmdletization_objectModelWrapper,\n        $myPSBoundParameters\n    )       \n                \n\n        if ($myPSBoundParameters.ContainsKey('CimSession')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('AsJob')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] \n        }\n                    \n\n}\n                \n\nfunction New-NetNeighbor\n{\n    [CmdletBinding(DefaultParameterSetName='ByInterfaceAlias', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance[]])][OutputType([Microsoft.Management.Infrastructure.CimInstance[]])]\n    param(\n    \n    [Parameter(ParameterSetName='ByInterfaceAlias', Mandatory=$true, Position=0)]\n    [Parameter(ParameterSetName='ByInterfaceIndex', Mandatory=$true, Position=0)]\n    [string]\n    ${IPAddress},\n\n    [Parameter(ParameterSetName='ByInterfaceAlias', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]\n    [Alias('ifAlias')]\n    [string]\n    ${InterfaceAlias},\n\n    [Parameter(ParameterSetName='ByInterfaceAlias')]\n    [Parameter(ParameterSetName='ByInterfaceIndex')]\n    [string]\n    ${LinkLayerAddress},\n\n    [Parameter(ParameterSetName='ByInterfaceAlias')]\n    [Parameter(ParameterSetName='ByInterfaceIndex')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='ByInterfaceAlias')]\n    [Parameter(ParameterSetName='ByInterfaceIndex')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetNeighbor.State]\n    ${State},\n\n    [Parameter(ParameterSetName='ByInterfaceAlias')]\n    [Parameter(ParameterSetName='ByInterfaceIndex')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetNeighbor.AddressFamily]\n    ${AddressFamily},\n\n    [Parameter(ParameterSetName='ByInterfaceIndex', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]\n    [Alias('ifIndex')]\n    [uint32]\n    ${InterfaceIndex},\n\n    [Parameter(ParameterSetName='ByInterfaceAlias')]\n    [Parameter(ParameterSetName='ByInterfaceIndex')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByInterfaceAlias')]\n    [Parameter(ParameterSetName='ByInterfaceIndex')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByInterfaceAlias')]\n    [Parameter(ParameterSetName='ByInterfaceIndex')]\n    [switch]\n    ${AsJob})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n      $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n\n      switch -exact ($PSCmdlet.ParameterSetName) { \n        { @('ByInterfaceAlias') -contains $_ } {\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('IPAddress')) {\n          [object]$__cmdletization_value = ${IPAddress}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IPAddress'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IPAddress'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('InterfaceAlias')) {\n          [object]$__cmdletization_value = ${InterfaceAlias}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InterfaceAlias'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InterfaceAlias'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('LinkLayerAddress')) {\n          [object]$__cmdletization_value = ${LinkLayerAddress}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LinkLayerAddress'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LinkLayerAddress'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('PolicyStore')) {\n          [object]$__cmdletization_value = ${PolicyStore}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('State')) {\n          [object]$__cmdletization_value = ${State}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'State'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetNeighbor.State'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'State'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetNeighbor.State'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('AddressFamily')) {\n          [object]$__cmdletization_value = ${AddressFamily}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AddressFamily'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetNeighbor.AddressFamily'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AddressFamily'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetNeighbor.AddressFamily'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'CmdletOutput'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'Out'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.UInt32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Create', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo)\n        }\n        { @('ByInterfaceIndex') -contains $_ } {\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('IPAddress')) {\n          [object]$__cmdletization_value = ${IPAddress}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IPAddress'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IPAddress'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('InterfaceIndex')) {\n          [object]$__cmdletization_value = ${InterfaceIndex}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InterfaceIndex'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InterfaceIndex'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('LinkLayerAddress')) {\n          [object]$__cmdletization_value = ${LinkLayerAddress}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LinkLayerAddress'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else \nc5533512-548d-4be9-a621-5d4106e8312a",
    "_time": "2025-08-06T17:24:43.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:31510",
    "_indextime": "1754501083",
    "_serial": "68",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "264",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:24:43 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=564\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Set-NetIPv6Protocol\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 49676010-e625-42cf-8e30-283ec0bb3b53\n        Host Application = powershell.exe -Command Get-NetRoute\n        Engine Version = 5.1.20348.3932\n        Runspace ID = 732a0e6b-7e97-4496-9632-404c49335999\n        Pipeline ID = 20\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 60\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:24:43.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:31469",
    "_indextime": "1754501083",
    "_serial": "69",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "39",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:24:43 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=563\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Get-NetIPv6Protocol\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 49676010-e625-42cf-8e30-283ec0bb3b53\n        Host Application = powershell.exe -Command Get-NetRoute\n        Engine Version = 5.1.20348.3932\n        Runspace ID = 732a0e6b-7e97-4496-9632-404c49335999\n        Pipeline ID = 20\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 58\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:24:43.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:31428",
    "_indextime": "1754501083",
    "_serial": "70",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "39",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:24:43 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=562\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 49676010-e625-42cf-8e30-283ec0bb3b53\n        Host Application = powershell.exe -Command Get-NetRoute\n        Engine Version = 5.1.20348.3932\n        Runspace ID = 732a0e6b-7e97-4496-9632-404c49335999\n        Pipeline ID = 20\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 56\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:24:43.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:31390",
    "_indextime": "1754501083",
    "_serial": "71",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "38",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:24:43 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=561\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Set-StrictMode): \"Set-StrictMode\"\nParameterBinding(Set-StrictMode): name=\"Off\"; value=\"True\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 49676010-e625-42cf-8e30-283ec0bb3b53\n        Host Application = powershell.exe -Command Get-NetRoute\n        Engine Version = 5.1.20348.3932\n        Runspace ID = 732a0e6b-7e97-4496-9632-404c49335999\n        Pipeline ID = 20\n        Command Name = Set-StrictMode\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 54\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:24:43.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:31352",
    "_indextime": "1754501083",
    "_serial": "72",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "38",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:24:43 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4104\nEventType=3\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Warning\nRecordNumber=560\nKeywords=None\nTaskCategory=Execute a Remote Command\nOpCode=On create calls\nMessage=Splunk could not get the description for this event. Either the component that raises this event is not installed on your local computer or the installation is corrupt.\n\nFormatMessage error:\n\nGot the following information from this event: \n\nocol.RandomizeIdentifiers'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('AddressMaskReply')) {\n            [object]$__cmdletization_value = ${AddressMaskReply}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AddressMaskReply'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.AddressMaskReply'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AddressMaskReply'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.AddressMaskReply'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('DeadGatewayDetection')) {\n            [object]$__cmdletization_value = ${DeadGatewayDetection}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DeadGatewayDetection'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.DeadGatewayDetection'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DeadGatewayDetection'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.DeadGatewayDetection'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('UseTemporaryAddresses')) {\n            [object]$__cmdletization_value = ${UseTemporaryAddresses}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'UseTemporaryAddresses'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.UseTemporaryAddresses'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'UseTemporaryAddresses'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.UseTemporaryAddresses'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('MaxTemporaryDadAttempts')) {\n            [object]$__cmdletization_value = ${MaxTemporaryDadAttempts}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MaxDadAttempts'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MaxDadAttempts'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('MaxTemporaryValidLifetime')) {\n            [object]$__cmdletization_value = ${MaxTemporaryValidLifetime}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MaxValidLifetime'; ParameterType = 'System.TimeSpan'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MaxValidLifetime'; ParameterType = 'System.TimeSpan'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('MaxTemporaryPreferredLifetime')) {\n            [object]$__cmdletization_value = ${MaxTemporaryPreferredLifetime}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MaxPreferredLifetime'; ParameterType = 'System.TimeSpan'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MaxPreferredLifetime'; ParameterType = 'System.TimeSpan'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('TemporaryRegenerateTime')) {\n            [object]$__cmdletization_value = ${TemporaryRegenerateTime}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RegenerateTime'; ParameterType = 'System.TimeSpan'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RegenerateTime'; ParameterType = 'System.TimeSpan'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('MaxTemporaryDesyncTime')) {\n            [object]$__cmdletization_value = ${MaxTemporaryDesyncTime}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MaxRandomTime'; ParameterType = 'System.TimeSpan'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MaxRandomTime'; ParameterType = 'System.TimeSpan'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n      $__cmdletization_returnValue = $null\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:ModifyInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru\n            if ($PSBoundParameters.ContainsKey('InputObject')) {\n                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }\n            } else {\n                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)\n            }\n        }\n    }\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP MSFT_NetIPv6Protocol.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Set-NetIPv6Protocol' -Alias '*'\n        \n\n08b5628b-f830-4cee-92de-5f085ab89aa4",
    "_time": "2025-08-06T17:24:43.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:31040",
    "_indextime": "1754501083",
    "_serial": "73",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "145",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:24:43 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4104\nEventType=3\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Warning\nRecordNumber=559\nKeywords=None\nTaskCategory=Execute a Remote Command\nOpCode=On create calls\nMessage=Splunk could not get the description for this event. Either the component that raises this event is not installed on your local computer or the installation is corrupt.\n\nFormatMessage error:\n\nGot the following information from this event: \n\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.MulticastForwarding]\n    ${MulticastForwarding},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.GroupForwardedFragments]\n    ${GroupForwardedFragments},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.RandomizeIdentifiers]\n    ${RandomizeIdentifiers},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.AddressMaskReply]\n    ${AddressMaskReply},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.DeadGatewayDetection]\n    ${DeadGatewayDetection},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.UseTemporaryAddresses]\n    ${UseTemporaryAddresses},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('MaxDadAttempts')]\n    [uint32]\n    ${MaxTemporaryDadAttempts},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('MaxValidLifetime')]\n    [timespan]\n    ${MaxTemporaryValidLifetime},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('MaxPreferredLifetime')]\n    [timespan]\n    ${MaxTemporaryPreferredLifetime},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('RegenerateTime')]\n    [timespan]\n    ${TemporaryRegenerateTime},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('MaxRandomTime')]\n    [timespan]\n    ${MaxTemporaryDesyncTime},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${AsJob},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${PassThru})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n\n\n    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n    switch -exact ($PSCmdlet.ParameterSetName) { \n        { @('InputObject (cdxml)') -contains $_ } {\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('DefaultHopLimit')) {\n            [object]$__cmdletization_value = ${DefaultHopLimit}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DefaultHopLimit'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DefaultHopLimit'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('NeighborCacheLimitEntries')) {\n            [object]$__cmdletization_value = ${NeighborCacheLimitEntries}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NeighborCacheLimit'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NeighborCacheLimit'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('RouteCacheLimitEntries')) {\n            [object]$__cmdletization_value = ${RouteCacheLimitEntries}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RouteCacheLimit'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RouteCacheLimit'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('ReassemblyLimitBytes')) {\n            [object]$__cmdletization_value = ${ReassemblyLimitBytes}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ReassemblyLimit'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ReassemblyLimit'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('IcmpRedirects')) {\n            [object]$__cmdletization_value = ${IcmpRedirects}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IcmpRedirects'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.IcmpRedirects'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IcmpRedirects'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.IcmpRedirects'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('SourceRoutingBehavior')) {\n            [object]$__cmdletization_value = ${SourceRoutingBehavior}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SourceRoutingBehavior'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.SourceRoutingBehavior'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SourceRoutingBehavior'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.SourceRoutingBehavior'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('DhcpMediaSense')) {\n            [object]$__cmdletization_value = ${DhcpMediaSense}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DhcpMediaSense'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.DhcpMediaSense'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DhcpMediaSense'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.DhcpMediaSense'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('MediaSenseEventLog')) {\n            [object]$__cmdletization_value = ${MediaSenseEventLog}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MediaSenseEventLog'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.MediaSenseEventLog'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MediaSenseEventLog'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.MediaSenseEventLog'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('MldLevel')) {\n            [object]$__cmdletization_value = ${MldLevel}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MldLevel'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.MldLevel'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MldLevel'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.MldLevel'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('MldVersion')) {\n            [object]$__cmdletization_value = ${MldVersion}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MldVersion'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.MldVersion'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MldVersion'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.MldVersion'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('MulticastForwarding')) {\n            [object]$__cmdletization_value = ${MulticastForwarding}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MulticastForwarding'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.MulticastForwarding'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MulticastForwarding'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.MulticastForwarding'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('GroupForwardedFragments')) {\n            [object]$__cmdletization_value = ${GroupForwardedFragments}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'GroupForwardedFragments'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.GroupForwardedFragments'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'GroupForwardedFragments'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.GroupForwardedFragments'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('RandomizeIdentifiers')) {\n            [object]$__cmdletization_value = ${RandomizeIdentifiers}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RandomizeIdentifiers'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.RandomizeIdentifiers'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RandomizeIdentifiers'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Prot\n08b5628b-f830-4cee-92de-5f085ab89aa4",
    "_time": "2025-08-06T17:24:43.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:30503",
    "_indextime": "1754501083",
    "_serial": "74",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "263",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:24:43 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4104\nEventType=3\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Warning\nRecordNumber=558\nKeywords=None\nTaskCategory=Execute a Remote Command\nOpCode=On create calls\nMessage=Splunk could not get the description for this event. Either the component that raises this event is not installed on your local computer or the installation is corrupt.\n\nFormatMessage error:\n\nGot the following information from this event: \n\n\n#requires -version 3.0\n\ntry { Microsoft.PowerShell.Core\\Set-StrictMode -Off } catch { }\n\n$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module\n\n$script:ClassName = 'ROOT/StandardCimv2/MSFT_NetIPv6Protocol'\n$script:ClassVersion = '1.0.0'\n$script:ModuleVersion = '1.0.0'\n$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]\n\n$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()\n\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function @()\n        \n\nfunction __cmdletization_BindCommonParameters\n{\n    param(\n        $__cmdletization_objectModelWrapper,\n        $myPSBoundParameters\n    )       \n                \n\n        if ($myPSBoundParameters.ContainsKey('CimSession')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('AsJob')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] \n        }\n                    \n\n}\n                \n\nfunction Get-NetIPv6Protocol\n{\n    [CmdletBinding(DefaultParameterSetName='ByName', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/StandardCimv2/MSFT_NetIPv6Protocol')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${DefaultHopLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Alias('NeighborCacheLimit')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${NeighborCacheLimitEntries},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Alias('RouteCacheLimit')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${RouteCacheLimitEntries},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Alias('ReassemblyLimit')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${ReassemblyLimitBytes},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.IcmpRedirects[]]\n    ${IcmpRedirects},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.SourceRoutingBehavior[]]\n    ${SourceRoutingBehavior},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.DhcpMediaSense[]]\n    ${DhcpMediaSense},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.MediaSenseEventLog[]]\n    ${MediaSenseEventLog},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.MldLevel[]]\n    ${MldLevel},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.MldVersion[]]\n    ${MldVersion},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.MulticastForwarding[]]\n    ${MulticastForwarding},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.GroupForwardedFragments[]]\n    ${GroupForwardedFragments},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.RandomizeIdentifiers[]]\n    ${RandomizeIdentifiers},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.AddressMaskReply[]]\n    ${AddressMaskReply},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.DeadGatewayDetection[]]\n    ${DeadGatewayDetection},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.UseTemporaryAddresses[]]\n    ${UseTemporaryAddresses},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Alias('MaxDadAttempts')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${MaxTemporaryDadAttempts},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Alias('MaxValidLifetime')]\n    [ValidateNotNull()]\n    [timespan[]]\n    ${MaxTemporaryValidLifetime},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Alias('MaxPreferredLifetime')]\n    [ValidateNotNull()]\n    [timespan[]]\n    ${MaxTemporaryPreferredLifetime},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Alias('RegenerateTime')]\n    [ValidateNotNull()]\n    [timespan[]]\n    ${TemporaryRegenerateTime},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Alias('MaxRandomTime')]\n    [ValidateNotNull()]\n    [timespan[]]\n    ${MaxTemporaryDesyncTime},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [switch]\n    ${AsJob})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('DefaultHopLimit') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DefaultHopLimit})\n        $__cmdletization_queryBuilder.FilterByProperty('DefaultHopLimit', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('NeighborCacheLimitEntries') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${NeighborCacheLimitEntries})\n        $__cmdletization_queryBuilder.FilterByProperty('NeighborCacheLimit', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('RouteCacheLimitEntries') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${RouteCacheLimitEntries})\n        $__cmdletization_queryBuilder.FilterByProperty('RouteCacheLimit', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('ReassemblyLimitBytes') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${ReassemblyLimitBytes})\n        $__cmdletization_queryBuilder.FilterByProperty('ReassemblyLimit', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('IcmpRedirects') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${IcmpRedirects})\n        $__cmdletization_queryBuilder.FilterByProperty('IcmpRedirects', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('SourceRoutingBehavior') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${SourceRoutingBehavior})\n        $__cmdletization_queryBuilder.FilterByProperty('SourceRoutingBehavior', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DhcpMediaSense') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DhcpMediaSense})\n        $__cmdletization_queryBuilder.FilterByProperty('DhcpMediaSense', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('MediaSenseEventLog') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${MediaSenseEventLog})\n        $__cmdletization_queryBuilder.FilterByProperty('MediaSenseEventLog', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('MldLevel') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${MldLevel})\n        $__cmdletization_queryBuilder.FilterByProperty('MldLevel', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('MldVersion') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${MldVersion})\n        $__cmdletization_queryBuilder.FilterByProperty('MldVersion', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('MulticastForwarding') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${MulticastForwarding})\n        $__cmdletization_queryBuilder.FilterByProperty('MulticastForwarding', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('GroupForwardedFragments') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${GroupForwardedFragments})\n        $__cmdletization_queryBuilder.FilterByProperty('GroupForwardedFragments', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('RandomizeIdentifiers') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${RandomizeIdentifiers})\n        $__cmdletization_queryBuilder.FilterByProperty('RandomizeIdentifiers', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AddressMaskReply') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${AddressMaskReply})\n        $__cmdletization_queryBuilder.FilterByProperty('AddressMaskReply', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DeadGatewayDetection') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DeadGatewayDetection})\n        $__cmdletization_queryBuilder.FilterByProperty('DeadGatewayDetection', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('UseTemporaryAddresses') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${UseTemporaryAddresses})\n        $__cmdletization_queryBuilder.FilterByProperty('UseTemporaryAddresses', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('MaxTemporaryDadAttempts') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${MaxTemporaryDadAttempts})\n        $__cmdletization_queryBuilder.FilterByProperty('MaxDadAttempts', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('MaxTemporaryValidLifetime') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${MaxTemporaryValidLifetime})\n        $__cmdletization_queryBuilder.FilterByProperty('MaxValidLifetime', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('MaxTemporaryPreferredLifetime') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${MaxTemporaryPreferredLifetime})\n        $__cmdletization_queryBuilder.FilterByProperty('MaxPreferredLifetime', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('TemporaryRegenerateTime') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${TemporaryRegenerateTime})\n        $__cmdletization_queryBuilder.FilterByProperty('RegenerateTime', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('MaxTemporaryDesyncTime') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${MaxTemporaryDesyncTime})\n        $__cmdletization_queryBuilder.FilterByProperty('MaxRandomTime', $__cmdletization_values, $false, 'Default')\n    }\n\n\n    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP MSFT_NetIPv6Protocol.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Get-NetIPv6Protocol' -Alias '*'\n        \n\nfunction Set-NetIPv6Protocol\n{\n    [CmdletBinding(DefaultParameterSetName='InputObject (cdxml)', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/StandardCimv2/MSFT_NetIPv6Protocol')]\n\n    param(\n    \n    [Parameter(ParameterSetName='InputObject (cdxml)', ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetIPv6Protocol')]\n    [ValidateNotNull()]\n    [ciminstance[]]\n    ${InputObject},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [uint32]\n    ${DefaultHopLimit},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('NeighborCacheLimit')]\n    [uint32]\n    ${NeighborCacheLimitEntries},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('RouteCacheLimit')]\n    [uint32]\n    ${RouteCacheLimitEntries},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('ReassemblyLimit')]\n    [uint32]\n    ${ReassemblyLimitBytes},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.IcmpRedirects]\n    ${IcmpRedirects},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.SourceRoutingBehavior]\n    ${SourceRoutingBehavior},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.DhcpMediaSense]\n    ${DhcpMediaSense},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.MediaSenseEventLog]\n    ${MediaSenseEventLog},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.MldLevel]\n    ${MldLevel},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.MldVersion]\n    ${MldVersion},\n\n08b5628b-f830-4cee-92de-5f085ab89aa4",
    "_time": "2025-08-06T17:24:43.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:29966",
    "_indextime": "1754501083",
    "_serial": "75",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "416",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:24:43 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=557\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Set-NetIPv4Protocol\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 49676010-e625-42cf-8e30-283ec0bb3b53\n        Host Application = powershell.exe -Command Get-NetRoute\n        Engine Version = 5.1.20348.3932\n        Runspace ID = 732a0e6b-7e97-4496-9632-404c49335999\n        Pipeline ID = 20\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 52\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:24:43.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:29925",
    "_indextime": "1754501083",
    "_serial": "76",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "39",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:24:43 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=556\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Get-NetIPv4Protocol\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 49676010-e625-42cf-8e30-283ec0bb3b53\n        Host Application = powershell.exe -Command Get-NetRoute\n        Engine Version = 5.1.20348.3932\n        Runspace ID = 732a0e6b-7e97-4496-9632-404c49335999\n        Pipeline ID = 20\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 50\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:24:43.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:29884",
    "_indextime": "1754501083",
    "_serial": "77",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "39",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:24:43 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=555\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 49676010-e625-42cf-8e30-283ec0bb3b53\n        Host Application = powershell.exe -Command Get-NetRoute\n        Engine Version = 5.1.20348.3932\n        Runspace ID = 732a0e6b-7e97-4496-9632-404c49335999\n        Pipeline ID = 20\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 48\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:24:43.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:29846",
    "_indextime": "1754501083",
    "_serial": "78",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "38",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:24:43 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=554\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Set-StrictMode): \"Set-StrictMode\"\nParameterBinding(Set-StrictMode): name=\"Off\"; value=\"True\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 49676010-e625-42cf-8e30-283ec0bb3b53\n        Host Application = powershell.exe -Command Get-NetRoute\n        Engine Version = 5.1.20348.3932\n        Runspace ID = 732a0e6b-7e97-4496-9632-404c49335999\n        Pipeline ID = 20\n        Command Name = Set-StrictMode\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 46\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:24:43.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:29808",
    "_indextime": "1754501083",
    "_serial": "79",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "38",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:24:43 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4104\nEventType=3\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Warning\nRecordNumber=553\nKeywords=None\nTaskCategory=Execute a Remote Command\nOpCode=On create calls\nMessage=Splunk could not get the description for this event. Either the component that raises this event is not installed on your local computer or the installation is corrupt.\n\nFormatMessage error:\n\nGot the following information from this event: \n\nlue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('NeighborCacheLimitEntries')) {\n            [object]$__cmdletization_value = ${NeighborCacheLimitEntries}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NeighborCacheLimit'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NeighborCacheLimit'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('RouteCacheLimitEntries')) {\n            [object]$__cmdletization_value = ${RouteCacheLimitEntries}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RouteCacheLimit'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RouteCacheLimit'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('ReassemblyLimitBytes')) {\n            [object]$__cmdletization_value = ${ReassemblyLimitBytes}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ReassemblyLimit'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ReassemblyLimit'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('IcmpRedirects')) {\n            [object]$__cmdletization_value = ${IcmpRedirects}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IcmpRedirects'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.IcmpRedirects'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IcmpRedirects'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.IcmpRedirects'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('SourceRoutingBehavior')) {\n            [object]$__cmdletization_value = ${SourceRoutingBehavior}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SourceRoutingBehavior'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.SourceRoutingBehavior'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SourceRoutingBehavior'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.SourceRoutingBehavior'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('DhcpMediaSense')) {\n            [object]$__cmdletization_value = ${DhcpMediaSense}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DhcpMediaSense'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.DhcpMediaSense'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DhcpMediaSense'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.DhcpMediaSense'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('MediaSenseEventLog')) {\n            [object]$__cmdletization_value = ${MediaSenseEventLog}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MediaSenseEventLog'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.MediaSenseEventLog'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MediaSenseEventLog'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.MediaSenseEventLog'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('IGMPLevel')) {\n            [object]$__cmdletization_value = ${IGMPLevel}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MldLevel'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.MldLevel'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MldLevel'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.MldLevel'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('IGMPVersion')) {\n            [object]$__cmdletization_value = ${IGMPVersion}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MldVersion'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.MldVersion'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MldVersion'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.MldVersion'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('MulticastForwarding')) {\n            [object]$__cmdletization_value = ${MulticastForwarding}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MulticastForwarding'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.MulticastForwarding'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MulticastForwarding'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.MulticastForwarding'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('GroupForwardedFragments')) {\n            [object]$__cmdletization_value = ${GroupForwardedFragments}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'GroupForwardedFragments'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.GroupForwardedFragments'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'GroupForwardedFragments'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.GroupForwardedFragments'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('RandomizeIdentifiers')) {\n            [object]$__cmdletization_value = ${RandomizeIdentifiers}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RandomizeIdentifiers'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.RandomizeIdentifiers'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RandomizeIdentifiers'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.RandomizeIdentifiers'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('AddressMaskReply')) {\n            [object]$__cmdletization_value = ${AddressMaskReply}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AddressMaskReply'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.AddressMaskReply'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AddressMaskReply'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.AddressMaskReply'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('DeadGatewayDetection')) {\n            [object]$__cmdletization_value = ${DeadGatewayDetection}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DeadGatewayDetection'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.DeadGatewayDetection'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DeadGatewayDetection'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.DeadGatewayDetection'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('MinimumMtu')) {\n            [object]$__cmdletization_value = ${MinimumMtu}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MinimumMtu'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MinimumMtu'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n      $__cmdletization_returnValue = $null\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:ModifyInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru\n            if ($PSBoundParameters.ContainsKey('InputObject')) {\n                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }\n            } else {\n                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)\n            }\n        }\n    }\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP MSFT_NetIPv4Protocol.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Set-NetIPv4Protocol' -Alias '*'\n        \n\nbc4b0e04-3ecd-40eb-8f84-5933404f495e",
    "_time": "2025-08-06T17:24:43.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:29279",
    "_indextime": "1754501083",
    "_serial": "80",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "211",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:24:43 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4104\nEventType=3\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Warning\nRecordNumber=552\nKeywords=None\nTaskCategory=Execute a Remote Command\nOpCode=On create calls\nMessage=Splunk could not get the description for this event. Either the component that raises this event is not installed on your local computer or the installation is corrupt.\n\nFormatMessage error:\n\nGot the following information from this event: \n\n\n#requires -version 3.0\n\ntry { Microsoft.PowerShell.Core\\Set-StrictMode -Off } catch { }\n\n$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module\n\n$script:ClassName = 'ROOT/StandardCimv2/MSFT_NetIPv4Protocol'\n$script:ClassVersion = '1.0.0'\n$script:ModuleVersion = '1.0.0'\n$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]\n\n$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()\n\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function @()\n        \n\nfunction __cmdletization_BindCommonParameters\n{\n    param(\n        $__cmdletization_objectModelWrapper,\n        $myPSBoundParameters\n    )       \n                \n\n        if ($myPSBoundParameters.ContainsKey('CimSession')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('AsJob')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] \n        }\n                    \n\n}\n                \n\nfunction Get-NetIPv4Protocol\n{\n    [CmdletBinding(DefaultParameterSetName='ByName', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/StandardCimv2/MSFT_NetIPv4Protocol')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${DefaultHopLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Alias('NeighborCacheLimit')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${NeighborCacheLimitEntries},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Alias('RouteCacheLimit')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${RouteCacheLimitEntries},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Alias('ReassemblyLimit')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${ReassemblyLimitBytes},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.IcmpRedirects[]]\n    ${IcmpRedirects},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.SourceRoutingBehavior[]]\n    ${SourceRoutingBehavior},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.DhcpMediaSense[]]\n    ${DhcpMediaSense},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.MediaSenseEventLog[]]\n    ${MediaSenseEventLog},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Alias('MldLevel')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.MldLevel[]]\n    ${IGMPLevel},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Alias('MldVersion')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.MldVersion[]]\n    ${IGMPVersion},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.MulticastForwarding[]]\n    ${MulticastForwarding},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.GroupForwardedFragments[]]\n    ${GroupForwardedFragments},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.RandomizeIdentifiers[]]\n    ${RandomizeIdentifiers},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.AddressMaskReply[]]\n    ${AddressMaskReply},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.DeadGatewayDetection[]]\n    ${DeadGatewayDetection},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${MinimumMtu},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [switch]\n    ${AsJob})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('DefaultHopLimit') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DefaultHopLimit})\n        $__cmdletization_queryBuilder.FilterByProperty('DefaultHopLimit', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('NeighborCacheLimitEntries') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${NeighborCacheLimitEntries})\n        $__cmdletization_queryBuilder.FilterByProperty('NeighborCacheLimit', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('RouteCacheLimitEntries') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${RouteCacheLimitEntries})\n        $__cmdletization_queryBuilder.FilterByProperty('RouteCacheLimit', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('ReassemblyLimitBytes') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${ReassemblyLimitBytes})\n        $__cmdletization_queryBuilder.FilterByProperty('ReassemblyLimit', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('IcmpRedirects') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${IcmpRedirects})\n        $__cmdletization_queryBuilder.FilterByProperty('IcmpRedirects', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('SourceRoutingBehavior') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${SourceRoutingBehavior})\n        $__cmdletization_queryBuilder.FilterByProperty('SourceRoutingBehavior', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DhcpMediaSense') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DhcpMediaSense})\n        $__cmdletization_queryBuilder.FilterByProperty('DhcpMediaSense', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('MediaSenseEventLog') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${MediaSenseEventLog})\n        $__cmdletization_queryBuilder.FilterByProperty('MediaSenseEventLog', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('IGMPLevel') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${IGMPLevel})\n        $__cmdletization_queryBuilder.FilterByProperty('MldLevel', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('IGMPVersion') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${IGMPVersion})\n        $__cmdletization_queryBuilder.FilterByProperty('MldVersion', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('MulticastForwarding') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${MulticastForwarding})\n        $__cmdletization_queryBuilder.FilterByProperty('MulticastForwarding', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('GroupForwardedFragments') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${GroupForwardedFragments})\n        $__cmdletization_queryBuilder.FilterByProperty('GroupForwardedFragments', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('RandomizeIdentifiers') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${RandomizeIdentifiers})\n        $__cmdletization_queryBuilder.FilterByProperty('RandomizeIdentifiers', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AddressMaskReply') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${AddressMaskReply})\n        $__cmdletization_queryBuilder.FilterByProperty('AddressMaskReply', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DeadGatewayDetection') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DeadGatewayDetection})\n        $__cmdletization_queryBuilder.FilterByProperty('DeadGatewayDetection', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('MinimumMtu') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${MinimumMtu})\n        $__cmdletization_queryBuilder.FilterByProperty('MinimumMtu', $__cmdletization_values, $false, 'Default')\n    }\n\n\n    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP MSFT_NetIPv4Protocol.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Get-NetIPv4Protocol' -Alias '*'\n        \n\nfunction Set-NetIPv4Protocol\n{\n    [CmdletBinding(DefaultParameterSetName='InputObject (cdxml)', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/StandardCimv2/MSFT_NetIPv4Protocol')]\n\n    param(\n    \n    [Parameter(ParameterSetName='InputObject (cdxml)', ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetIPv4Protocol')]\n    [ValidateNotNull()]\n    [ciminstance[]]\n    ${InputObject},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [uint32]\n    ${DefaultHopLimit},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('NeighborCacheLimit')]\n    [uint32]\n    ${NeighborCacheLimitEntries},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('RouteCacheLimit')]\n    [uint32]\n    ${RouteCacheLimitEntries},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('ReassemblyLimit')]\n    [uint32]\n    ${ReassemblyLimitBytes},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.IcmpRedirects]\n    ${IcmpRedirects},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.SourceRoutingBehavior]\n    ${SourceRoutingBehavior},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.DhcpMediaSense]\n    ${DhcpMediaSense},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.MediaSenseEventLog]\n    ${MediaSenseEventLog},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('MldLevel')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.MldLevel]\n    ${IGMPLevel},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('MldVersion')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.MldVersion]\n    ${IGMPVersion},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.MulticastForwarding]\n    ${MulticastForwarding},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.GroupForwardedFragments]\n    ${GroupForwardedFragments},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.RandomizeIdentifiers]\n    ${RandomizeIdentifiers},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.AddressMaskReply]\n    ${AddressMaskReply},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.DeadGatewayDetection]\n    ${DeadGatewayDetection},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [uint32]\n    ${MinimumMtu},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${AsJob},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${PassThru})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n\n\n    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n    switch -exact ($PSCmdlet.ParameterSetName) { \n        { @('InputObject (cdxml)') -contains $_ } {\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('DefaultHopLimit')) {\n            [object]$__cmdletization_value = ${DefaultHopLimit}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DefaultHopLimit'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DefaultHopLimit'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultVa\nbc4b0e04-3ecd-40eb-8f84-5933404f495e",
    "_time": "2025-08-06T17:24:43.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:28691",
    "_indextime": "1754501083",
    "_serial": "81",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "470",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:24:43 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=551\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Set-NetIPInterface\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 49676010-e625-42cf-8e30-283ec0bb3b53\n        Host Application = powershell.exe -Command Get-NetRoute\n        Engine Version = 5.1.20348.3932\n        Runspace ID = 732a0e6b-7e97-4496-9632-404c49335999\n        Pipeline ID = 20\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 44\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:24:43.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:28650",
    "_indextime": "1754501083",
    "_serial": "82",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "39",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:24:43 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=550\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Get-NetIPInterface\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 49676010-e625-42cf-8e30-283ec0bb3b53\n        Host Application = powershell.exe -Command Get-NetRoute\n        Engine Version = 5.1.20348.3932\n        Runspace ID = 732a0e6b-7e97-4496-9632-404c49335999\n        Pipeline ID = 20\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 42\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:24:43.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:28609",
    "_indextime": "1754501083",
    "_serial": "83",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "39",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:24:43 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=549\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 49676010-e625-42cf-8e30-283ec0bb3b53\n        Host Application = powershell.exe -Command Get-NetRoute\n        Engine Version = 5.1.20348.3932\n        Runspace ID = 732a0e6b-7e97-4496-9632-404c49335999\n        Pipeline ID = 20\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 40\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:24:43.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:28571",
    "_indextime": "1754501083",
    "_serial": "84",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "38",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:24:43 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=548\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Set-StrictMode): \"Set-StrictMode\"\nParameterBinding(Set-StrictMode): name=\"Off\"; value=\"True\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 49676010-e625-42cf-8e30-283ec0bb3b53\n        Host Application = powershell.exe -Command Get-NetRoute\n        Engine Version = 5.1.20348.3932\n        Runspace ID = 732a0e6b-7e97-4496-9632-404c49335999\n        Pipeline ID = 20\n        Command Name = Set-StrictMode\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 38\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:24:43.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:28533",
    "_indextime": "1754501083",
    "_serial": "85",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "38",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:24:43 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4104\nEventType=3\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Warning\nRecordNumber=547\nKeywords=None\nTaskCategory=Execute a Remote Command\nOpCode=On create calls\nMessage=Creating Scriptblock text (5 of 5):\nmeter]@{Name = 'AdvertiseDefaultRoute'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.AdvertiseDefaultRoute'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AdvertiseDefaultRoute'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.AdvertiseDefaultRoute'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('CurrentHopLimit')) {\n            [object]$__cmdletization_value = ${CurrentHopLimit}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'CurrentHopLimit'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'CurrentHopLimit'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('ForceArpNdWolPattern')) {\n            [object]$__cmdletization_value = ${ForceArpNdWolPattern}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ForceArpNdWolPattern'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.ForceArpNdWolPattern'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ForceArpNdWolPattern'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.ForceArpNdWolPattern'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('DirectedMacWolPattern')) {\n            [object]$__cmdletization_value = ${DirectedMacWolPattern}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DirectedMacWolPattern'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.DirectedMacWolPattern'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DirectedMacWolPattern'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.DirectedMacWolPattern'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('EcnMarking')) {\n            [object]$__cmdletization_value = ${EcnMarking}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EcnMarking'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.EcnMarking'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EcnMarking'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.EcnMarking'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('Dhcp')) {\n            [object]$__cmdletization_value = ${Dhcp}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Dhcp'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.Dhcp'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Dhcp'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.Dhcp'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('AutomaticMetric')) {\n            [object]$__cmdletization_value = ${AutomaticMetric}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AutomaticMetric'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.AutomaticMetric'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AutomaticMetric'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.AutomaticMetric'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n      $__cmdletization_returnValue = $null\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:ModifyInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru\n            if ($PSBoundParameters.ContainsKey('InputObject')) {\n                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }\n            } else {\n                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)\n            }\n        }\n    }\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP MSFT_NetIPInterface.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Set-NetIPInterface' -Alias '*'\n        \n\n\nScriptBlock ID: a39f7da4-8edc-4219-9354-5545cc063935\nPath:",
    "_time": "2025-08-06T17:24:43.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:28266",
    "_indextime": "1754501083",
    "_serial": "86",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "124",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:24:43 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4104\nEventType=3\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Warning\nRecordNumber=546\nKeywords=None\nTaskCategory=Execute a Remote Command\nOpCode=On create calls\nMessage=Splunk could not get the description for this event. Either the component that raises this event is not installed on your local computer or the installation is corrupt.\n\nFormatMessage error:\n\nGot the following information from this event: \n\n         } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InterfaceMetric'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('NeighborUnreachabilityDetection')) {\n            [object]$__cmdletization_value = ${NeighborUnreachabilityDetection}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NeighborUnreachabilityDetection'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.NeighborUnreachabilityDetection'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NeighborUnreachabilityDetection'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.NeighborUnreachabilityDetection'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('BaseReachableTimeMs')) {\n            [object]$__cmdletization_value = ${BaseReachableTimeMs}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'BaseReachableTime'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'BaseReachableTime'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('RetransmitTimeMs')) {\n            [object]$__cmdletization_value = ${RetransmitTimeMs}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RetransmitTime'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RetransmitTime'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('DadTransmits')) {\n            [object]$__cmdletization_value = ${DadTransmits}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DadTransmits'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DadTransmits'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('DadRetransmitTimeMs')) {\n            [object]$__cmdletization_value = ${DadRetransmitTimeMs}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DadRetransmitTime'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DadRetransmitTime'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('RouterDiscovery')) {\n            [object]$__cmdletization_value = ${RouterDiscovery}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RouterDiscovery'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.RouterDiscovery'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RouterDiscovery'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.RouterDiscovery'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('ManagedAddressConfiguration')) {\n            [object]$__cmdletization_value = ${ManagedAddressConfiguration}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ManagedAddressConfiguration'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.ManagedAddressConfiguration'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ManagedAddressConfiguration'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.ManagedAddressConfiguration'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('OtherStatefulConfiguration')) {\n            [object]$__cmdletization_value = ${OtherStatefulConfiguration}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'OtherStatefulConfiguration'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.OtherStatefulConfiguration'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'OtherStatefulConfiguration'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.OtherStatefulConfiguration'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('WeakHostSend')) {\n            [object]$__cmdletization_value = ${WeakHostSend}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'WeakHostSend'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.WeakHostSend'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'WeakHostSend'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.WeakHostSend'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('WeakHostReceive')) {\n            [object]$__cmdletization_value = ${WeakHostReceive}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'WeakHostReceive'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.WeakHostReceive'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'WeakHostReceive'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.WeakHostReceive'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('IgnoreDefaultRoutes')) {\n            [object]$__cmdletization_value = ${IgnoreDefaultRoutes}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IgnoreDefaultRoutes'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.IgnoreDefaultRoutes'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IgnoreDefaultRoutes'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.IgnoreDefaultRoutes'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('AdvertisedRouterLifetime')) {\n            [object]$__cmdletization_value = ${AdvertisedRouterLifetime}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AdvertisedRouterLifetime'; ParameterType = 'System.TimeSpan'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AdvertisedRouterLifetime'; ParameterType = 'System.TimeSpan'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('AdvertiseDefaultRoute')) {\n            [object]$__cmdletization_value = ${AdvertiseDefaultRoute}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodPara\na39f7da4-8edc-4219-9354-5545cc063935",
    "_time": "2025-08-06T17:24:43.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:27851",
    "_indextime": "1754501083",
    "_serial": "87",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "151",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:24:43 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4104\nEventType=3\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Warning\nRecordNumber=545\nKeywords=None\nTaskCategory=Execute a Remote Command\nOpCode=On create calls\nMessage=Splunk could not get the description for this event. Either the component that raises this event is not installed on your local computer or the installation is corrupt.\n\nFormatMessage error:\n\nGot the following information from this event: \n\nll.Cmdletization.GeneratedTypes.NetIPInterface.NeighborUnreachabilityDetection]\n    ${NeighborUnreachabilityDetection},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('BaseReachableTime')]\n    [uint32]\n    ${BaseReachableTimeMs},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('RetransmitTime')]\n    [uint32]\n    ${RetransmitTimeMs},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [uint32]\n    ${DadTransmits},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('DadRetransmitTime')]\n    [uint32]\n    ${DadRetransmitTimeMs},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.RouterDiscovery]\n    ${RouterDiscovery},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.ManagedAddressConfiguration]\n    ${ManagedAddressConfiguration},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.OtherStatefulConfiguration]\n    ${OtherStatefulConfiguration},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.WeakHostSend]\n    ${WeakHostSend},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.WeakHostReceive]\n    ${WeakHostReceive},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.IgnoreDefaultRoutes]\n    ${IgnoreDefaultRoutes},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [timespan]\n    ${AdvertisedRouterLifetime},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.AdvertiseDefaultRoute]\n    ${AdvertiseDefaultRoute},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [uint32]\n    ${CurrentHopLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.ForceArpNdWolPattern]\n    ${ForceArpNdWolPattern},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.DirectedMacWolPattern]\n    ${DirectedMacWolPattern},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.EcnMarking]\n    ${EcnMarking},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.Dhcp]\n    ${Dhcp},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.AutomaticMetric]\n    ${AutomaticMetric},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${AsJob},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${PassThru})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('InterfaceIndex') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${InterfaceIndex})\n        $__cmdletization_queryBuilder.FilterByProperty('InterfaceIndex', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('InterfaceAlias') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${InterfaceAlias})\n        $__cmdletization_queryBuilder.FilterByProperty('InterfaceAlias', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AddressFamily') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${AddressFamily})\n        $__cmdletization_queryBuilder.FilterByProperty('AddressFamily', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('ReachableTime') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${ReachableTime})\n        $__cmdletization_queryBuilder.FilterByProperty('ReachableTime', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('NeighborDiscoverySupported') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${NeighborDiscoverySupported})\n        $__cmdletization_queryBuilder.FilterByProperty('NeighborDiscoverySupported', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('CompartmentId') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${CompartmentId})\n        $__cmdletization_queryBuilder.FilterByProperty('CompartmentId', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})\n    }\n    if ($PSBoundParameters.ContainsKey('IncludeAllCompartments') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('IncludeAllCompartments', ${IncludeAllCompartments})\n    }\n\n\n    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n    switch -exact ($PSCmdlet.ParameterSetName) { \n        { @('ByName', 'InputObject (cdxml)') -contains $_ } {\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('Forwarding')) {\n            [object]$__cmdletization_value = ${Forwarding}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Forwarding'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.Forwarding'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Forwarding'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.Forwarding'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('ClampMss')) {\n            [object]$__cmdletization_value = ${ClampMss}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ClampMss'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.ClampMss'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ClampMss'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.ClampMss'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('Advertising')) {\n            [object]$__cmdletization_value = ${Advertising}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Advertising'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.Advertising'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Advertising'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.Advertising'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('NlMtuBytes')) {\n            [object]$__cmdletization_value = ${NlMtuBytes}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NlMtu'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NlMtu'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('InterfaceMetric')) {\n            [object]$__cmdletization_value = ${InterfaceMetric}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InterfaceMetric'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n \na39f7da4-8edc-4219-9354-5545cc063935",
    "_time": "2025-08-06T17:24:43.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:27436",
    "_indextime": "1754501083",
    "_serial": "88",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "262",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:24:43 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4104\nEventType=3\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Warning\nRecordNumber=544\nKeywords=None\nTaskCategory=Execute a Remote Command\nOpCode=On create calls\nMessage=Splunk could not get the description for this event. Either the component that raises this event is not installed on your local computer or the installation is corrupt.\n\nFormatMessage error:\n\nGot the following information from this event: \n\ndletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('InterfaceMetric') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${InterfaceMetric})\n        $__cmdletization_queryBuilder.FilterByProperty('InterfaceMetric', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('NeighborUnreachabilityDetection') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${NeighborUnreachabilityDetection})\n        $__cmdletization_queryBuilder.FilterByProperty('NeighborUnreachabilityDetection', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('BaseReachableTimeMs') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${BaseReachableTimeMs})\n        $__cmdletization_queryBuilder.FilterByProperty('BaseReachableTime', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('ReachableTimeMs') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${ReachableTimeMs})\n        $__cmdletization_queryBuilder.FilterByProperty('ReachableTime', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('RetransmitTimeMs') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${RetransmitTimeMs})\n        $__cmdletization_queryBuilder.FilterByProperty('RetransmitTime', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DadTransmits') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DadTransmits})\n        $__cmdletization_queryBuilder.FilterByProperty('DadTransmits', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DadRetransmitTimeMs') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DadRetransmitTimeMs})\n        $__cmdletization_queryBuilder.FilterByProperty('DadRetransmitTime', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('RouterDiscovery') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${RouterDiscovery})\n        $__cmdletization_queryBuilder.FilterByProperty('RouterDiscovery', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('ManagedAddressConfiguration') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${ManagedAddressConfiguration})\n        $__cmdletization_queryBuilder.FilterByProperty('ManagedAddressConfiguration', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('OtherStatefulConfiguration') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${OtherStatefulConfiguration})\n        $__cmdletization_queryBuilder.FilterByProperty('OtherStatefulConfiguration', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('WeakHostSend') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${WeakHostSend})\n        $__cmdletization_queryBuilder.FilterByProperty('WeakHostSend', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('WeakHostReceive') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${WeakHostReceive})\n        $__cmdletization_queryBuilder.FilterByProperty('WeakHostReceive', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('IgnoreDefaultRoutes') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${IgnoreDefaultRoutes})\n        $__cmdletization_queryBuilder.FilterByProperty('IgnoreDefaultRoutes', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AdvertisedRouterLifetime') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${AdvertisedRouterLifetime})\n        $__cmdletization_queryBuilder.FilterByProperty('AdvertisedRouterLifetime', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AdvertiseDefaultRoute') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${AdvertiseDefaultRoute})\n        $__cmdletization_queryBuilder.FilterByProperty('AdvertiseDefaultRoute', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('CurrentHopLimit') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${CurrentHopLimit})\n        $__cmdletization_queryBuilder.FilterByProperty('CurrentHopLimit', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('ForceArpNdWolPattern') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${ForceArpNdWolPattern})\n        $__cmdletization_queryBuilder.FilterByProperty('ForceArpNdWolPattern', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DirectedMacWolPattern') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DirectedMacWolPattern})\n        $__cmdletization_queryBuilder.FilterByProperty('DirectedMacWolPattern', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('EcnMarking') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${EcnMarking})\n        $__cmdletization_queryBuilder.FilterByProperty('EcnMarking', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Dhcp') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Dhcp})\n        $__cmdletization_queryBuilder.FilterByProperty('Dhcp', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('ConnectionState') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${ConnectionState})\n        $__cmdletization_queryBuilder.FilterByProperty('ConnectionState', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AutomaticMetric') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${AutomaticMetric})\n        $__cmdletization_queryBuilder.FilterByProperty('AutomaticMetric', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('NeighborDiscoverySupported') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${NeighborDiscoverySupported})\n        $__cmdletization_queryBuilder.FilterByProperty('NeighborDiscoverySupported', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('CompartmentId') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${CompartmentId})\n        $__cmdletization_queryBuilder.FilterByProperty('CompartmentId', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedRoute') -and (@('ByRoute') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedRoute}, 'MSFT_NetIPInterfaceRoute', 'Dependent', 'Antecedent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedIPAddress') -and (@('ByIPAddress') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedIPAddress}, 'MSFT_NetIPInterfaceIPAddress', 'Dependent', 'Antecedent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNeighbor') -and (@('ByNeighbor') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNeighbor}, 'MSFT_NetIPInterfaceNeighbor', 'Dependent', 'Antecedent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedAdapter') -and (@('ByAdapter') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedAdapter}, 'MSFT_NetIPInterfaceAdapter', 'Dependent', 'Antecedent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})\n    }\n    if ($PSBoundParameters.ContainsKey('IncludeAllCompartments') -and (@('ByName', 'ByRoute', 'ByIPAddress', 'ByNeighbor', 'ByAdapter') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('IncludeAllCompartments', ${IncludeAllCompartments})\n    }\n\n\n    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP MSFT_NetIPInterface.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Get-NetIPInterface' -Alias '*'\n        \n\nfunction Set-NetIPInterface\n{\n    [CmdletBinding(DefaultParameterSetName='ByName', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/StandardCimv2/MSFT_NetIPInterface')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByName', ValueFromPipelineByPropertyName=$true)]\n    [Alias('ifIndex')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${InterfaceIndex},\n\n    [Parameter(ParameterSetName='ByName', Position=0, ValueFromPipelineByPropertyName=$true)]\n    [Alias('ifAlias')]\n    [ValidateNotNull()]\n    [string[]]\n    ${InterfaceAlias},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.AddressFamily[]]\n    ${AddressFamily},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${ReachableTime},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.NeighborDiscoverySupported[]]\n    ${NeighborDiscoverySupported},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${CompartmentId},\n\n    [Parameter(ParameterSetName='ByName')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='ByName')]\n    [switch]\n    ${IncludeAllCompartments},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetIPInterface')]\n    [ValidateNotNull()]\n    [ciminstance[]]\n    ${InputObject},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.Forwarding]\n    ${Forwarding},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.ClampMss]\n    ${ClampMss},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.Advertising]\n    ${Advertising},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [uint32]\n    ${NlMtuBytes},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [uint32]\n    ${InterfaceMetric},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShe\na39f7da4-8edc-4219-9354-5545cc063935",
    "_time": "2025-08-06T17:24:43.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:27021",
    "_indextime": "1754501083",
    "_serial": "89",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "252",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:24:43 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4104\nEventType=3\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Warning\nRecordNumber=543\nKeywords=None\nTaskCategory=Execute a Remote Command\nOpCode=On create calls\nMessage=Splunk could not get the description for this event. Either the component that raises this event is not installed on your local computer or the installation is corrupt.\n\nFormatMessage error:\n\nGot the following information from this event: \n\n\n#requires -version 3.0\n\ntry { Microsoft.PowerShell.Core\\Set-StrictMode -Off } catch { }\n\n$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module\n\n$script:ClassName = 'ROOT/StandardCimv2/MSFT_NetIPInterface'\n$script:ClassVersion = '1.0.0'\n$script:ModuleVersion = '1.0.0'\n$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]\n\n$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()\n\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function @()\n        \n\nfunction __cmdletization_BindCommonParameters\n{\n    param(\n        $__cmdletization_objectModelWrapper,\n        $myPSBoundParameters\n    )       \n                \n\n        if ($myPSBoundParameters.ContainsKey('CimSession')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('AsJob')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] \n        }\n                    \n\n}\n                \n\nfunction Get-NetIPInterface\n{\n    [CmdletBinding(DefaultParameterSetName='ByName', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/StandardCimv2/MSFT_NetIPInterface')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByName', ValueFromPipelineByPropertyName=$true)]\n    [Alias('ifIndex')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${InterfaceIndex},\n\n    [Parameter(ParameterSetName='ByName', Position=0, ValueFromPipelineByPropertyName=$true)]\n    [Alias('ifAlias')]\n    [ValidateNotNull()]\n    [string[]]\n    ${InterfaceAlias},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.AddressFamily[]]\n    ${AddressFamily},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.Forwarding[]]\n    ${Forwarding},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.ClampMss[]]\n    ${ClampMss},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.Advertising[]]\n    ${Advertising},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${NlMtuBytes},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${InterfaceMetric},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.NeighborUnreachabilityDetection[]]\n    ${NeighborUnreachabilityDetection},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Alias('BaseReachableTime')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${BaseReachableTimeMs},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Alias('ReachableTime')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${ReachableTimeMs},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Alias('RetransmitTime')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${RetransmitTimeMs},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${DadTransmits},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Alias('DadRetransmitTime')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${DadRetransmitTimeMs},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.RouterDiscovery[]]\n    ${RouterDiscovery},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.ManagedAddressConfiguration[]]\n    ${ManagedAddressConfiguration},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.OtherStatefulConfiguration[]]\n    ${OtherStatefulConfiguration},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.WeakHostSend[]]\n    ${WeakHostSend},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.WeakHostReceive[]]\n    ${WeakHostReceive},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.IgnoreDefaultRoutes[]]\n    ${IgnoreDefaultRoutes},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [timespan[]]\n    ${AdvertisedRouterLifetime},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.AdvertiseDefaultRoute[]]\n    ${AdvertiseDefaultRoute},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${CurrentHopLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.ForceArpNdWolPattern[]]\n    ${ForceArpNdWolPattern},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.DirectedMacWolPattern[]]\n    ${DirectedMacWolPattern},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.EcnMarking[]]\n    ${EcnMarking},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.Dhcp[]]\n    ${Dhcp},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.ConnectionState[]]\n    ${ConnectionState},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.AutomaticMetric[]]\n    ${AutomaticMetric},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.NeighborDiscoverySupported[]]\n    ${NeighborDiscoverySupported},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${CompartmentId},\n\n    [Parameter(ParameterSetName='ByRoute', ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetRoute')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedRoute},\n\n    [Parameter(ParameterSetName='ByIPAddress', ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIPAddress')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedIPAddress},\n\n    [Parameter(ParameterSetName='ByNeighbor', ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetNeighbor')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNeighbor},\n\n    [Parameter(ParameterSetName='ByAdapter', ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetAdapter')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedAdapter},\n\n    [Parameter(ParameterSetName='ByName')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByRoute')]\n    [Parameter(ParameterSetName='ByIPAddress')]\n    [Parameter(ParameterSetName='ByNeighbor')]\n    [Parameter(ParameterSetName='ByAdapter')]\n    [switch]\n    ${IncludeAllCompartments},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByRoute')]\n    [Parameter(ParameterSetName='ByIPAddress')]\n    [Parameter(ParameterSetName='ByNeighbor')]\n    [Parameter(ParameterSetName='ByAdapter')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByRoute')]\n    [Parameter(ParameterSetName='ByIPAddress')]\n    [Parameter(ParameterSetName='ByNeighbor')]\n    [Parameter(ParameterSetName='ByAdapter')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByRoute')]\n    [Parameter(ParameterSetName='ByIPAddress')]\n    [Parameter(ParameterSetName='ByNeighbor')]\n    [Parameter(ParameterSetName='ByAdapter')]\n    [switch]\n    ${AsJob})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('InterfaceIndex') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${InterfaceIndex})\n        $__cmdletization_queryBuilder.FilterByProperty('InterfaceIndex', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('InterfaceAlias') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${InterfaceAlias})\n        $__cmdletization_queryBuilder.FilterByProperty('InterfaceAlias', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AddressFamily') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${AddressFamily})\n        $__cmdletization_queryBuilder.FilterByProperty('AddressFamily', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Forwarding') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Forwarding})\n        $__cmdletization_queryBuilder.FilterByProperty('Forwarding', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('ClampMss') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${ClampMss})\n        $__cmdletization_queryBuilder.FilterByProperty('ClampMss', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Advertising') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Advertising})\n        $__cmdletization_queryBuilder.FilterByProperty('Advertising', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('NlMtuBytes') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${NlMtuBytes})\n        $__cmdletization_queryBuilder.FilterByProperty('NlMtu', $__cm\na39f7da4-8edc-4219-9354-5545cc063935",
    "_time": "2025-08-06T17:24:43.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:26606",
    "_indextime": "1754501083",
    "_serial": "90",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "365",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:24:43 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=542\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Remove-NetIPAddress\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 49676010-e625-42cf-8e30-283ec0bb3b53\n        Host Application = powershell.exe -Command Get-NetRoute\n        Engine Version = 5.1.20348.3932\n        Runspace ID = 732a0e6b-7e97-4496-9632-404c49335999\n        Pipeline ID = 20\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 36\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:24:43.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:26565",
    "_indextime": "1754501083",
    "_serial": "91",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "39",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:24:43 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=541\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Set-NetIPAddress\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 49676010-e625-42cf-8e30-283ec0bb3b53\n        Host Application = powershell.exe -Command Get-NetRoute\n        Engine Version = 5.1.20348.3932\n        Runspace ID = 732a0e6b-7e97-4496-9632-404c49335999\n        Pipeline ID = 20\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 34\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:24:43.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:26524",
    "_indextime": "1754501083",
    "_serial": "92",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "39",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:24:43 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=540\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Get-NetIPAddress\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 49676010-e625-42cf-8e30-283ec0bb3b53\n        Host Application = powershell.exe -Command Get-NetRoute\n        Engine Version = 5.1.20348.3932\n        Runspace ID = 732a0e6b-7e97-4496-9632-404c49335999\n        Pipeline ID = 20\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 32\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:24:43.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:26483",
    "_indextime": "1754501083",
    "_serial": "93",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "39",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:24:43 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=539\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"New-NetIPAddress\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 49676010-e625-42cf-8e30-283ec0bb3b53\n        Host Application = powershell.exe -Command Get-NetRoute\n        Engine Version = 5.1.20348.3932\n        Runspace ID = 732a0e6b-7e97-4496-9632-404c49335999\n        Pipeline ID = 20\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 30\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:24:43.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:26442",
    "_indextime": "1754501083",
    "_serial": "94",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "39",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:24:43 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=538\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 49676010-e625-42cf-8e30-283ec0bb3b53\n        Host Application = powershell.exe -Command Get-NetRoute\n        Engine Version = 5.1.20348.3932\n        Runspace ID = 732a0e6b-7e97-4496-9632-404c49335999\n        Pipeline ID = 20\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 28\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:24:43.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:26404",
    "_indextime": "1754501083",
    "_serial": "95",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "38",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:24:43 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=537\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Set-StrictMode): \"Set-StrictMode\"\nParameterBinding(Set-StrictMode): name=\"Off\"; value=\"True\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 49676010-e625-42cf-8e30-283ec0bb3b53\n        Host Application = powershell.exe -Command Get-NetRoute\n        Engine Version = 5.1.20348.3932\n        Runspace ID = 732a0e6b-7e97-4496-9632-404c49335999\n        Pipeline ID = 20\n        Command Name = Set-StrictMode\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 26\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:24:43.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:26366",
    "_indextime": "1754501083",
    "_serial": "96",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "38",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:24:43 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4104\nEventType=3\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Warning\nRecordNumber=536\nKeywords=None\nTaskCategory=Execute a Remote Command\nOpCode=On create calls\nMessage=Creating Scriptblock text (4 of 4):\ness')]\n    [ValidateNotNull()]\n    [ciminstance[]]\n    ${InputObject},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${AsJob},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${PassThru})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('IPAddress') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${IPAddress})\n        $__cmdletization_queryBuilder.FilterByProperty('IPAddress', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('InterfaceIndex') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${InterfaceIndex})\n        $__cmdletization_queryBuilder.FilterByProperty('InterfaceIndex', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('InterfaceAlias') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${InterfaceAlias})\n        $__cmdletization_queryBuilder.FilterByProperty('InterfaceAlias', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AddressFamily') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${AddressFamily})\n        $__cmdletization_queryBuilder.FilterByProperty('AddressFamily', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Type') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Type})\n        $__cmdletization_queryBuilder.FilterByProperty('Type', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PrefixLength') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PrefixLength})\n        $__cmdletization_queryBuilder.FilterByProperty('PrefixLength', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PrefixOrigin') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PrefixOrigin})\n        $__cmdletization_queryBuilder.FilterByProperty('PrefixOrigin', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('SuffixOrigin') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${SuffixOrigin})\n        $__cmdletization_queryBuilder.FilterByProperty('SuffixOrigin', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AddressState') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${AddressState})\n        $__cmdletization_queryBuilder.FilterByProperty('AddressState', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('ValidLifetime') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${ValidLifetime})\n        $__cmdletization_queryBuilder.FilterByProperty('ValidLifetime', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PreferredLifetime') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PreferredLifetime})\n        $__cmdletization_queryBuilder.FilterByProperty('PreferredLifetime', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('SkipAsSource') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${SkipAsSource})\n        $__cmdletization_queryBuilder.FilterByProperty('SkipAsSource', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})\n    }\n    if ($PSBoundParameters.ContainsKey('DefaultGateway') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('DefaultGateway', ${DefaultGateway})\n    }\n    if ($PSBoundParameters.ContainsKey('IncludeAllCompartments') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('IncludeAllCompartments', ${IncludeAllCompartments})\n    }\n\n\n    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n    switch -exact ($PSCmdlet.ParameterSetName) { \n        { @('Query (cdxml)', 'InputObject (cdxml)') -contains $_ } {\n      $__cmdletization_returnValue = $null\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:DeleteInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru\n            if ($PSBoundParameters.ContainsKey('InputObject')) {\n                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }\n            } else {\n                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)\n            }\n        }\n    }\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP MSFT_NetIPAddress.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Remove-NetIPAddress' -Alias '*'\n        \n\n\nScriptBlock ID: 87c8e1ce-a2d0-4e9f-be0f-e9bd20d09ba6\nPath:",
    "_time": "2025-08-06T17:24:43.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:26098",
    "_indextime": "1754501083",
    "_serial": "97",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "189",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:24:43 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4104\nEventType=3\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Warning\nRecordNumber=535\nKeywords=None\nTaskCategory=Execute a Remote Command\nOpCode=On create calls\nMessage=Splunk could not get the description for this event. Either the component that raises this event is not installed on your local computer or the installation is corrupt.\n\nFormatMessage error:\n\nGot the following information from this event: \n\n(@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedIPInterface}, 'MSFT_NetIPInterfaceIPAddress', 'Antecedent', 'Dependent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})\n    }\n    if ($PSBoundParameters.ContainsKey('IncludeAllCompartments') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('IncludeAllCompartments', ${IncludeAllCompartments})\n    }\n\n\n    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP MSFT_NetIPAddress.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Get-NetIPAddress' -Alias '*'\n        \n\nfunction Set-NetIPAddress\n{\n    [CmdletBinding(DefaultParameterSetName='Query (cdxml)', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/StandardCimv2/MSFT_NetIPAddress')]\n\n    param(\n    \n    [Parameter(ParameterSetName='Query (cdxml)', Position=0, ValueFromPipelineByPropertyName=$true)]\n    [Alias('LocalAddress')]\n    [ValidateNotNull()]\n    [string[]]\n    ${IPAddress},\n\n    [Parameter(ParameterSetName='Query (cdxml)', ValueFromPipelineByPropertyName=$true)]\n    [Alias('ifIndex')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${InterfaceIndex},\n\n    [Parameter(ParameterSetName='Query (cdxml)', ValueFromPipelineByPropertyName=$true)]\n    [Alias('ifAlias')]\n    [ValidateNotNull()]\n    [string[]]\n    ${InterfaceAlias},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPAddress.AddressFamily[]]\n    ${AddressFamily},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPAddress.Type[]]\n    ${Type},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPAddress.PrefixOrigin[]]\n    ${PrefixOrigin},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPAddress.SuffixOrigin[]]\n    ${SuffixOrigin},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPAddress.AddressState[]]\n    ${AddressState},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [switch]\n    ${IncludeAllCompartments},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetIPAddress')]\n    [ValidateNotNull()]\n    [ciminstance[]]\n    ${InputObject},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [byte]\n    ${PrefixLength},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [timespan]\n    ${ValidLifetime},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [timespan]\n    ${PreferredLifetime},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [bool]\n    ${SkipAsSource},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${AsJob},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${PassThru})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('IPAddress') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${IPAddress})\n        $__cmdletization_queryBuilder.FilterByProperty('IPAddress', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('InterfaceIndex') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${InterfaceIndex})\n        $__cmdletization_queryBuilder.FilterByProperty('InterfaceIndex', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('InterfaceAlias') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${InterfaceAlias})\n        $__cmdletization_queryBuilder.FilterByProperty('InterfaceAlias', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AddressFamily') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${AddressFamily})\n        $__cmdletization_queryBuilder.FilterByProperty('AddressFamily', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Type') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Type})\n        $__cmdletization_queryBuilder.FilterByProperty('Type', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PrefixOrigin') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PrefixOrigin})\n        $__cmdletization_queryBuilder.FilterByProperty('PrefixOrigin', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('SuffixOrigin') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${SuffixOrigin})\n        $__cmdletization_queryBuilder.FilterByProperty('SuffixOrigin', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AddressState') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${AddressState})\n        $__cmdletization_queryBuilder.FilterByProperty('AddressState', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})\n    }\n    if ($PSBoundParameters.ContainsKey('IncludeAllCompartments') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('IncludeAllCompartments', ${IncludeAllCompartments})\n    }\n\n\n    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n    switch -exact ($PSCmdlet.ParameterSetName) { \n        { @('Query (cdxml)', 'InputObject (cdxml)') -contains $_ } {\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('PrefixLength')) {\n            [object]$__cmdletization_value = ${PrefixLength}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PrefixLength'; ParameterType = 'System.Byte'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PrefixLength'; ParameterType = 'System.Byte'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('ValidLifetime')) {\n            [object]$__cmdletization_value = ${ValidLifetime}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ValidLifetime'; ParameterType = 'System.TimeSpan'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ValidLifetime'; ParameterType = 'System.TimeSpan'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('PreferredLifetime')) {\n            [object]$__cmdletization_value = ${PreferredLifetime}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PreferredLifetime'; ParameterType = 'System.TimeSpan'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PreferredLifetime'; ParameterType = 'System.TimeSpan'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('SkipAsSource')) {\n            [object]$__cmdletization_value = ${SkipAsSource}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SkipAsSource'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SkipAsSource'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n      $__cmdletization_returnValue = $null\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:ModifyInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru\n            if ($PSBoundParameters.ContainsKey('InputObject')) {\n                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }\n            } else {\n                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)\n            }\n        }\n    }\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP MSFT_NetIPAddress.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Set-NetIPAddress' -Alias '*'\n        \n\nfunction Remove-NetIPAddress\n{\n    [CmdletBinding(DefaultParameterSetName='Query (cdxml)', SupportsShouldProcess=$true, ConfirmImpact='High', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/StandardCimv2/MSFT_NetIPAddress')]\n\n    param(\n    \n    [Parameter(ParameterSetName='Query (cdxml)', Position=0, ValueFromPipelineByPropertyName=$true)]\n    [Alias('LocalAddress')]\n    [ValidateNotNull()]\n    [string[]]\n    ${IPAddress},\n\n    [Parameter(ParameterSetName='Query (cdxml)', ValueFromPipelineByPropertyName=$true)]\n    [Alias('ifIndex')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${InterfaceIndex},\n\n    [Parameter(ParameterSetName='Query (cdxml)', ValueFromPipelineByPropertyName=$true)]\n    [Alias('ifAlias')]\n    [ValidateNotNull()]\n    [string[]]\n    ${InterfaceAlias},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPAddress.AddressFamily[]]\n    ${AddressFamily},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPAddress.Type[]]\n    ${Type},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [ValidateNotNull()]\n    [byte[]]\n    ${PrefixLength},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPAddress.PrefixOrigin[]]\n    ${PrefixOrigin},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPAddress.SuffixOrigin[]]\n    ${SuffixOrigin},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPAddress.AddressState[]]\n    ${AddressState},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [ValidateNotNull()]\n    [timespan[]]\n    ${ValidLifetime},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [ValidateNotNull()]\n    [timespan[]]\n    ${PreferredLifetime},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [ValidateNotNull()]\n    [bool[]]\n    ${SkipAsSource},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [string]\n    ${DefaultGateway},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [switch]\n    ${IncludeAllCompartments},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetIPAddr\n87c8e1ce-a2d0-4e9f-be0f-e9bd20d09ba6",
    "_time": "2025-08-06T17:24:43.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:25544",
    "_indextime": "1754501083",
    "_serial": "98",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "421",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:24:43 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4104\nEventType=3\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Warning\nRecordNumber=534\nKeywords=None\nTaskCategory=Execute a Remote Command\nOpCode=On create calls\nMessage=Splunk could not get the description for this event. Either the component that raises this event is not installed on your local computer or the installation is corrupt.\n\nFormatMessage error:\n\nGot the following information from this event: \n\neIndex'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('DefaultGateway')) {\n          [object]$__cmdletization_value = ${DefaultGateway}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DefaultGateway'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DefaultGateway'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('AddressFamily')) {\n          [object]$__cmdletization_value = ${AddressFamily}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AddressFamily'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPAddress.AddressFamily'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AddressFamily'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPAddress.AddressFamily'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('Type')) {\n          [object]$__cmdletization_value = ${Type}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Type'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPAddress.Type'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Type'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPAddress.Type'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('PrefixLength')) {\n          [object]$__cmdletization_value = ${PrefixLength}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PrefixLength'; ParameterType = 'System.Byte'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PrefixLength'; ParameterType = 'System.Byte'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('ValidLifetime')) {\n          [object]$__cmdletization_value = ${ValidLifetime}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ValidLifetime'; ParameterType = 'System.TimeSpan'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ValidLifetime'; ParameterType = 'System.TimeSpan'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('PreferredLifetime')) {\n          [object]$__cmdletization_value = ${PreferredLifetime}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PreferredLifetime'; ParameterType = 'System.TimeSpan'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PreferredLifetime'; ParameterType = 'System.TimeSpan'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('SkipAsSource')) {\n          [object]$__cmdletization_value = ${SkipAsSource}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SkipAsSource'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SkipAsSource'; ParameterType = 'System.Boolean'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('PolicyStore')) {\n          [object]$__cmdletization_value = ${PolicyStore}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'CmdletOutput'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'Out'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.UInt32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Create', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo)\n        }\n    }\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP MSFT_NetIPAddress.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'New-NetIPAddress' -Alias '*'\n        \n\nfunction Get-NetIPAddress\n{\n    [CmdletBinding(DefaultParameterSetName='Query (cdxml)', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/StandardCimv2/MSFT_NetIPAddress')]\n\n    param(\n    \n    [Parameter(ParameterSetName='Query (cdxml)', Position=0, ValueFromPipelineByPropertyName=$true)]\n    [Alias('LocalAddress')]\n    [ValidateNotNull()]\n    [string[]]\n    ${IPAddress},\n\n    [Parameter(ParameterSetName='Query (cdxml)', ValueFromPipelineByPropertyName=$true)]\n    [Alias('ifIndex')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${InterfaceIndex},\n\n    [Parameter(ParameterSetName='Query (cdxml)', ValueFromPipelineByPropertyName=$true)]\n    [Alias('ifAlias')]\n    [ValidateNotNull()]\n    [string[]]\n    ${InterfaceAlias},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPAddress.AddressFamily[]]\n    ${AddressFamily},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPAddress.Type[]]\n    ${Type},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [ValidateNotNull()]\n    [byte[]]\n    ${PrefixLength},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPAddress.PrefixOrigin[]]\n    ${PrefixOrigin},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPAddress.SuffixOrigin[]]\n    ${SuffixOrigin},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPAddress.AddressState[]]\n    ${AddressState},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [ValidateNotNull()]\n    [timespan[]]\n    ${ValidLifetime},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [ValidateNotNull()]\n    [timespan[]]\n    ${PreferredLifetime},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [ValidateNotNull()]\n    [bool[]]\n    ${SkipAsSource},\n\n    [Parameter(ParameterSetName='Query (cdxml)', ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIPInterface')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedIPInterface},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [switch]\n    ${IncludeAllCompartments},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='Query (cdxml)')]\n    [switch]\n    ${AsJob})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('IPAddress') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${IPAddress})\n        $__cmdletization_queryBuilder.FilterByProperty('IPAddress', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('InterfaceIndex') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${InterfaceIndex})\n        $__cmdletization_queryBuilder.FilterByProperty('InterfaceIndex', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('InterfaceAlias') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${InterfaceAlias})\n        $__cmdletization_queryBuilder.FilterByProperty('InterfaceAlias', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AddressFamily') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${AddressFamily})\n        $__cmdletization_queryBuilder.FilterByProperty('AddressFamily', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Type') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Type})\n        $__cmdletization_queryBuilder.FilterByProperty('Type', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PrefixLength') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PrefixLength})\n        $__cmdletization_queryBuilder.FilterByProperty('PrefixLength', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PrefixOrigin') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PrefixOrigin})\n        $__cmdletization_queryBuilder.FilterByProperty('PrefixOrigin', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('SuffixOrigin') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${SuffixOrigin})\n        $__cmdletization_queryBuilder.FilterByProperty('SuffixOrigin', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AddressState') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${AddressState})\n        $__cmdletization_queryBuilder.FilterByProperty('AddressState', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('ValidLifetime') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${ValidLifetime})\n        $__cmdletization_queryBuilder.FilterByProperty('ValidLifetime', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PreferredLifetime') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PreferredLifetime})\n        $__cmdletization_queryBuilder.FilterByProperty('PreferredLifetime', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('SkipAsSource') -and (@('Query (cdxml)') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${SkipAsSource})\n        $__cmdletization_queryBuilder.FilterByProperty('SkipAsSource', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedIPInterface') -and \n87c8e1ce-a2d0-4e9f-be0f-e9bd20d09ba6",
    "_time": "2025-08-06T17:24:43.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:24990",
    "_indextime": "1754501083",
    "_serial": "99",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "336",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:25:05 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4104\nEventType=5\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Verbose\nRecordNumber=746\nKeywords=None\nTaskCategory=Execute a Remote Command\nOpCode=On create calls\nMessage=Creating Scriptblock text (1 of 1):\n$global:?\n\nScriptBlock ID: bddca02b-0134-48bc-86b1-caaab27521fe\nPath:",
    "_time": "2025-08-06T17:25:05.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:58229",
    "_indextime": "1754501106",
    "_serial": "0",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "19",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:25:05 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=745\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Out-Default): \"Out-Default\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"MSFT_NetNeighbor (Name = \"pp:?DD;Dppm?D?@B?55@55;\", CreationClassName = \"\", SystemCreationClassName = \"\", SystemName = \"\")\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"MSFT_NetNeighbor (Name = \"pp:?DD;D?55@55;\", CreationClassName = \"\", SystemCreationClassName = \"\", SystemName = \"\")\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"MSFT_NetNeighbor (Name = \"pp:?DD;D?55@55;\", CreationClassName = \"\", SystemCreationClassName = \"\", SystemName = \"\")\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"MSFT_NetNeighbor (Name = \"pp:?DDpl55@55;\", CreationClassName = \"\", SystemCreationClassName = \"\", SystemName = \"\")\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"MSFT_NetNeighbor (Name = \"pp:?DD;@55@55;\", CreationClassName = \"\", SystemCreationClassName = \"\", SystemName = \"\")\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"MSFT_NetNeighbor (Name = \"pp:?DDm55@55;\", CreationClassName = \"\", SystemCreationClassName = \"\", SystemName = \"\")\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"MSFT_NetNeighbor (Name = \"pp:?DD?55@55;\", CreationClassName = \"\", SystemCreationClassName = \"\", SystemName = \"\")\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"MSFT_NetNeighbor (Name = \"pp:?DD;55@55;\", CreationClassName = \"\", SystemCreationClassName = \"\", SystemName = \"\")\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"MSFT_NetNeighbor (Name = \"pp:?DD;D?55;55;\", CreationClassName = \"\", SystemCreationClassName = \"\", SystemName = \"\")\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"MSFT_NetNeighbor (Name = \"pp:?DD;@55;55;\", CreationClassName = \"\", SystemCreationClassName = \"\", SystemName = \"\")\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"MSFT_NetNeighbor (Name = \"pp:?DDm55;55;\", CreationClassName = \"\", SystemCreationClassName = \"\", SystemName = \"\")\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"MSFT_NetNeighbor (Name = \"???8???8???8???55@55;\", CreationClassName = \"\", SystemCreationClassName = \"\", SystemName = \"\")\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"MSFT_NetNeighbor (Name = \"??C8???8???8??:55@55;\", CreationClassName = \"\", SystemCreationClassName = \"\", SystemName = \"\")\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"MSFT_NetNeighbor (Name = \"???8:8:8???55@55;\", CreationClassName = \"\", SystemCreationClassName = \"\", SystemName = \"\")\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"MSFT_NetNeighbor (Name = \"???8:8:8??;55@55;\", CreationClassName = \"\", SystemCreationClassName = \"\", SystemName = \"\")\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"MSFT_NetNeighbor (Name = \"???8:8:8??55@55;\", CreationClassName = \"\", SystemCreationClassName = \"\", SystemName = \"\")\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"MSFT_NetNeighbor (Name = \";:8:8:8???55@55;\", CreationClassName = \"\", SystemCreationClassName = \"\", SystemName = \"\")\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"MSFT_NetNeighbor (Name = \";:8:8:8@55@55;\", CreationClassName = \"\", SystemCreationClassName = \"\", SystemName = \"\")\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"MSFT_NetNeighbor (Name = \";:8:8:8?55@55;\", CreationClassName = \"\", SystemCreationClassName = \"\", SystemName = \"\")\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"MSFT_NetNeighbor (Name = \";:8:8:8;55@55;\", CreationClassName = \"\", SystemCreationClassName = \"\", SystemName = \"\")\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"MSFT_NetNeighbor (Name = \"??C8???8???8??:55;55;\", CreationClassName = \"\", SystemCreationClassName = \"\", SystemName = \"\")\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"MSFT_NetNeighbor (Name = \"???8:8:8??55;55;\", CreationClassName = \"\", SystemCreationClassName = \"\", SystemName = \"\")\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 08a20d3f-559d-4e13-aa36-d072c8224dd8\n        Host Application = powershell.exe -Command Get-NetNeighbor\n        Engine Version = 5.1.20348.3932\n        Runspace ID = 330567f1-a99e-439d-8d25-0d7203a495c9\n        Pipeline ID = 1\n        Command Name = \n        Command Type = Script\n        Script Name = \n        Command Path = \n        Sequence Number = 150\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:25:05.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:58073",
    "_indextime": "1754501106",
    "_serial": "1",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "59",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:25:05 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=744\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Get-NetNeighbor): \"Get-NetNeighbor\"\nParameterBinding(Get-NetNeighbor): name=\"PolicyStore\"; value=\"\"\nParameterBinding(Get-NetNeighbor): name=\"IncludeAllCompartments\"; value=\"False\"\nParameterBinding(Get-NetNeighbor): name=\"ThrottleLimit\"; value=\"0\"\nParameterBinding(Get-NetNeighbor): name=\"AsJob\"; value=\"False\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 08a20d3f-559d-4e13-aa36-d072c8224dd8\n        Host Application = powershell.exe -Command Get-NetNeighbor\n        Engine Version = 5.1.20348.3932\n        Runspace ID = 330567f1-a99e-439d-8d25-0d7203a495c9\n        Pipeline ID = 1\n        Command Name = Get-NetNeighbor\n        Command Type = Function\n        Script Name = \n        Command Path = \n        Sequence Number = 148\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:25:05.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:58028",
    "_indextime": "1754501105",
    "_serial": "2",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "41",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:25:05 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4104\nEventType=5\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Verbose\nRecordNumber=743\nKeywords=None\nTaskCategory=Execute a Remote Command\nOpCode=On create calls\nMessage=Creating Scriptblock text (1 of 1):\nfunction __cmdletization_BindCommonParameters\n{\n    param(\n        $__cmdletization_objectModelWrapper,\n        $myPSBoundParameters\n    )       \n                \n\n        if ($myPSBoundParameters.ContainsKey('CimSession')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('AsJob')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] \n        }\n                    \n\n}\n\nScriptBlock ID: cda3bf11-597c-4d01-9d25-2bb41708072e\nPath:",
    "_time": "2025-08-06T17:25:05.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:57985",
    "_indextime": "1754501105",
    "_serial": "3",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "42",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:25:05 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=742\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"TNC\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Test-NetConnection\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 08a20d3f-559d-4e13-aa36-d072c8224dd8\n        Host Application = powershell.exe -Command Get-NetNeighbor\n        Engine Version = 5.1.20348.3932\n        Runspace ID = 330567f1-a99e-439d-8d25-0d7203a495c9\n        Pipeline ID = 20\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = C:\\Windows\\system32\\WindowsPowerShell\\v1.0\\Modules\\NetTCPIP\\Test-NetConnection.psm1\n        Command Path = \n        Sequence Number = 146\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:25:05.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:57941",
    "_indextime": "1754501105",
    "_serial": "4",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "39",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:25:05 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=741\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(New-Alias): \"New-Alias\"\nParameterBinding(New-Alias): name=\"Name\"; value=\"TNC\"\nParameterBinding(New-Alias): name=\"Value\"; value=\"Test-NetConnection\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 08a20d3f-559d-4e13-aa36-d072c8224dd8\n        Host Application = powershell.exe -Command Get-NetNeighbor\n        Engine Version = 5.1.20348.3932\n        Runspace ID = 330567f1-a99e-439d-8d25-0d7203a495c9\n        Pipeline ID = 20\n        Command Name = New-Alias\n        Command Type = Cmdlet\n        Script Name = C:\\Windows\\system32\\WindowsPowerShell\\v1.0\\Modules\\NetTCPIP\\Test-NetConnection.psm1\n        Command Path = \n        Sequence Number = 144\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:25:05.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:57899",
    "_indextime": "1754501105",
    "_serial": "5",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "39",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:25:05 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=740\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"gip\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Get-NetIPConfiguration\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 08a20d3f-559d-4e13-aa36-d072c8224dd8\n        Host Application = powershell.exe -Command Get-NetNeighbor\n        Engine Version = 5.1.20348.3932\n        Runspace ID = 330567f1-a99e-439d-8d25-0d7203a495c9\n        Pipeline ID = 20\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = C:\\Windows\\system32\\WindowsPowerShell\\v1.0\\Modules\\NetTCPIP\\NetIPConfiguration.psm1\n        Command Path = \n        Sequence Number = 142\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:25:05.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:57855",
    "_indextime": "1754501105",
    "_serial": "6",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "39",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:25:05 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=739\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(New-Alias): \"New-Alias\"\nParameterBinding(New-Alias): name=\"Name\"; value=\"gip\"\nParameterBinding(New-Alias): name=\"Value\"; value=\"Get-NetIPConfiguration\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 08a20d3f-559d-4e13-aa36-d072c8224dd8\n        Host Application = powershell.exe -Command Get-NetNeighbor\n        Engine Version = 5.1.20348.3932\n        Runspace ID = 330567f1-a99e-439d-8d25-0d7203a495c9\n        Pipeline ID = 20\n        Command Name = New-Alias\n        Command Type = Cmdlet\n        Script Name = C:\\Windows\\system32\\WindowsPowerShell\\v1.0\\Modules\\NetTCPIP\\NetIPConfiguration.psm1\n        Command Path = \n        Sequence Number = 140\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:25:05.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:57813",
    "_indextime": "1754501105",
    "_serial": "7",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "39",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:25:05 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=738\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Set-NetUDPSetting\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 08a20d3f-559d-4e13-aa36-d072c8224dd8\n        Host Application = powershell.exe -Command Get-NetNeighbor\n        Engine Version = 5.1.20348.3932\n        Runspace ID = 330567f1-a99e-439d-8d25-0d7203a495c9\n        Pipeline ID = 20\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 138\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:25:05.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:57772",
    "_indextime": "1754501105",
    "_serial": "8",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "39",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:25:05 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=737\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Get-NetUDPSetting\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 08a20d3f-559d-4e13-aa36-d072c8224dd8\n        Host Application = powershell.exe -Command Get-NetNeighbor\n        Engine Version = 5.1.20348.3932\n        Runspace ID = 330567f1-a99e-439d-8d25-0d7203a495c9\n        Pipeline ID = 20\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 136\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:25:05.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:57731",
    "_indextime": "1754501105",
    "_serial": "9",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "39",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:25:05 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=736\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 08a20d3f-559d-4e13-aa36-d072c8224dd8\n        Host Application = powershell.exe -Command Get-NetNeighbor\n        Engine Version = 5.1.20348.3932\n        Runspace ID = 330567f1-a99e-439d-8d25-0d7203a495c9\n        Pipeline ID = 20\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 134\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:25:05.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:57693",
    "_indextime": "1754501105",
    "_serial": "10",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "38",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:25:05 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=735\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Set-StrictMode): \"Set-StrictMode\"\nParameterBinding(Set-StrictMode): name=\"Off\"; value=\"True\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 08a20d3f-559d-4e13-aa36-d072c8224dd8\n        Host Application = powershell.exe -Command Get-NetNeighbor\n        Engine Version = 5.1.20348.3932\n        Runspace ID = 330567f1-a99e-439d-8d25-0d7203a495c9\n        Pipeline ID = 20\n        Command Name = Set-StrictMode\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 132\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:25:05.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:57655",
    "_indextime": "1754501105",
    "_serial": "11",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "38",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:25:05 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4104\nEventType=3\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Warning\nRecordNumber=734\nKeywords=None\nTaskCategory=Execute a Remote Command\nOpCode=On create calls\nMessage=Splunk could not get the description for this event. Either the component that raises this event is not installed on your local computer or the installation is corrupt.\n\nFormatMessage error:\n\nGot the following information from this event: \n\n\n#requires -version 3.0\n\ntry { Microsoft.PowerShell.Core\\Set-StrictMode -Off } catch { }\n\n$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module\n\n$script:ClassName = 'ROOT/StandardCimv2/MSFT_NetUDPSetting'\n$script:ClassVersion = '1.0.0'\n$script:ModuleVersion = '1.0.0'\n$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]\n\n$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()\n\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function @()\n        \n\nfunction __cmdletization_BindCommonParameters\n{\n    param(\n        $__cmdletization_objectModelWrapper,\n        $myPSBoundParameters\n    )       \n                \n\n        if ($myPSBoundParameters.ContainsKey('CimSession')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('AsJob')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] \n        }\n                    \n\n}\n                \n\nfunction Get-NetUDPSetting\n{\n    [CmdletBinding(DefaultParameterSetName='ByName', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/StandardCimv2/MSFT_NetUDPSetting')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByName', Position=0)]\n    [ValidateNotNull()]\n    [uint16[]]\n    ${DynamicPortRangeStartPort},\n\n    [Parameter(ParameterSetName='ByName', Position=1)]\n    [ValidateNotNull()]\n    [uint16[]]\n    ${DynamicPortRangeNumberOfPorts},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [switch]\n    ${AsJob})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('DynamicPortRangeStartPort') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DynamicPortRangeStartPort})\n        $__cmdletization_queryBuilder.FilterByProperty('DynamicPortRangeStartPort', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DynamicPortRangeNumberOfPorts') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DynamicPortRangeNumberOfPorts})\n        $__cmdletization_queryBuilder.FilterByProperty('DynamicPortRangeNumberOfPorts', $__cmdletization_values, $false, 'Default')\n    }\n\n\n    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP MSFT_NetUDPSetting.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Get-NetUDPSetting' -Alias '*'\n        \n\nfunction Set-NetUDPSetting\n{\n    [CmdletBinding(DefaultParameterSetName='InputObject (cdxml)', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/StandardCimv2/MSFT_NetUDPSetting')]\n\n    param(\n    \n    [Parameter(ParameterSetName='InputObject (cdxml)', ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetUDPSetting')]\n    [ValidateNotNull()]\n    [ciminstance[]]\n    ${InputObject},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [uint16]\n    ${DynamicPortRangeStartPort},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [uint16]\n    ${DynamicPortRangeNumberOfPorts},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${AsJob},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${PassThru})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n\n\n    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n    switch -exact ($PSCmdlet.ParameterSetName) { \n        { @('InputObject (cdxml)') -contains $_ } {\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('DynamicPortRangeStartPort')) {\n            [object]$__cmdletization_value = ${DynamicPortRangeStartPort}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DynamicPortRangeStartPort'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DynamicPortRangeStartPort'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('DynamicPortRangeNumberOfPorts')) {\n            [object]$__cmdletization_value = ${DynamicPortRangeNumberOfPorts}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DynamicPortRangeNumberOfPorts'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DynamicPortRangeNumberOfPorts'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n      $__cmdletization_returnValue = $null\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:ModifyInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru\n            if ($PSBoundParameters.ContainsKey('InputObject')) {\n                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }\n            } else {\n                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)\n            }\n        }\n    }\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP MSFT_NetUDPSetting.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Set-NetUDPSetting' -Alias '*'\n        \n\neee145cc-6cf9-42b6-80aa-a3747e3b78ec",
    "_time": "2025-08-06T17:25:05.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:57282",
    "_indextime": "1754501105",
    "_serial": "12",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "327",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:25:05 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=733\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Get-NetUDPEndpoint\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 08a20d3f-559d-4e13-aa36-d072c8224dd8\n        Host Application = powershell.exe -Command Get-NetNeighbor\n        Engine Version = 5.1.20348.3932\n        Runspace ID = 330567f1-a99e-439d-8d25-0d7203a495c9\n        Pipeline ID = 20\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 130\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:25:05.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:57241",
    "_indextime": "1754501105",
    "_serial": "13",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "39",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:25:05 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=732\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 08a20d3f-559d-4e13-aa36-d072c8224dd8\n        Host Application = powershell.exe -Command Get-NetNeighbor\n        Engine Version = 5.1.20348.3932\n        Runspace ID = 330567f1-a99e-439d-8d25-0d7203a495c9\n        Pipeline ID = 20\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 128\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:25:05.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:57203",
    "_indextime": "1754501105",
    "_serial": "14",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "38",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:25:05 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=731\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Set-StrictMode): \"Set-StrictMode\"\nParameterBinding(Set-StrictMode): name=\"Off\"; value=\"True\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 08a20d3f-559d-4e13-aa36-d072c8224dd8\n        Host Application = powershell.exe -Command Get-NetNeighbor\n        Engine Version = 5.1.20348.3932\n        Runspace ID = 330567f1-a99e-439d-8d25-0d7203a495c9\n        Pipeline ID = 20\n        Command Name = Set-StrictMode\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 126\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:25:05.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:57165",
    "_indextime": "1754501105",
    "_serial": "15",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "38",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:25:05 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4104\nEventType=3\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Warning\nRecordNumber=730\nKeywords=None\nTaskCategory=Execute a Remote Command\nOpCode=On create calls\nMessage=Creating Scriptblock text (1 of 1):\n\n#requires -version 3.0\n\ntry { Microsoft.PowerShell.Core\\Set-StrictMode -Off } catch { }\n\n$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module\n\n$script:ClassName = 'ROOT/StandardCimv2/MSFT_NetUDPEndpoint'\n$script:ClassVersion = '1.0.0'\n$script:ModuleVersion = '1.0.0'\n$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]\n\n$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()\n\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function @()\n        \n\nfunction __cmdletization_BindCommonParameters\n{\n    param(\n        $__cmdletization_objectModelWrapper,\n        $myPSBoundParameters\n    )       \n                \n\n        if ($myPSBoundParameters.ContainsKey('CimSession')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('AsJob')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] \n        }\n                    \n\n}\n                \n\nfunction Get-NetUDPEndpoint\n{\n    [CmdletBinding(DefaultParameterSetName='ByName', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/StandardCimv2/MSFT_NetUDPEndpoint')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByName', Position=0, ValueFromPipelineByPropertyName=$true)]\n    [Alias('IPAddress')]\n    [ValidateNotNull()]\n    [string[]]\n    ${LocalAddress},\n\n    [Parameter(ParameterSetName='ByName', Position=1)]\n    [ValidateNotNull()]\n    [uint16[]]\n    ${LocalPort},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${OwningProcess},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [datetime[]]\n    ${CreationTime},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [switch]\n    ${AsJob})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('LocalAddress') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${LocalAddress})\n        $__cmdletization_queryBuilder.FilterByProperty('LocalAddress', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('LocalPort') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${LocalPort})\n        $__cmdletization_queryBuilder.FilterByProperty('LocalPort', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('OwningProcess') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${OwningProcess})\n        $__cmdletization_queryBuilder.FilterByProperty('OwningProcess', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('CreationTime') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${CreationTime})\n        $__cmdletization_queryBuilder.FilterByProperty('CreationTime', $__cmdletization_values, $false, 'Default')\n    }\n\n\n    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP MSFT_NetUDPEndpoint.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Get-NetUDPEndpoint' -Alias '*'\n        \n\n\nScriptBlock ID: c91b2599-6d28-4cab-bf20-5a7625398b6e\nPath:",
    "_time": "2025-08-06T17:25:05.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:56967",
    "_indextime": "1754501105",
    "_serial": "16",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "195",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:25:05 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=729\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Remove-NetTransportFilter\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 08a20d3f-559d-4e13-aa36-d072c8224dd8\n        Host Application = powershell.exe -Command Get-NetNeighbor\n        Engine Version = 5.1.20348.3932\n        Runspace ID = 330567f1-a99e-439d-8d25-0d7203a495c9\n        Pipeline ID = 20\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 124\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:25:05.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:56926",
    "_indextime": "1754501105",
    "_serial": "17",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "39",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:25:05 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=728\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Get-NetTransportFilter\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 08a20d3f-559d-4e13-aa36-d072c8224dd8\n        Host Application = powershell.exe -Command Get-NetNeighbor\n        Engine Version = 5.1.20348.3932\n        Runspace ID = 330567f1-a99e-439d-8d25-0d7203a495c9\n        Pipeline ID = 20\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 122\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:25:05.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:56885",
    "_indextime": "1754501105",
    "_serial": "18",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "39",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:25:05 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=727\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"New-NetTransportFilter\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 08a20d3f-559d-4e13-aa36-d072c8224dd8\n        Host Application = powershell.exe -Command Get-NetNeighbor\n        Engine Version = 5.1.20348.3932\n        Runspace ID = 330567f1-a99e-439d-8d25-0d7203a495c9\n        Pipeline ID = 20\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 120\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:25:05.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:56844",
    "_indextime": "1754501105",
    "_serial": "19",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "39",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:25:05 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=726\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 08a20d3f-559d-4e13-aa36-d072c8224dd8\n        Host Application = powershell.exe -Command Get-NetNeighbor\n        Engine Version = 5.1.20348.3932\n        Runspace ID = 330567f1-a99e-439d-8d25-0d7203a495c9\n        Pipeline ID = 20\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 118\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:25:05.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:56806",
    "_indextime": "1754501105",
    "_serial": "20",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "38",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:25:05 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=725\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Set-StrictMode): \"Set-StrictMode\"\nParameterBinding(Set-StrictMode): name=\"Off\"; value=\"True\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 08a20d3f-559d-4e13-aa36-d072c8224dd8\n        Host Application = powershell.exe -Command Get-NetNeighbor\n        Engine Version = 5.1.20348.3932\n        Runspace ID = 330567f1-a99e-439d-8d25-0d7203a495c9\n        Pipeline ID = 20\n        Command Name = Set-StrictMode\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 116\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:25:05.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:56768",
    "_indextime": "1754501105",
    "_serial": "21",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "38",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:25:05 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4104\nEventType=3\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Warning\nRecordNumber=724\nKeywords=None\nTaskCategory=Execute a Remote Command\nOpCode=On create calls\nMessage=Creating Scriptblock text (2 of 2):\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${AsJob},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${PassThru})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('SettingName') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${SettingName})\n        $__cmdletization_queryBuilder.FilterByProperty('SettingName', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Protocol') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Protocol})\n        $__cmdletization_queryBuilder.FilterByProperty('Protocol', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('LocalPortStart') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${LocalPortStart})\n        $__cmdletization_queryBuilder.FilterByProperty('LocalPortStart', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('LocalPortEnd') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${LocalPortEnd})\n        $__cmdletization_queryBuilder.FilterByProperty('LocalPortEnd', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('RemotePortStart') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${RemotePortStart})\n        $__cmdletization_queryBuilder.FilterByProperty('RemotePortStart', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('RemotePortEnd') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${RemotePortEnd})\n        $__cmdletization_queryBuilder.FilterByProperty('RemotePortEnd', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DestinationPrefix') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DestinationPrefix})\n        $__cmdletization_queryBuilder.FilterByProperty('DestinationPrefix', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedTCPSetting') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedTCPSetting}, 'MSFT_NetTransportFilterTCPSetting', 'Dependent', 'Antecedent', 'Default')\n    }\n\n\n    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n    switch -exact ($PSCmdlet.ParameterSetName) { \n        { @('ByName', 'InputObject (cdxml)') -contains $_ } {\n      $__cmdletization_returnValue = $null\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:DeleteInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru\n            if ($PSBoundParameters.ContainsKey('InputObject')) {\n                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }\n            } else {\n                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)\n            }\n        }\n    }\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP MSFT_NetTransportFilter.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Remove-NetTransportFilter' -Alias '*'\n        \n\n\nScriptBlock ID: 618380ba-f555-4d13-8775-a1f59982521c\nPath:",
    "_time": "2025-08-06T17:25:05.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:56572",
    "_indextime": "1754501105",
    "_serial": "22",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "149",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:25:05 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4104\nEventType=3\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Warning\nRecordNumber=723\nKeywords=None\nTaskCategory=Execute a Remote Command\nOpCode=On create calls\nMessage=Splunk could not get the description for this event. Either the component that raises this event is not installed on your local computer or the installation is corrupt.\n\nFormatMessage error:\n\nGot the following information from this event: \n\n\n#requires -version 3.0\n\ntry { Microsoft.PowerShell.Core\\Set-StrictMode -Off } catch { }\n\n$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module\n\n$script:ClassName = 'ROOT/StandardCimv2/MSFT_NetTransportFilter'\n$script:ClassVersion = '1.0.0'\n$script:ModuleVersion = '1.0.0'\n$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]\n\n$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()\n\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function @()\n        \n\nfunction __cmdletization_BindCommonParameters\n{\n    param(\n        $__cmdletization_objectModelWrapper,\n        $myPSBoundParameters\n    )       \n                \n\n        if ($myPSBoundParameters.ContainsKey('CimSession')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('AsJob')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] \n        }\n                    \n\n}\n                \n\nfunction New-NetTransportFilter\n{\n    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]\n    \n    \n    param(\n    \n    [Parameter(ParameterSetName='cim:CreateInstance0', Mandatory=$true)]\n    [string]\n    ${SettingName},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTransportFilter.Protocol]\n    ${Protocol},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [uint16]\n    ${LocalPortStart},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [uint16]\n    ${LocalPortEnd},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [uint16]\n    ${RemotePortStart},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [uint16]\n    ${RemotePortEnd},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [string]\n    ${DestinationPrefix},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='cim:CreateInstance0')]\n    [switch]\n    ${AsJob})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n      $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('SettingName')) {\n          [object]$__cmdletization_value = ${SettingName}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SettingName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SettingName'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('Protocol')) {\n          [object]$__cmdletization_value = ${Protocol}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Protocol'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTransportFilter.Protocol'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Protocol'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTransportFilter.Protocol'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('LocalPortStart')) {\n          [object]$__cmdletization_value = ${LocalPortStart}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LocalPortStart'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LocalPortStart'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('LocalPortEnd')) {\n          [object]$__cmdletization_value = ${LocalPortEnd}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LocalPortEnd'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LocalPortEnd'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('RemotePortStart')) {\n          [object]$__cmdletization_value = ${RemotePortStart}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemotePortStart'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemotePortStart'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('RemotePortEnd')) {\n          [object]$__cmdletization_value = ${RemotePortEnd}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemotePortEnd'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemotePortEnd'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('DestinationPrefix')) {\n          [object]$__cmdletization_value = ${DestinationPrefix}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DestinationPrefix'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DestinationPrefix'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.Int32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:CreateInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo)\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP MSFT_NetTransportFilter.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'New-NetTransportFilter' -Alias '*'\n        \n\nfunction Get-NetTransportFilter\n{\n    [CmdletBinding(PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/StandardCimv2/MSFT_NetTransportFilter')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [string[]]\n    ${SettingName},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTransportFilter.Protocol[]]\n    ${Protocol},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [uint16[]]\n    ${LocalPortStart},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [uint16[]]\n    ${LocalPortEnd},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [uint16[]]\n    ${RemotePortStart},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [uint16[]]\n    ${RemotePortEnd},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [string[]]\n    ${DestinationPrefix},\n\n    [Parameter(ParameterSetName='ByName', ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetTCPSetting')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedTCPSetting},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [switch]\n    ${AsJob})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('SettingName') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${SettingName})\n        $__cmdletization_queryBuilder.FilterByProperty('SettingName', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Protocol') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Protocol})\n        $__cmdletization_queryBuilder.FilterByProperty('Protocol', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('LocalPortStart') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${LocalPortStart})\n        $__cmdletization_queryBuilder.FilterByProperty('LocalPortStart', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('LocalPortEnd') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${LocalPortEnd})\n        $__cmdletization_queryBuilder.FilterByProperty('LocalPortEnd', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('RemotePortStart') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${RemotePortStart})\n        $__cmdletization_queryBuilder.FilterByProperty('RemotePortStart', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('RemotePortEnd') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${RemotePortEnd})\n        $__cmdletization_queryBuilder.FilterByProperty('RemotePortEnd', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DestinationPrefix') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DestinationPrefix})\n        $__cmdletization_queryBuilder.FilterByProperty('DestinationPrefix', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedTCPSetting') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedTCPSetting}, 'MSFT_NetTransportFilterTCPSetting', 'Dependent', 'Antecedent', 'Default')\n    }\n\n\n    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP MSFT_NetTransportFilter.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Get-NetTransportFilter' -Alias '*'\n        \n\nfunction Remove-NetTransportFilter\n{\n    [CmdletBinding(SupportsShouldProcess=$true, ConfirmImpact='High', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/StandardCimv2/MSFT_NetTransportFilter')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [string[]]\n    ${SettingName},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTransportFilter.Protocol[]]\n    ${Protocol},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [uint16[]]\n    ${LocalPortStart},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [uint16[]]\n    ${LocalPortEnd},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [uint16[]]\n    ${RemotePortStart},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [uint16[]]\n    ${RemotePortEnd},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [string[]]\n    ${DestinationPrefix},\n\n    [Parameter(ParameterSetName='ByName', ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetTCPSetting')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedTCPSetting},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetTransportFilter')]\n    [ValidateNotNull()]\n    [ciminstance[]]\n    ${InputObject},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n\n618380ba-f555-4d13-8775-a1f59982521c",
    "_time": "2025-08-06T17:25:05.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:55940",
    "_indextime": "1754501105",
    "_serial": "23",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "494",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:25:05 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=722\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Set-NetTCPSetting\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 08a20d3f-559d-4e13-aa36-d072c8224dd8\n        Host Application = powershell.exe -Command Get-NetNeighbor\n        Engine Version = 5.1.20348.3932\n        Runspace ID = 330567f1-a99e-439d-8d25-0d7203a495c9\n        Pipeline ID = 20\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 114\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:25:05.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:55899",
    "_indextime": "1754501105",
    "_serial": "24",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "39",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:25:05 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=721\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Get-NetTCPSetting\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 08a20d3f-559d-4e13-aa36-d072c8224dd8\n        Host Application = powershell.exe -Command Get-NetNeighbor\n        Engine Version = 5.1.20348.3932\n        Runspace ID = 330567f1-a99e-439d-8d25-0d7203a495c9\n        Pipeline ID = 20\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 112\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:25:05.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:55858",
    "_indextime": "1754501105",
    "_serial": "25",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "39",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:25:05 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=720\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 08a20d3f-559d-4e13-aa36-d072c8224dd8\n        Host Application = powershell.exe -Command Get-NetNeighbor\n        Engine Version = 5.1.20348.3932\n        Runspace ID = 330567f1-a99e-439d-8d25-0d7203a495c9\n        Pipeline ID = 20\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 110\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:25:05.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:55820",
    "_indextime": "1754501105",
    "_serial": "26",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "38",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:25:05 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=719\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Set-StrictMode): \"Set-StrictMode\"\nParameterBinding(Set-StrictMode): name=\"Off\"; value=\"True\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 08a20d3f-559d-4e13-aa36-d072c8224dd8\n        Host Application = powershell.exe -Command Get-NetNeighbor\n        Engine Version = 5.1.20348.3932\n        Runspace ID = 330567f1-a99e-439d-8d25-0d7203a495c9\n        Pipeline ID = 20\n        Command Name = Set-StrictMode\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 108\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:25:05.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:55782",
    "_indextime": "1754501105",
    "_serial": "27",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "38",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:25:05 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4104\nEventType=3\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Warning\nRecordNumber=718\nKeywords=None\nTaskCategory=Execute a Remote Command\nOpCode=On create calls\nMessage=Splunk could not get the description for this event. Either the component that raises this event is not installed on your local computer or the installation is corrupt.\n\nFormatMessage error:\n\nGot the following information from this event: \n\nistics}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScalingHeuristics'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.ScalingHeuristics'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ScalingHeuristics'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.ScalingHeuristics'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('DynamicPortRangeStartPort')) {\n            [object]$__cmdletization_value = ${DynamicPortRangeStartPort}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DynamicPortRangeStartPort'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DynamicPortRangeStartPort'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('DynamicPortRangeNumberOfPorts')) {\n            [object]$__cmdletization_value = ${DynamicPortRangeNumberOfPorts}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DynamicPortRangeNumberOfPorts'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DynamicPortRangeNumberOfPorts'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('AutomaticUseCustom')) {\n            [object]$__cmdletization_value = ${AutomaticUseCustom}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AutomaticUseCustom'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.AutomaticUseCustom'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AutomaticUseCustom'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.AutomaticUseCustom'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('NonSackRttResiliency')) {\n            [object]$__cmdletization_value = ${NonSackRttResiliency}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NonSackRttResiliency'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.NonSackRttResiliency'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NonSackRttResiliency'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.NonSackRttResiliency'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('ForceWS')) {\n            [object]$__cmdletization_value = ${ForceWS}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ForceWS'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.ForceWS'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ForceWS'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.ForceWS'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('MaxSynRetransmissions')) {\n            [object]$__cmdletization_value = ${MaxSynRetransmissions}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MaxSynRetransmissions'; ParameterType = 'System.Byte'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MaxSynRetransmissions'; ParameterType = 'System.Byte'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('AutoReusePortRangeStartPort')) {\n            [object]$__cmdletization_value = ${AutoReusePortRangeStartPort}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AutoReusePortRangeStartPort'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AutoReusePortRangeStartPort'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('AutoReusePortRangeNumberOfPorts')) {\n            [object]$__cmdletization_value = ${AutoReusePortRangeNumberOfPorts}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AutoReusePortRangeNumberOfPorts'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AutoReusePortRangeNumberOfPorts'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n      $__cmdletization_returnValue = $null\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:ModifyInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru\n            if ($PSBoundParameters.ContainsKey('InputObject')) {\n                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }\n            } else {\n                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)\n            }\n        }\n    }\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP MSFT_NetTCPSetting.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Set-NetTCPSetting' -Alias '*'\n        \n\nd7b4bbca-6af6-4abb-8b64-e67c826eae66",
    "_time": "2025-08-06T17:25:05.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:55453",
    "_indextime": "1754501105",
    "_serial": "28",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "148",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:25:05 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4104\nEventType=3\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Warning\nRecordNumber=717\nKeywords=None\nTaskCategory=Execute a Remote Command\nOpCode=On create calls\nMessage=Splunk could not get the description for this event. Either the component that raises this event is not installed on your local computer or the installation is corrupt.\n\nFormatMessage error:\n\nGot the following information from this event: \n\netization_queryBuilder.FilterByProperty('SettingName', $__cmdletization_values, $true, 'Default')\n    }\n\n\n    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n    switch -exact ($PSCmdlet.ParameterSetName) { \n        { @('ByName', 'InputObject (cdxml)') -contains $_ } {\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('MinRtoMs')) {\n            [object]$__cmdletization_value = ${MinRtoMs}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MinRto'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MinRto'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('InitialCongestionWindowMss')) {\n            [object]$__cmdletization_value = ${InitialCongestionWindowMss}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InitialCongestionWindow'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InitialCongestionWindow'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('CongestionProvider')) {\n            [object]$__cmdletization_value = ${CongestionProvider}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'CongestionProvider'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.CongestionProvider'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'CongestionProvider'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.CongestionProvider'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('CwndRestart')) {\n            [object]$__cmdletization_value = ${CwndRestart}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'CwndRestart'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.CwndRestart'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'CwndRestart'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.CwndRestart'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('DelayedAckTimeoutMs')) {\n            [object]$__cmdletization_value = ${DelayedAckTimeoutMs}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DelayedAckTimeout'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DelayedAckTimeout'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('DelayedAckFrequency')) {\n            [object]$__cmdletization_value = ${DelayedAckFrequency}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DelayedAckFrequency'; ParameterType = 'System.Byte'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DelayedAckFrequency'; ParameterType = 'System.Byte'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('MemoryPressureProtection')) {\n            [object]$__cmdletization_value = ${MemoryPressureProtection}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MemoryPressureProtection'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.MemoryPressureProtection'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MemoryPressureProtection'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.MemoryPressureProtection'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('AutoTuningLevelLocal')) {\n            [object]$__cmdletization_value = ${AutoTuningLevelLocal}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AutoTuningLevelLocal'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.AutoTuningLevelLocal'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AutoTuningLevelLocal'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.AutoTuningLevelLocal'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('EcnCapability')) {\n            [object]$__cmdletization_value = ${EcnCapability}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EcnCapability'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.EcnCapability'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EcnCapability'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.EcnCapability'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('Timestamps')) {\n            [object]$__cmdletization_value = ${Timestamps}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Timestamps'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.Timestamps'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Timestamps'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.Timestamps'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('InitialRtoMs')) {\n            [object]$__cmdletization_value = ${InitialRtoMs}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InitialRto'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InitialRto'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('ScalingHeuristics')) {\n            [object]$__cmdletization_value = ${ScalingHeur\nd7b4bbca-6af6-4abb-8b64-e67c826eae66",
    "_time": "2025-08-06T17:25:05.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:55082",
    "_indextime": "1754501105",
    "_serial": "29",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "142",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:25:05 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4104\nEventType=3\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Warning\nRecordNumber=716\nKeywords=None\nTaskCategory=Execute a Remote Command\nOpCode=On create calls\nMessage=Splunk could not get the description for this event. Either the component that raises this event is not installed on your local computer or the installation is corrupt.\n\nFormatMessage error:\n\nGot the following information from this event: \n\n.ContainsKey('Timestamps') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Timestamps})\n        $__cmdletization_queryBuilder.FilterByProperty('Timestamps', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('InitialRtoMs') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${InitialRtoMs})\n        $__cmdletization_queryBuilder.FilterByProperty('InitialRto', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('ScalingHeuristics') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${ScalingHeuristics})\n        $__cmdletization_queryBuilder.FilterByProperty('ScalingHeuristics', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DynamicPortRangeStartPort') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DynamicPortRangeStartPort})\n        $__cmdletization_queryBuilder.FilterByProperty('DynamicPortRangeStartPort', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DynamicPortRangeNumberOfPorts') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DynamicPortRangeNumberOfPorts})\n        $__cmdletization_queryBuilder.FilterByProperty('DynamicPortRangeNumberOfPorts', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AutomaticUseCustom') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${AutomaticUseCustom})\n        $__cmdletization_queryBuilder.FilterByProperty('AutomaticUseCustom', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('NonSackRttResiliency') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${NonSackRttResiliency})\n        $__cmdletization_queryBuilder.FilterByProperty('NonSackRttResiliency', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('ForceWS') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${ForceWS})\n        $__cmdletization_queryBuilder.FilterByProperty('ForceWS', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('MaxSynRetransmissions') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${MaxSynRetransmissions})\n        $__cmdletization_queryBuilder.FilterByProperty('MaxSynRetransmissions', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AutoReusePortRangeStartPort') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${AutoReusePortRangeStartPort})\n        $__cmdletization_queryBuilder.FilterByProperty('AutoReusePortRangeStartPort', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AutoReusePortRangeNumberOfPorts') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${AutoReusePortRangeNumberOfPorts})\n        $__cmdletization_queryBuilder.FilterByProperty('AutoReusePortRangeNumberOfPorts', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedTransportFilter') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedTransportFilter}, 'MSFT_NetTransportFilterTCPSetting', 'Antecedent', 'Dependent', 'Default')\n    }\n\n\n    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP MSFT_NetTCPSetting.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Get-NetTCPSetting' -Alias '*'\n        \n\nfunction Set-NetTCPSetting\n{\n    [CmdletBinding(DefaultParameterSetName='ByName', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/StandardCimv2/MSFT_NetTCPSetting')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByName', Position=0)]\n    [ValidateNotNull()]\n    [string[]]\n    ${SettingName},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetTCPSetting')]\n    [ValidateNotNull()]\n    [ciminstance[]]\n    ${InputObject},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('MinRto')]\n    [uint32]\n    ${MinRtoMs},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('InitialCongestionWindow')]\n    [uint32]\n    ${InitialCongestionWindowMss},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.CongestionProvider]\n    ${CongestionProvider},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.CwndRestart]\n    ${CwndRestart},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('DelayedAckTimeout')]\n    [uint32]\n    ${DelayedAckTimeoutMs},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [byte]\n    ${DelayedAckFrequency},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.MemoryPressureProtection]\n    ${MemoryPressureProtection},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.AutoTuningLevelLocal]\n    ${AutoTuningLevelLocal},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.EcnCapability]\n    ${EcnCapability},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.Timestamps]\n    ${Timestamps},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('InitialRto')]\n    [uint32]\n    ${InitialRtoMs},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.ScalingHeuristics]\n    ${ScalingHeuristics},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [uint16]\n    ${DynamicPortRangeStartPort},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [uint16]\n    ${DynamicPortRangeNumberOfPorts},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.AutomaticUseCustom]\n    ${AutomaticUseCustom},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.NonSackRttResiliency]\n    ${NonSackRttResiliency},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.ForceWS]\n    ${ForceWS},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [byte]\n    ${MaxSynRetransmissions},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [uint16]\n    ${AutoReusePortRangeStartPort},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [uint16]\n    ${AutoReusePortRangeNumberOfPorts},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${AsJob},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${PassThru})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('SettingName') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${SettingName})\n        $__cmdl\nd7b4bbca-6af6-4abb-8b64-e67c826eae66",
    "_time": "2025-08-06T17:25:05.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:54711",
    "_indextime": "1754501105",
    "_serial": "30",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "291",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:25:05 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4104\nEventType=3\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Warning\nRecordNumber=715\nKeywords=None\nTaskCategory=Execute a Remote Command\nOpCode=On create calls\nMessage=Splunk could not get the description for this event. Either the component that raises this event is not installed on your local computer or the installation is corrupt.\n\nFormatMessage error:\n\nGot the following information from this event: \n\n\n#requires -version 3.0\n\ntry { Microsoft.PowerShell.Core\\Set-StrictMode -Off } catch { }\n\n$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module\n\n$script:ClassName = 'ROOT/StandardCimv2/MSFT_NetTCPSetting'\n$script:ClassVersion = '1.0.0'\n$script:ModuleVersion = '1.0.0'\n$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]\n\n$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()\n\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function @()\n        \n\nfunction __cmdletization_BindCommonParameters\n{\n    param(\n        $__cmdletization_objectModelWrapper,\n        $myPSBoundParameters\n    )       \n                \n\n        if ($myPSBoundParameters.ContainsKey('CimSession')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('AsJob')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] \n        }\n                    \n\n}\n                \n\nfunction Get-NetTCPSetting\n{\n    [CmdletBinding(DefaultParameterSetName='ByName', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/StandardCimv2/MSFT_NetTCPSetting')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByName', Position=0)]\n    [ValidateNotNull()]\n    [string[]]\n    ${SettingName},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Alias('MinRto')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${MinRtoMs},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Alias('InitialCongestionWindow')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${InitialCongestionWindowMss},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.CongestionProvider[]]\n    ${CongestionProvider},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.CwndRestart[]]\n    ${CwndRestart},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Alias('DelayedAckTimeout')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${DelayedAckTimeoutMs},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [byte[]]\n    ${DelayedAckFrequency},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.MemoryPressureProtection[]]\n    ${MemoryPressureProtection},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.AutoTuningLevelLocal[]]\n    ${AutoTuningLevelLocal},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.AutoTuningLevelGroupPolicy[]]\n    ${AutoTuningLevelGroupPolicy},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.AutoTuningLevelEffective[]]\n    ${AutoTuningLevelEffective},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.EcnCapability[]]\n    ${EcnCapability},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.Timestamps[]]\n    ${Timestamps},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Alias('InitialRto')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${InitialRtoMs},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.ScalingHeuristics[]]\n    ${ScalingHeuristics},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [uint16[]]\n    ${DynamicPortRangeStartPort},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [uint16[]]\n    ${DynamicPortRangeNumberOfPorts},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.AutomaticUseCustom[]]\n    ${AutomaticUseCustom},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.NonSackRttResiliency[]]\n    ${NonSackRttResiliency},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPSetting.ForceWS[]]\n    ${ForceWS},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [byte[]]\n    ${MaxSynRetransmissions},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [uint16[]]\n    ${AutoReusePortRangeStartPort},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [uint16[]]\n    ${AutoReusePortRangeNumberOfPorts},\n\n    [Parameter(ParameterSetName='ByName', ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetTransportFilter')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedTransportFilter},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [switch]\n    ${AsJob})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('SettingName') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${SettingName})\n        $__cmdletization_queryBuilder.FilterByProperty('SettingName', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('MinRtoMs') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${MinRtoMs})\n        $__cmdletization_queryBuilder.FilterByProperty('MinRto', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('InitialCongestionWindowMss') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${InitialCongestionWindowMss})\n        $__cmdletization_queryBuilder.FilterByProperty('InitialCongestionWindow', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('CongestionProvider') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${CongestionProvider})\n        $__cmdletization_queryBuilder.FilterByProperty('CongestionProvider', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('CwndRestart') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${CwndRestart})\n        $__cmdletization_queryBuilder.FilterByProperty('CwndRestart', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DelayedAckTimeoutMs') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DelayedAckTimeoutMs})\n        $__cmdletization_queryBuilder.FilterByProperty('DelayedAckTimeout', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DelayedAckFrequency') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DelayedAckFrequency})\n        $__cmdletization_queryBuilder.FilterByProperty('DelayedAckFrequency', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('MemoryPressureProtection') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${MemoryPressureProtection})\n        $__cmdletization_queryBuilder.FilterByProperty('MemoryPressureProtection', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AutoTuningLevelLocal') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${AutoTuningLevelLocal})\n        $__cmdletization_queryBuilder.FilterByProperty('AutoTuningLevelLocal', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AutoTuningLevelGroupPolicy') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${AutoTuningLevelGroupPolicy})\n        $__cmdletization_queryBuilder.FilterByProperty('AutoTuningLevelGroupPolicy', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AutoTuningLevelEffective') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${AutoTuningLevelEffective})\n        $__cmdletization_queryBuilder.FilterByProperty('AutoTuningLevelEffective', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('EcnCapability') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${EcnCapability})\n        $__cmdletization_queryBuilder.FilterByProperty('EcnCapability', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters\nd7b4bbca-6af6-4abb-8b64-e67c826eae66",
    "_time": "2025-08-06T17:25:05.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:54340",
    "_indextime": "1754501105",
    "_serial": "31",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "303",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:25:05 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=714\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Get-NetTCPConnection\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 08a20d3f-559d-4e13-aa36-d072c8224dd8\n        Host Application = powershell.exe -Command Get-NetNeighbor\n        Engine Version = 5.1.20348.3932\n        Runspace ID = 330567f1-a99e-439d-8d25-0d7203a495c9\n        Pipeline ID = 20\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 106\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:25:05.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:54299",
    "_indextime": "1754501105",
    "_serial": "32",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "39",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:25:05 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=713\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 08a20d3f-559d-4e13-aa36-d072c8224dd8\n        Host Application = powershell.exe -Command Get-NetNeighbor\n        Engine Version = 5.1.20348.3932\n        Runspace ID = 330567f1-a99e-439d-8d25-0d7203a495c9\n        Pipeline ID = 20\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 104\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:25:05.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:54261",
    "_indextime": "1754501105",
    "_serial": "33",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "38",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:25:05 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=712\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Set-StrictMode): \"Set-StrictMode\"\nParameterBinding(Set-StrictMode): name=\"Off\"; value=\"True\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 08a20d3f-559d-4e13-aa36-d072c8224dd8\n        Host Application = powershell.exe -Command Get-NetNeighbor\n        Engine Version = 5.1.20348.3932\n        Runspace ID = 330567f1-a99e-439d-8d25-0d7203a495c9\n        Pipeline ID = 20\n        Command Name = Set-StrictMode\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 102\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:25:05.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:54223",
    "_indextime": "1754501105",
    "_serial": "34",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "38",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:25:05 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4104\nEventType=3\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Warning\nRecordNumber=711\nKeywords=None\nTaskCategory=Execute a Remote Command\nOpCode=On create calls\nMessage=Creating Scriptblock text (1 of 1):\n\n#requires -version 3.0\n\ntry { Microsoft.PowerShell.Core\\Set-StrictMode -Off } catch { }\n\n$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module\n\n$script:ClassName = 'ROOT/StandardCimv2/MSFT_NetTCPConnection'\n$script:ClassVersion = '1.0.0'\n$script:ModuleVersion = '1.0.0'\n$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]\n\n$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()\n\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function @()\n        \n\nfunction __cmdletization_BindCommonParameters\n{\n    param(\n        $__cmdletization_objectModelWrapper,\n        $myPSBoundParameters\n    )       \n                \n\n        if ($myPSBoundParameters.ContainsKey('CimSession')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('AsJob')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] \n        }\n                    \n\n}\n                \n\nfunction Get-NetTCPConnection\n{\n    [CmdletBinding(DefaultParameterSetName='ByName', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/StandardCimv2/MSFT_NetTCPConnection')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByName', Position=0, ValueFromPipelineByPropertyName=$true)]\n    [Alias('IPAddress')]\n    [ValidateNotNull()]\n    [string[]]\n    ${LocalAddress},\n\n    [Parameter(ParameterSetName='ByName', Position=1)]\n    [ValidateNotNull()]\n    [uint16[]]\n    ${LocalPort},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [string[]]\n    ${RemoteAddress},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [uint16[]]\n    ${RemotePort},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPConnection.State[]]\n    ${State},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPConnection.AppliedSetting[]]\n    ${AppliedSetting},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${OwningProcess},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [datetime[]]\n    ${CreationTime},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetTCPConnection.OffloadState[]]\n    ${OffloadState},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [switch]\n    ${AsJob})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('LocalAddress') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${LocalAddress})\n        $__cmdletization_queryBuilder.FilterByProperty('LocalAddress', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('LocalPort') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${LocalPort})\n        $__cmdletization_queryBuilder.FilterByProperty('LocalPort', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('RemoteAddress') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${RemoteAddress})\n        $__cmdletization_queryBuilder.FilterByProperty('RemoteAddress', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('RemotePort') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${RemotePort})\n        $__cmdletization_queryBuilder.FilterByProperty('RemotePort', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('State') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${State})\n        $__cmdletization_queryBuilder.FilterByProperty('State', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AppliedSetting') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${AppliedSetting})\n        $__cmdletization_queryBuilder.FilterByProperty('AppliedSetting', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('OwningProcess') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${OwningProcess})\n        $__cmdletization_queryBuilder.FilterByProperty('OwningProcess', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('CreationTime') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${CreationTime})\n        $__cmdletization_queryBuilder.FilterByProperty('CreationTime', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('OffloadState') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${OffloadState})\n        $__cmdletization_queryBuilder.FilterByProperty('OffloadState', $__cmdletization_values, $false, 'Default')\n    }\n\n\n    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP MSFT_NetTCPConnection.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Get-NetTCPConnection' -Alias '*'\n        \n\n\nScriptBlock ID: d1e8aa33-dcd6-461a-bb12-651ca83d2fad\nPath:",
    "_time": "2025-08-06T17:25:05.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:53956",
    "_indextime": "1754501105",
    "_serial": "35",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "240",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:25:05 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=710\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Remove-NetRoute\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 08a20d3f-559d-4e13-aa36-d072c8224dd8\n        Host Application = powershell.exe -Command Get-NetNeighbor\n        Engine Version = 5.1.20348.3932\n        Runspace ID = 330567f1-a99e-439d-8d25-0d7203a495c9\n        Pipeline ID = 20\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 100\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:25:05.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:53915",
    "_indextime": "1754501105",
    "_serial": "36",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "39",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:25:05 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=709\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Set-NetRoute\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 08a20d3f-559d-4e13-aa36-d072c8224dd8\n        Host Application = powershell.exe -Command Get-NetNeighbor\n        Engine Version = 5.1.20348.3932\n        Runspace ID = 330567f1-a99e-439d-8d25-0d7203a495c9\n        Pipeline ID = 20\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 98\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:25:05.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:53874",
    "_indextime": "1754501105",
    "_serial": "37",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "39",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:25:05 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=708\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Get-NetRoute\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 08a20d3f-559d-4e13-aa36-d072c8224dd8\n        Host Application = powershell.exe -Command Get-NetNeighbor\n        Engine Version = 5.1.20348.3932\n        Runspace ID = 330567f1-a99e-439d-8d25-0d7203a495c9\n        Pipeline ID = 20\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 96\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:25:05.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:53833",
    "_indextime": "1754501105",
    "_serial": "38",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "39",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:25:05 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=707\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Find-NetRoute\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 08a20d3f-559d-4e13-aa36-d072c8224dd8\n        Host Application = powershell.exe -Command Get-NetNeighbor\n        Engine Version = 5.1.20348.3932\n        Runspace ID = 330567f1-a99e-439d-8d25-0d7203a495c9\n        Pipeline ID = 20\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 94\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:25:05.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:53792",
    "_indextime": "1754501105",
    "_serial": "39",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "39",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:25:05 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=706\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"New-NetRoute\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 08a20d3f-559d-4e13-aa36-d072c8224dd8\n        Host Application = powershell.exe -Command Get-NetNeighbor\n        Engine Version = 5.1.20348.3932\n        Runspace ID = 330567f1-a99e-439d-8d25-0d7203a495c9\n        Pipeline ID = 20\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 92\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:25:05.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:53751",
    "_indextime": "1754501105",
    "_serial": "40",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "39",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:25:05 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=705\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 08a20d3f-559d-4e13-aa36-d072c8224dd8\n        Host Application = powershell.exe -Command Get-NetNeighbor\n        Engine Version = 5.1.20348.3932\n        Runspace ID = 330567f1-a99e-439d-8d25-0d7203a495c9\n        Pipeline ID = 20\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 90\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:25:05.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:53713",
    "_indextime": "1754501105",
    "_serial": "41",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "38",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:25:05 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=704\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Set-StrictMode): \"Set-StrictMode\"\nParameterBinding(Set-StrictMode): name=\"Off\"; value=\"True\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 08a20d3f-559d-4e13-aa36-d072c8224dd8\n        Host Application = powershell.exe -Command Get-NetNeighbor\n        Engine Version = 5.1.20348.3932\n        Runspace ID = 330567f1-a99e-439d-8d25-0d7203a495c9\n        Pipeline ID = 20\n        Command Name = Set-StrictMode\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 88\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:25:05.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:53675",
    "_indextime": "1754501105",
    "_serial": "42",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "38",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:25:05 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4104\nEventType=3\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Warning\nRecordNumber=703\nKeywords=None\nTaskCategory=Execute a Remote Command\nOpCode=On create calls\nMessage=Creating Scriptblock text (6 of 6):\n @(${Publish})\n        $__cmdletization_queryBuilder.FilterByProperty('Publish', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('RouteMetric') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${RouteMetric})\n        $__cmdletization_queryBuilder.FilterByProperty('RouteMetric', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Protocol') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Protocol})\n        $__cmdletization_queryBuilder.FilterByProperty('Protocol', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('CompartmentId') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${CompartmentId})\n        $__cmdletization_queryBuilder.FilterByProperty('CompartmentId', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('ValidLifetime') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${ValidLifetime})\n        $__cmdletization_queryBuilder.FilterByProperty('ValidLifetime', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PreferredLifetime') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PreferredLifetime})\n        $__cmdletization_queryBuilder.FilterByProperty('PreferredLifetime', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('State') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${State})\n        $__cmdletization_queryBuilder.FilterByProperty('State', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('InterfaceMetric') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${InterfaceMetric})\n        $__cmdletization_queryBuilder.FilterByProperty('InterfaceMetric', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedIPInterface') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedIPInterface}, 'MSFT_NetIPInterfaceRoute', 'Antecedent', 'Dependent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})\n    }\n    if ($PSBoundParameters.ContainsKey('IncludeAllCompartments') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('IncludeAllCompartments', ${IncludeAllCompartments})\n    }\n\n\n    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n    switch -exact ($PSCmdlet.ParameterSetName) { \n        { @('ByName', 'InputObject (cdxml)') -contains $_ } {\n      $__cmdletization_returnValue = $null\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:DeleteInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru\n            if ($PSBoundParameters.ContainsKey('InputObject')) {\n                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }\n            } else {\n                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)\n            }\n        }\n    }\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP MSFT_NetRoute.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Remove-NetRoute' -Alias '*'\n        \n\n\nScriptBlock ID: 3e21c2d4-6577-4d32-9b20-67530e47785e\nPath:",
    "_time": "2025-08-06T17:25:05.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:53517",
    "_indextime": "1754501105",
    "_serial": "43",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "103",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:25:05 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4104\nEventType=3\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Warning\nRecordNumber=702\nKeywords=None\nTaskCategory=Execute a Remote Command\nOpCode=On create calls\nMessage=Splunk could not get the description for this event. Either the component that raises this event is not installed on your local computer or the installation is corrupt.\n\nFormatMessage error:\n\nGot the following information from this event: \n\n    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})\n    }\n    if ($PSBoundParameters.ContainsKey('IncludeAllCompartments') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('IncludeAllCompartments', ${IncludeAllCompartments})\n    }\n\n\n    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n    switch -exact ($PSCmdlet.ParameterSetName) { \n        { @('ByName', 'InputObject (cdxml)') -contains $_ } {\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('Publish')) {\n            [object]$__cmdletization_value = ${Publish}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Publish'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetRoute.Publish'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Publish'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetRoute.Publish'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('RouteMetric')) {\n            [object]$__cmdletization_value = ${RouteMetric}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RouteMetric'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RouteMetric'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('ValidLifetime')) {\n            [object]$__cmdletization_value = ${ValidLifetime}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ValidLifetime'; ParameterType = 'System.TimeSpan'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ValidLifetime'; ParameterType = 'System.TimeSpan'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('PreferredLifetime')) {\n            [object]$__cmdletization_value = ${PreferredLifetime}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PreferredLifetime'; ParameterType = 'System.TimeSpan'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PreferredLifetime'; ParameterType = 'System.TimeSpan'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n      $__cmdletization_returnValue = $null\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:ModifyInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru\n            if ($PSBoundParameters.ContainsKey('InputObject')) {\n                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }\n            } else {\n                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)\n            }\n        }\n    }\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP MSFT_NetRoute.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Set-NetRoute' -Alias '*'\n        \n\nfunction Remove-NetRoute\n{\n    [CmdletBinding(DefaultParameterSetName='ByName', SupportsShouldProcess=$true, ConfirmImpact='High', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/StandardCimv2/MSFT_NetRoute')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByName', Position=0)]\n    [ValidateNotNull()]\n    [string[]]\n    ${DestinationPrefix},\n\n    [Parameter(ParameterSetName='ByName', ValueFromPipelineByPropertyName=$true)]\n    [Alias('ifIndex')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${InterfaceIndex},\n\n    [Parameter(ParameterSetName='ByName', ValueFromPipelineByPropertyName=$true)]\n    [Alias('ifAlias')]\n    [ValidateNotNull()]\n    [string[]]\n    ${InterfaceAlias},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [string[]]\n    ${NextHop},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetRoute.AddressFamily[]]\n    ${AddressFamily},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetRoute.Publish[]]\n    ${Publish},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [uint16[]]\n    ${RouteMetric},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetRoute.Protocol[]]\n    ${Protocol},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${CompartmentId},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [timespan[]]\n    ${ValidLifetime},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [timespan[]]\n    ${PreferredLifetime},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetRoute.State[]]\n    ${State},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${InterfaceMetric},\n\n    [Parameter(ParameterSetName='ByName', ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIPInterface')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedIPInterface},\n\n    [Parameter(ParameterSetName='ByName')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='ByName')]\n    [switch]\n    ${IncludeAllCompartments},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetRoute')]\n    [ValidateNotNull()]\n    [ciminstance[]]\n    ${InputObject},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${AsJob},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${PassThru})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('DestinationPrefix') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DestinationPrefix})\n        $__cmdletization_queryBuilder.FilterByProperty('DestinationPrefix', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('InterfaceIndex') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${InterfaceIndex})\n        $__cmdletization_queryBuilder.FilterByProperty('InterfaceIndex', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('InterfaceAlias') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${InterfaceAlias})\n        $__cmdletization_queryBuilder.FilterByProperty('InterfaceAlias', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('NextHop') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${NextHop})\n        $__cmdletization_queryBuilder.FilterByProperty('NextHop', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AddressFamily') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${AddressFamily})\n        $__cmdletization_queryBuilder.FilterByProperty('AddressFamily', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Publish') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values =\n3e21c2d4-6577-4d32-9b20-67530e47785e",
    "_time": "2025-08-06T17:25:05.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:53119",
    "_indextime": "1754501105",
    "_serial": "44",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "293",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:25:05 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4104\nEventType=3\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Warning\nRecordNumber=701\nKeywords=None\nTaskCategory=Execute a Remote Command\nOpCode=On create calls\nMessage=Splunk could not get the description for this event. Either the component that raises this event is not installed on your local computer or the installation is corrupt.\n\nFormatMessage error:\n\nGot the following information from this event: \n\n {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('DestinationPrefix') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DestinationPrefix})\n        $__cmdletization_queryBuilder.FilterByProperty('DestinationPrefix', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('InterfaceIndex') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${InterfaceIndex})\n        $__cmdletization_queryBuilder.FilterByProperty('InterfaceIndex', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('InterfaceAlias') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${InterfaceAlias})\n        $__cmdletization_queryBuilder.FilterByProperty('InterfaceAlias', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('NextHop') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${NextHop})\n        $__cmdletization_queryBuilder.FilterByProperty('NextHop', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AddressFamily') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${AddressFamily})\n        $__cmdletization_queryBuilder.FilterByProperty('AddressFamily', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Publish') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Publish})\n        $__cmdletization_queryBuilder.FilterByProperty('Publish', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('RouteMetric') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${RouteMetric})\n        $__cmdletization_queryBuilder.FilterByProperty('RouteMetric', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Protocol') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Protocol})\n        $__cmdletization_queryBuilder.FilterByProperty('Protocol', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('CompartmentId') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${CompartmentId})\n        $__cmdletization_queryBuilder.FilterByProperty('CompartmentId', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('ValidLifetime') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${ValidLifetime})\n        $__cmdletization_queryBuilder.FilterByProperty('ValidLifetime', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PreferredLifetime') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PreferredLifetime})\n        $__cmdletization_queryBuilder.FilterByProperty('PreferredLifetime', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('State') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${State})\n        $__cmdletization_queryBuilder.FilterByProperty('State', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('InterfaceMetric') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${InterfaceMetric})\n        $__cmdletization_queryBuilder.FilterByProperty('InterfaceMetric', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedIPInterface') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedIPInterface}, 'MSFT_NetIPInterfaceRoute', 'Antecedent', 'Dependent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})\n    }\n    if ($PSBoundParameters.ContainsKey('IncludeAllCompartments') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('IncludeAllCompartments', ${IncludeAllCompartments})\n    }\n\n\n    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP MSFT_NetRoute.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Get-NetRoute' -Alias '*'\n        \n\nfunction Set-NetRoute\n{\n    [CmdletBinding(DefaultParameterSetName='ByName', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/StandardCimv2/MSFT_NetRoute')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByName', Position=0)]\n    [ValidateNotNull()]\n    [string[]]\n    ${DestinationPrefix},\n\n    [Parameter(ParameterSetName='ByName', ValueFromPipelineByPropertyName=$true)]\n    [Alias('ifIndex')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${InterfaceIndex},\n\n    [Parameter(ParameterSetName='ByName', ValueFromPipelineByPropertyName=$true)]\n    [Alias('ifAlias')]\n    [ValidateNotNull()]\n    [string[]]\n    ${InterfaceAlias},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [string[]]\n    ${NextHop},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetRoute.AddressFamily[]]\n    ${AddressFamily},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetRoute.Protocol[]]\n    ${Protocol},\n\n    [Parameter(ParameterSetName='ByName')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='ByName')]\n    [switch]\n    ${IncludeAllCompartments},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetRoute')]\n    [ValidateNotNull()]\n    [ciminstance[]]\n    ${InputObject},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetRoute.Publish]\n    ${Publish},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [uint16]\n    ${RouteMetric},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [timespan]\n    ${ValidLifetime},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [timespan]\n    ${PreferredLifetime},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${AsJob},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${PassThru})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('DestinationPrefix') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DestinationPrefix})\n        $__cmdletization_queryBuilder.FilterByProperty('DestinationPrefix', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('InterfaceIndex') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${InterfaceIndex})\n        $__cmdletization_queryBuilder.FilterByProperty('InterfaceIndex', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('InterfaceAlias') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${InterfaceAlias})\n        $__cmdletization_queryBuilder.FilterByProperty('InterfaceAlias', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('NextHop') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${NextHop})\n        $__cmdletization_queryBuilder.FilterByProperty('NextHop', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AddressFamily') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${AddressFamily})\n        $__cmdletization_queryBuilder.FilterByProperty('AddressFamily', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Protocol') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Protocol})\n        $__cmdletization_queryBuilder.FilterByProperty('Protocol', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n\n3e21c2d4-6577-4d32-9b20-67530e47785e",
    "_time": "2025-08-06T17:25:05.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:52721",
    "_indextime": "1754501105",
    "_serial": "45",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "300",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:25:05 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4104\nEventType=3\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Warning\nRecordNumber=700\nKeywords=None\nTaskCategory=Execute a Remote Command\nOpCode=On create calls\nMessage=Splunk could not get the description for this event. Either the component that raises this event is not installed on your local computer or the installation is corrupt.\n\nFormatMessage error:\n\nGot the following information from this event: \n\n; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PreferredLifetime'; ParameterType = 'System.TimeSpan'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'CmdletOutput'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'Out'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.UInt32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Create', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo)\n        }\n    }\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP MSFT_NetRoute.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'New-NetRoute' -Alias '*'\n        \n\nfunction Find-NetRoute\n{\n    [CmdletBinding(PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance[]])]\n    param(\n    \n    [Parameter(ParameterSetName='Find0')]\n    [uint32]\n    ${InterfaceIndex},\n\n    [Parameter(ParameterSetName='Find0')]\n    [string]\n    ${LocalIPAddress},\n\n    [Parameter(ParameterSetName='Find0', Mandatory=$true)]\n    [string]\n    ${RemoteIPAddress},\n\n    [Parameter(ParameterSetName='Find0')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='Find0')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='Find0')]\n    [switch]\n    ${AsJob})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n      $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('InterfaceIndex')) {\n          [object]$__cmdletization_value = ${InterfaceIndex}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InterfaceIndex'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InterfaceIndex'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('LocalIPAddress')) {\n          [object]$__cmdletization_value = ${LocalIPAddress}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LocalIPAddress'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LocalIPAddress'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('RemoteIPAddress')) {\n          [object]$__cmdletization_value = ${RemoteIPAddress}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteIPAddress'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RemoteIPAddress'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'CmdletOutput'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'Out'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.UInt32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Find', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo)\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP MSFT_NetRoute.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Find-NetRoute' -Alias '*'\n        \n\nfunction Get-NetRoute\n{\n    [CmdletBinding(DefaultParameterSetName='ByName', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/StandardCimv2/MSFT_NetRoute')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByName', Position=0)]\n    [ValidateNotNull()]\n    [string[]]\n    ${DestinationPrefix},\n\n    [Parameter(ParameterSetName='ByName', ValueFromPipelineByPropertyName=$true)]\n    [Alias('ifIndex')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${InterfaceIndex},\n\n    [Parameter(ParameterSetName='ByName', ValueFromPipelineByPropertyName=$true)]\n    [Alias('ifAlias')]\n    [ValidateNotNull()]\n    [string[]]\n    ${InterfaceAlias},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [string[]]\n    ${NextHop},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetRoute.AddressFamily[]]\n    ${AddressFamily},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetRoute.Publish[]]\n    ${Publish},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [uint16[]]\n    ${RouteMetric},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetRoute.Protocol[]]\n    ${Protocol},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${CompartmentId},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [timespan[]]\n    ${ValidLifetime},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [timespan[]]\n    ${PreferredLifetime},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetRoute.State[]]\n    ${State},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${InterfaceMetric},\n\n    [Parameter(ParameterSetName='ByName', ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIPInterface')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedIPInterface},\n\n    [Parameter(ParameterSetName='ByName')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='ByName')]\n    [switch]\n    ${IncludeAllCompartments},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [switch]\n    ${AsJob})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin\n3e21c2d4-6577-4d32-9b20-67530e47785e",
    "_time": "2025-08-06T17:25:05.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:52323",
    "_indextime": "1754501105",
    "_serial": "46",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "337",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:25:05 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4104\nEventType=3\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Warning\nRecordNumber=699\nKeywords=None\nTaskCategory=Execute a Remote Command\nOpCode=On create calls\nMessage=Splunk could not get the description for this event. Either the component that raises this event is not installed on your local computer or the installation is corrupt.\n\nFormatMessage error:\n\nGot the following information from this event: \n\nntainsKey('Protocol')) {\n          [object]$__cmdletization_value = ${Protocol}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Protocol'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetRoute.Protocol'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Protocol'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetRoute.Protocol'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('ValidLifetime')) {\n          [object]$__cmdletization_value = ${ValidLifetime}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ValidLifetime'; ParameterType = 'System.TimeSpan'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ValidLifetime'; ParameterType = 'System.TimeSpan'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('PreferredLifetime')) {\n          [object]$__cmdletization_value = ${PreferredLifetime}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PreferredLifetime'; ParameterType = 'System.TimeSpan'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PreferredLifetime'; ParameterType = 'System.TimeSpan'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'CmdletOutput'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'Out'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.UInt32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Create', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo)\n        }\n        { @('ByInterfaceIndex') -contains $_ } {\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('DestinationPrefix')) {\n          [object]$__cmdletization_value = ${DestinationPrefix}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DestinationPrefix'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DestinationPrefix'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('InterfaceIndex')) {\n          [object]$__cmdletization_value = ${InterfaceIndex}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InterfaceIndex'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InterfaceIndex'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('AddressFamily')) {\n          [object]$__cmdletization_value = ${AddressFamily}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AddressFamily'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetRoute.AddressFamily'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AddressFamily'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetRoute.AddressFamily'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('NextHop')) {\n          [object]$__cmdletization_value = ${NextHop}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NextHop'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NextHop'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('PolicyStore')) {\n          [object]$__cmdletization_value = ${PolicyStore}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('Publish')) {\n          [object]$__cmdletization_value = ${Publish}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Publish'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetRoute.Publish'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Publish'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetRoute.Publish'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('RouteMetric')) {\n          [object]$__cmdletization_value = ${RouteMetric}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RouteMetric'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RouteMetric'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('Protocol')) {\n          [object]$__cmdletization_value = ${Protocol}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Protocol'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetRoute.Protocol'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Protocol'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetRoute.Protocol'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('ValidLifetime')) {\n          [object]$__cmdletization_value = ${ValidLifetime}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ValidLifetime'; ParameterType = 'System.TimeSpan'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ValidLifetime'; ParameterType = 'System.TimeSpan'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('PreferredLifetime')) {\n          [object]$__cmdletization_value = ${PreferredLifetime}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PreferredLifetime'; ParameterType = 'System.TimeSpan'; Bindings = 'In'; Value = $__cmdletization_value\n3e21c2d4-6577-4d32-9b20-67530e47785e",
    "_time": "2025-08-06T17:25:05.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:51925",
    "_indextime": "1754501105",
    "_serial": "47",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "154",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:25:05 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4104\nEventType=3\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Warning\nRecordNumber=698\nKeywords=None\nTaskCategory=Execute a Remote Command\nOpCode=On create calls\nMessage=Splunk could not get the description for this event. Either the component that raises this event is not installed on your local computer or the installation is corrupt.\n\nFormatMessage error:\n\nGot the following information from this event: \n\n\n#requires -version 3.0\n\ntry { Microsoft.PowerShell.Core\\Set-StrictMode -Off } catch { }\n\n$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module\n\n$script:ClassName = 'ROOT/StandardCimv2/MSFT_NetRoute'\n$script:ClassVersion = '1.0.0'\n$script:ModuleVersion = '1.0.0'\n$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]\n\n$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()\n\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function @()\n        \n\nfunction __cmdletization_BindCommonParameters\n{\n    param(\n        $__cmdletization_objectModelWrapper,\n        $myPSBoundParameters\n    )       \n                \n\n        if ($myPSBoundParameters.ContainsKey('CimSession')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('AsJob')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] \n        }\n                    \n\n}\n                \n\nfunction New-NetRoute\n{\n    [CmdletBinding(DefaultParameterSetName='ByInterfaceAlias', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance[]])][OutputType([Microsoft.Management.Infrastructure.CimInstance[]])]\n    param(\n    \n    [Parameter(ParameterSetName='ByInterfaceAlias', Mandatory=$true, Position=0)]\n    [Parameter(ParameterSetName='ByInterfaceIndex', Mandatory=$true, Position=0)]\n    [string]\n    ${DestinationPrefix},\n\n    [Parameter(ParameterSetName='ByInterfaceAlias', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]\n    [Alias('ifAlias')]\n    [string]\n    ${InterfaceAlias},\n\n    [Parameter(ParameterSetName='ByInterfaceAlias')]\n    [Parameter(ParameterSetName='ByInterfaceIndex')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetRoute.AddressFamily]\n    ${AddressFamily},\n\n    [Parameter(ParameterSetName='ByInterfaceAlias')]\n    [Parameter(ParameterSetName='ByInterfaceIndex')]\n    [string]\n    ${NextHop},\n\n    [Parameter(ParameterSetName='ByInterfaceAlias')]\n    [Parameter(ParameterSetName='ByInterfaceIndex')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='ByInterfaceAlias')]\n    [Parameter(ParameterSetName='ByInterfaceIndex')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetRoute.Publish]\n    ${Publish},\n\n    [Parameter(ParameterSetName='ByInterfaceAlias')]\n    [Parameter(ParameterSetName='ByInterfaceIndex')]\n    [uint16]\n    ${RouteMetric},\n\n    [Parameter(ParameterSetName='ByInterfaceAlias')]\n    [Parameter(ParameterSetName='ByInterfaceIndex')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetRoute.Protocol]\n    ${Protocol},\n\n    [Parameter(ParameterSetName='ByInterfaceAlias')]\n    [Parameter(ParameterSetName='ByInterfaceIndex')]\n    [timespan]\n    ${ValidLifetime},\n\n    [Parameter(ParameterSetName='ByInterfaceAlias')]\n    [Parameter(ParameterSetName='ByInterfaceIndex')]\n    [timespan]\n    ${PreferredLifetime},\n\n    [Parameter(ParameterSetName='ByInterfaceIndex', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]\n    [Alias('ifIndex')]\n    [uint32]\n    ${InterfaceIndex},\n\n    [Parameter(ParameterSetName='ByInterfaceAlias')]\n    [Parameter(ParameterSetName='ByInterfaceIndex')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByInterfaceAlias')]\n    [Parameter(ParameterSetName='ByInterfaceIndex')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByInterfaceAlias')]\n    [Parameter(ParameterSetName='ByInterfaceIndex')]\n    [switch]\n    ${AsJob})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n      $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n\n      switch -exact ($PSCmdlet.ParameterSetName) { \n        { @('ByInterfaceAlias') -contains $_ } {\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('DestinationPrefix')) {\n          [object]$__cmdletization_value = ${DestinationPrefix}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DestinationPrefix'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DestinationPrefix'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('InterfaceAlias')) {\n          [object]$__cmdletization_value = ${InterfaceAlias}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InterfaceAlias'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InterfaceAlias'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('AddressFamily')) {\n          [object]$__cmdletization_value = ${AddressFamily}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AddressFamily'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetRoute.AddressFamily'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AddressFamily'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetRoute.AddressFamily'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('NextHop')) {\n          [object]$__cmdletization_value = ${NextHop}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NextHop'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NextHop'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('PolicyStore')) {\n          [object]$__cmdletization_value = ${PolicyStore}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('Publish')) {\n          [object]$__cmdletization_value = ${Publish}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Publish'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetRoute.Publish'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Publish'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetRoute.Publish'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('RouteMetric')) {\n          [object]$__cmdletization_value = ${RouteMetric}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RouteMetric'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RouteMetric'; ParameterType = 'System.UInt16'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.Co\n3e21c2d4-6577-4d32-9b20-67530e47785e",
    "_time": "2025-08-06T17:25:05.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:51527",
    "_indextime": "1754501105",
    "_serial": "48",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "261",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:25:05 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=697\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Get-NetPrefixPolicy\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 08a20d3f-559d-4e13-aa36-d072c8224dd8\n        Host Application = powershell.exe -Command Get-NetNeighbor\n        Engine Version = 5.1.20348.3932\n        Runspace ID = 330567f1-a99e-439d-8d25-0d7203a495c9\n        Pipeline ID = 20\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 86\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:25:05.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:51486",
    "_indextime": "1754501105",
    "_serial": "49",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "39",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:25:05 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=696\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 08a20d3f-559d-4e13-aa36-d072c8224dd8\n        Host Application = powershell.exe -Command Get-NetNeighbor\n        Engine Version = 5.1.20348.3932\n        Runspace ID = 330567f1-a99e-439d-8d25-0d7203a495c9\n        Pipeline ID = 20\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 84\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:25:05.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:51448",
    "_indextime": "1754501105",
    "_serial": "50",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "38",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:25:05 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=695\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Set-StrictMode): \"Set-StrictMode\"\nParameterBinding(Set-StrictMode): name=\"Off\"; value=\"True\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 08a20d3f-559d-4e13-aa36-d072c8224dd8\n        Host Application = powershell.exe -Command Get-NetNeighbor\n        Engine Version = 5.1.20348.3932\n        Runspace ID = 330567f1-a99e-439d-8d25-0d7203a495c9\n        Pipeline ID = 20\n        Command Name = Set-StrictMode\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 82\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:25:05.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:51410",
    "_indextime": "1754501105",
    "_serial": "51",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "38",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:25:05 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4104\nEventType=3\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Warning\nRecordNumber=694\nKeywords=None\nTaskCategory=Execute a Remote Command\nOpCode=On create calls\nMessage=Creating Scriptblock text (1 of 1):\n\n#requires -version 3.0\n\ntry { Microsoft.PowerShell.Core\\Set-StrictMode -Off } catch { }\n\n$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module\n\n$script:ClassName = 'ROOT/StandardCimv2/MSFT_NetPrefixPolicy'\n$script:ClassVersion = '1.0.0'\n$script:ModuleVersion = '1.0.0'\n$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]\n\n$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()\n\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function @()\n        \n\nfunction __cmdletization_BindCommonParameters\n{\n    param(\n        $__cmdletization_objectModelWrapper,\n        $myPSBoundParameters\n    )       \n                \n\n        if ($myPSBoundParameters.ContainsKey('CimSession')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('AsJob')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] \n        }\n                    \n\n}\n                \n\nfunction Get-NetPrefixPolicy\n{\n    [CmdletBinding(DefaultParameterSetName='ByName', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/StandardCimv2/MSFT_NetPrefixPolicy')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByName', Position=0)]\n    [ValidateNotNull()]\n    [string[]]\n    ${Prefix},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${Precedence},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${Label},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [switch]\n    ${AsJob})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('Prefix') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Prefix})\n        $__cmdletization_queryBuilder.FilterByProperty('Prefix', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Precedence') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Precedence})\n        $__cmdletization_queryBuilder.FilterByProperty('Precedence', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Label') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Label})\n        $__cmdletization_queryBuilder.FilterByProperty('Label', $__cmdletization_values, $false, 'Default')\n    }\n\n\n    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP MSFT_NetPrefixPolicy.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Get-NetPrefixPolicy' -Alias '*'\n        \n\n\nScriptBlock ID: 02cea3dd-1edd-4156-9959-a567eeee1bd9\nPath:",
    "_time": "2025-08-06T17:25:05.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:51229",
    "_indextime": "1754501105",
    "_serial": "52",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "185",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:25:05 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=693\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Set-NetOffloadGlobalSetting\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 08a20d3f-559d-4e13-aa36-d072c8224dd8\n        Host Application = powershell.exe -Command Get-NetNeighbor\n        Engine Version = 5.1.20348.3932\n        Runspace ID = 330567f1-a99e-439d-8d25-0d7203a495c9\n        Pipeline ID = 20\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 80\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:25:05.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:51188",
    "_indextime": "1754501105",
    "_serial": "53",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "39",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:25:05 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=692\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Get-NetOffloadGlobalSetting\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 08a20d3f-559d-4e13-aa36-d072c8224dd8\n        Host Application = powershell.exe -Command Get-NetNeighbor\n        Engine Version = 5.1.20348.3932\n        Runspace ID = 330567f1-a99e-439d-8d25-0d7203a495c9\n        Pipeline ID = 20\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 78\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:25:05.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:51147",
    "_indextime": "1754501105",
    "_serial": "54",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "39",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:25:05 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=691\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 08a20d3f-559d-4e13-aa36-d072c8224dd8\n        Host Application = powershell.exe -Command Get-NetNeighbor\n        Engine Version = 5.1.20348.3932\n        Runspace ID = 330567f1-a99e-439d-8d25-0d7203a495c9\n        Pipeline ID = 20\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 76\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:25:05.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:51109",
    "_indextime": "1754501105",
    "_serial": "55",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "38",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:25:05 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=690\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Set-StrictMode): \"Set-StrictMode\"\nParameterBinding(Set-StrictMode): name=\"Off\"; value=\"True\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 08a20d3f-559d-4e13-aa36-d072c8224dd8\n        Host Application = powershell.exe -Command Get-NetNeighbor\n        Engine Version = 5.1.20348.3932\n        Runspace ID = 330567f1-a99e-439d-8d25-0d7203a495c9\n        Pipeline ID = 20\n        Command Name = Set-StrictMode\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 74\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:25:05.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:51071",
    "_indextime": "1754501105",
    "_serial": "56",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "38",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:25:05 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4104\nEventType=3\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Warning\nRecordNumber=689\nKeywords=None\nTaskCategory=Execute a Remote Command\nOpCode=On create calls\nMessage=Creating Scriptblock text (2 of 2):\n\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('PacketCoalescingFilter')) {\n            [object]$__cmdletization_value = ${PacketCoalescingFilter}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PacketCoalescingFilter'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetOffloadGlobalSetting.EnabledDisabledEnum'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PacketCoalescingFilter'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetOffloadGlobalSetting.EnabledDisabledEnum'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n      $__cmdletization_returnValue = $null\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:ModifyInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru\n            if ($PSBoundParameters.ContainsKey('InputObject')) {\n                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }\n            } else {\n                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)\n            }\n        }\n    }\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP MSFT_NetOffloadGlobalSetting.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Set-NetOffloadGlobalSetting' -Alias '*'\n        \n\n\nScriptBlock ID: 80531ee1-cdf4-47ab-b3f7-ee2244482429\nPath:",
    "_time": "2025-08-06T17:25:05.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:50979",
    "_indextime": "1754501105",
    "_serial": "57",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "68",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:25:05 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4104\nEventType=3\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Warning\nRecordNumber=688\nKeywords=None\nTaskCategory=Execute a Remote Command\nOpCode=On create calls\nMessage=Splunk could not get the description for this event. Either the component that raises this event is not installed on your local computer or the installation is corrupt.\n\nFormatMessage error:\n\nGot the following information from this event: \n\n\n#requires -version 3.0\n\ntry { Microsoft.PowerShell.Core\\Set-StrictMode -Off } catch { }\n\n$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module\n\n$script:ClassName = 'ROOT/StandardCimv2/MSFT_NetOffloadGlobalSetting'\n$script:ClassVersion = '1.0.0'\n$script:ModuleVersion = '1.0.0'\n$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]\n\n$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()\n\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function @()\n        \n\nfunction __cmdletization_BindCommonParameters\n{\n    param(\n        $__cmdletization_objectModelWrapper,\n        $myPSBoundParameters\n    )       \n                \n\n        if ($myPSBoundParameters.ContainsKey('CimSession')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('AsJob')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] \n        }\n                    \n\n}\n                \n\nfunction Get-NetOffloadGlobalSetting\n{\n    [CmdletBinding(DefaultParameterSetName='ByName', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/StandardCimv2/MSFT_NetOffloadGlobalSetting')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetOffloadGlobalSetting.EnabledDisabledEnum[]]\n    ${ReceiveSideScaling},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetOffloadGlobalSetting.EnabledDisabledEnum[]]\n    ${ReceiveSegmentCoalescing},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetOffloadGlobalSetting.ChimneyEnum[]]\n    ${Chimney},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetOffloadGlobalSetting.EnabledDisabledEnum[]]\n    ${TaskOffload},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetOffloadGlobalSetting.EnabledDisabledEnum[]]\n    ${NetworkDirect},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetOffloadGlobalSetting.AllowedBlockedEnum[]]\n    ${NetworkDirectAcrossIPSubnets},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetOffloadGlobalSetting.EnabledDisabledEnum[]]\n    ${PacketCoalescingFilter},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [switch]\n    ${AsJob})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('ReceiveSideScaling') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${ReceiveSideScaling})\n        $__cmdletization_queryBuilder.FilterByProperty('ReceiveSideScaling', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('ReceiveSegmentCoalescing') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${ReceiveSegmentCoalescing})\n        $__cmdletization_queryBuilder.FilterByProperty('ReceiveSegmentCoalescing', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Chimney') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Chimney})\n        $__cmdletization_queryBuilder.FilterByProperty('Chimney', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('TaskOffload') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${TaskOffload})\n        $__cmdletization_queryBuilder.FilterByProperty('TaskOffload', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('NetworkDirect') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${NetworkDirect})\n        $__cmdletization_queryBuilder.FilterByProperty('NetworkDirect', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('NetworkDirectAcrossIPSubnets') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${NetworkDirectAcrossIPSubnets})\n        $__cmdletization_queryBuilder.FilterByProperty('NetworkDirectAcrossIPSubnets', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PacketCoalescingFilter') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${PacketCoalescingFilter})\n        $__cmdletization_queryBuilder.FilterByProperty('PacketCoalescingFilter', $__cmdletization_values, $false, 'Default')\n    }\n\n\n    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP MSFT_NetOffloadGlobalSetting.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Get-NetOffloadGlobalSetting' -Alias '*'\n        \n\nfunction Set-NetOffloadGlobalSetting\n{\n    [CmdletBinding(DefaultParameterSetName='InputObject (cdxml)', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/StandardCimv2/MSFT_NetOffloadGlobalSetting')]\n\n    param(\n    \n    [Parameter(ParameterSetName='InputObject (cdxml)', ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetOffloadGlobalSetting')]\n    [ValidateNotNull()]\n    [ciminstance[]]\n    ${InputObject},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetOffloadGlobalSetting.EnabledDisabledEnum]\n    ${ReceiveSideScaling},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetOffloadGlobalSetting.EnabledDisabledEnum]\n    ${ReceiveSegmentCoalescing},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetOffloadGlobalSetting.ChimneyEnum]\n    ${Chimney},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetOffloadGlobalSetting.EnabledDisabledEnum]\n    ${TaskOffload},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetOffloadGlobalSetting.EnabledDisabledEnum]\n    ${NetworkDirect},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetOffloadGlobalSetting.AllowedBlockedEnum]\n    ${NetworkDirectAcrossIPSubnets},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetOffloadGlobalSetting.EnabledDisabledEnum]\n    ${PacketCoalescingFilter},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${AsJob},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${PassThru})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n\n\n    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n    switch -exact ($PSCmdlet.ParameterSetName) { \n        { @('InputObject (cdxml)') -contains $_ } {\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('ReceiveSideScaling')) {\n            [object]$__cmdletization_value = ${ReceiveSideScaling}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ReceiveSideScaling'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetOffloadGlobalSetting.EnabledDisabledEnum'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ReceiveSideScaling'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetOffloadGlobalSetting.EnabledDisabledEnum'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('ReceiveSegmentCoalescing')) {\n            [object]$__cmdletization_value = ${ReceiveSegmentCoalescing}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ReceiveSegmentCoalescing'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetOffloadGlobalSetting.EnabledDisabledEnum'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ReceiveSegmentCoalescing'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetOffloadGlobalSetting.EnabledDisabledEnum'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('Chimney')) {\n            [object]$__cmdletization_value = ${Chimney}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Chimney'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetOffloadGlobalSetting.ChimneyEnum'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Chimney'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetOffloadGlobalSetting.ChimneyEnum'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('TaskOffload')) {\n            [object]$__cmdletization_value = ${TaskOffload}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'TaskOffload'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetOffloadGlobalSetting.EnabledDisabledEnum'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'TaskOffload'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetOffloadGlobalSetting.EnabledDisabledEnum'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('NetworkDirect')) {\n            [object]$__cmdletization_value = ${NetworkDirect}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NetworkDirect'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetOffloadGlobalSetting.EnabledDisabledEnum'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NetworkDirect'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetOffloadGlobalSetting.EnabledDisabledEnum'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('NetworkDirectAcrossIPSubnets')) {\n            [object]$__cmdletization_value = ${NetworkDirectAcrossIPSubnets}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NetworkDirectAcrossIPSubnets'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetOffloadGlobalSetting.AllowedBlockedEnum'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NetworkDirectAcrossIPSubnets'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetOffloadGlobalSetting.AllowedBlockedEnum'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n80531ee1-cdf4-47ab-b3f7-ee2244482429",
    "_time": "2025-08-06T17:25:05.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:50391",
    "_indextime": "1754501105",
    "_serial": "58",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "393",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:25:05 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=687\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Remove-NetNeighbor\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 08a20d3f-559d-4e13-aa36-d072c8224dd8\n        Host Application = powershell.exe -Command Get-NetNeighbor\n        Engine Version = 5.1.20348.3932\n        Runspace ID = 330567f1-a99e-439d-8d25-0d7203a495c9\n        Pipeline ID = 20\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 72\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:25:05.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:50350",
    "_indextime": "1754501105",
    "_serial": "59",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "39",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:25:05 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=686\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Set-NetNeighbor\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 08a20d3f-559d-4e13-aa36-d072c8224dd8\n        Host Application = powershell.exe -Command Get-NetNeighbor\n        Engine Version = 5.1.20348.3932\n        Runspace ID = 330567f1-a99e-439d-8d25-0d7203a495c9\n        Pipeline ID = 20\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 70\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:25:05.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:50309",
    "_indextime": "1754501105",
    "_serial": "60",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "39",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:25:05 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=685\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Get-NetNeighbor\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 08a20d3f-559d-4e13-aa36-d072c8224dd8\n        Host Application = powershell.exe -Command Get-NetNeighbor\n        Engine Version = 5.1.20348.3932\n        Runspace ID = 330567f1-a99e-439d-8d25-0d7203a495c9\n        Pipeline ID = 20\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 68\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:25:05.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:50268",
    "_indextime": "1754501105",
    "_serial": "61",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "39",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:25:05 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=684\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"New-NetNeighbor\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 08a20d3f-559d-4e13-aa36-d072c8224dd8\n        Host Application = powershell.exe -Command Get-NetNeighbor\n        Engine Version = 5.1.20348.3932\n        Runspace ID = 330567f1-a99e-439d-8d25-0d7203a495c9\n        Pipeline ID = 20\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 66\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:25:05.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:50227",
    "_indextime": "1754501105",
    "_serial": "62",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "39",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:25:05 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=683\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 08a20d3f-559d-4e13-aa36-d072c8224dd8\n        Host Application = powershell.exe -Command Get-NetNeighbor\n        Engine Version = 5.1.20348.3932\n        Runspace ID = 330567f1-a99e-439d-8d25-0d7203a495c9\n        Pipeline ID = 20\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 64\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:25:05.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:50189",
    "_indextime": "1754501105",
    "_serial": "63",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "38",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:25:05 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=682\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Set-StrictMode): \"Set-StrictMode\"\nParameterBinding(Set-StrictMode): name=\"Off\"; value=\"True\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 08a20d3f-559d-4e13-aa36-d072c8224dd8\n        Host Application = powershell.exe -Command Get-NetNeighbor\n        Engine Version = 5.1.20348.3932\n        Runspace ID = 330567f1-a99e-439d-8d25-0d7203a495c9\n        Pipeline ID = 20\n        Command Name = Set-StrictMode\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 62\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:25:05.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:50151",
    "_indextime": "1754501105",
    "_serial": "64",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "38",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:25:05 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4104\nEventType=3\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Warning\nRecordNumber=681\nKeywords=None\nTaskCategory=Execute a Remote Command\nOpCode=On create calls\nMessage=Splunk could not get the description for this event. Either the component that raises this event is not installed on your local computer or the installation is corrupt.\n\nFormatMessage error:\n\nGot the following information from this event: \n\nParameterSetName )) {\n        $__cmdletization_values = @(${InterfaceIndex})\n        $__cmdletization_queryBuilder.FilterByProperty('InterfaceIndex', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('InterfaceAlias') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${InterfaceAlias})\n        $__cmdletization_queryBuilder.FilterByProperty('InterfaceAlias', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('State') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${State})\n        $__cmdletization_queryBuilder.FilterByProperty('State', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AddressFamily') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${AddressFamily})\n        $__cmdletization_queryBuilder.FilterByProperty('AddressFamily', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})\n    }\n    if ($PSBoundParameters.ContainsKey('IncludeAllCompartments') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('IncludeAllCompartments', ${IncludeAllCompartments})\n    }\n\n\n    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n    switch -exact ($PSCmdlet.ParameterSetName) { \n        { @('ByName', 'InputObject (cdxml)') -contains $_ } {\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('LinkLayerAddress')) {\n            [object]$__cmdletization_value = ${LinkLayerAddress}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LinkLayerAddress'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LinkLayerAddress'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n      $__cmdletization_returnValue = $null\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:ModifyInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru\n            if ($PSBoundParameters.ContainsKey('InputObject')) {\n                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }\n            } else {\n                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)\n            }\n        }\n    }\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP MSFT_NetNeighbor.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Set-NetNeighbor' -Alias '*'\n        \n\nfunction Remove-NetNeighbor\n{\n    [CmdletBinding(DefaultParameterSetName='ByName', SupportsShouldProcess=$true, ConfirmImpact='High', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/StandardCimv2/MSFT_NetNeighbor')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByName', Position=0)]\n    [ValidateNotNull()]\n    [string[]]\n    ${IPAddress},\n\n    [Parameter(ParameterSetName='ByName', ValueFromPipelineByPropertyName=$true)]\n    [Alias('ifIndex')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${InterfaceIndex},\n\n    [Parameter(ParameterSetName='ByName', ValueFromPipelineByPropertyName=$true)]\n    [Alias('ifAlias')]\n    [ValidateNotNull()]\n    [string[]]\n    ${InterfaceAlias},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [string[]]\n    ${LinkLayerAddress},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetNeighbor.State[]]\n    ${State},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetNeighbor.AddressFamily[]]\n    ${AddressFamily},\n\n    [Parameter(ParameterSetName='ByName', ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIPInterface')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedIPInterface},\n\n    [Parameter(ParameterSetName='ByName')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='ByName')]\n    [switch]\n    ${IncludeAllCompartments},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetNeighbor')]\n    [ValidateNotNull()]\n    [ciminstance[]]\n    ${InputObject},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${AsJob},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${PassThru})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('IPAddress') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${IPAddress})\n        $__cmdletization_queryBuilder.FilterByProperty('IPAddress', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('InterfaceIndex') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${InterfaceIndex})\n        $__cmdletization_queryBuilder.FilterByProperty('InterfaceIndex', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('InterfaceAlias') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${InterfaceAlias})\n        $__cmdletization_queryBuilder.FilterByProperty('InterfaceAlias', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('LinkLayerAddress') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${LinkLayerAddress})\n        $__cmdletization_queryBuilder.FilterByProperty('LinkLayerAddress', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('State') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${State})\n        $__cmdletization_queryBuilder.FilterByProperty('State', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AddressFamily') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${AddressFamily})\n        $__cmdletization_queryBuilder.FilterByProperty('AddressFamily', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedIPInterface') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedIPInterface}, 'MSFT_NetIPInterfaceNeighbor', 'Antecedent', 'Dependent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})\n    }\n    if ($PSBoundParameters.ContainsKey('IncludeAllCompartments') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('IncludeAllCompartments', ${IncludeAllCompartments})\n    }\n\n\n    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n    switch -exact ($PSCmdlet.ParameterSetName) { \n        { @('ByName', 'InputObject (cdxml)') -contains $_ } {\n      $__cmdletization_returnValue = $null\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:DeleteInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru\n            if ($PSBoundParameters.ContainsKey('InputObject')) {\n                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }\n            } else {\n                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)\n            }\n        }\n    }\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP MSFT_NetNeighbor.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Remove-NetNeighbor' -Alias '*'\n        \n\n28948107-e072-4cd3-a33a-ae883260b675",
    "_time": "2025-08-06T17:25:05.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:49750",
    "_indextime": "1754501105",
    "_serial": "65",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "301",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:25:05 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4104\nEventType=3\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Warning\nRecordNumber=680\nKeywords=None\nTaskCategory=Execute a Remote Command\nOpCode=On create calls\nMessage=Splunk could not get the description for this event. Either the component that raises this event is not installed on your local computer or the installation is corrupt.\n\nFormatMessage error:\n\nGot the following information from this event: \n\nthodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('State')) {\n          [object]$__cmdletization_value = ${State}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'State'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetNeighbor.State'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'State'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetNeighbor.State'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('AddressFamily')) {\n          [object]$__cmdletization_value = ${AddressFamily}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AddressFamily'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetNeighbor.AddressFamily'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AddressFamily'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetNeighbor.AddressFamily'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'CmdletOutput'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'Out'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.UInt32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Create', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo)\n        }\n    }\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP MSFT_NetNeighbor.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'New-NetNeighbor' -Alias '*'\n        \n\nfunction Get-NetNeighbor\n{\n    [CmdletBinding(DefaultParameterSetName='ByName', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/StandardCimv2/MSFT_NetNeighbor')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByName', Position=0)]\n    [ValidateNotNull()]\n    [string[]]\n    ${IPAddress},\n\n    [Parameter(ParameterSetName='ByName', ValueFromPipelineByPropertyName=$true)]\n    [Alias('ifIndex')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${InterfaceIndex},\n\n    [Parameter(ParameterSetName='ByName', ValueFromPipelineByPropertyName=$true)]\n    [Alias('ifAlias')]\n    [ValidateNotNull()]\n    [string[]]\n    ${InterfaceAlias},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [string[]]\n    ${LinkLayerAddress},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetNeighbor.State[]]\n    ${State},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetNeighbor.AddressFamily[]]\n    ${AddressFamily},\n\n    [Parameter(ParameterSetName='ByName', ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIPInterface')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedIPInterface},\n\n    [Parameter(ParameterSetName='ByName')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='ByName')]\n    [switch]\n    ${IncludeAllCompartments},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [switch]\n    ${AsJob})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('IPAddress') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${IPAddress})\n        $__cmdletization_queryBuilder.FilterByProperty('IPAddress', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('InterfaceIndex') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${InterfaceIndex})\n        $__cmdletization_queryBuilder.FilterByProperty('InterfaceIndex', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('InterfaceAlias') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${InterfaceAlias})\n        $__cmdletization_queryBuilder.FilterByProperty('InterfaceAlias', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('LinkLayerAddress') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${LinkLayerAddress})\n        $__cmdletization_queryBuilder.FilterByProperty('LinkLayerAddress', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('State') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${State})\n        $__cmdletization_queryBuilder.FilterByProperty('State', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AddressFamily') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${AddressFamily})\n        $__cmdletization_queryBuilder.FilterByProperty('AddressFamily', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedIPInterface') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedIPInterface}, 'MSFT_NetIPInterfaceNeighbor', 'Antecedent', 'Dependent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})\n    }\n    if ($PSBoundParameters.ContainsKey('IncludeAllCompartments') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('IncludeAllCompartments', ${IncludeAllCompartments})\n    }\n\n\n    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP MSFT_NetNeighbor.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Get-NetNeighbor' -Alias '*'\n        \n\nfunction Set-NetNeighbor\n{\n    [CmdletBinding(DefaultParameterSetName='ByName', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/StandardCimv2/MSFT_NetNeighbor')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByName', Position=0)]\n    [ValidateNotNull()]\n    [string[]]\n    ${IPAddress},\n\n    [Parameter(ParameterSetName='ByName', ValueFromPipelineByPropertyName=$true)]\n    [Alias('ifIndex')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${InterfaceIndex},\n\n    [Parameter(ParameterSetName='ByName', ValueFromPipelineByPropertyName=$true)]\n    [Alias('ifAlias')]\n    [ValidateNotNull()]\n    [string[]]\n    ${InterfaceAlias},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetNeighbor.State[]]\n    ${State},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetNeighbor.AddressFamily[]]\n    ${AddressFamily},\n\n    [Parameter(ParameterSetName='ByName')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='ByName')]\n    [switch]\n    ${IncludeAllCompartments},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetNeighbor')]\n    [ValidateNotNull()]\n    [ciminstance[]]\n    ${InputObject},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [string]\n    ${LinkLayerAddress},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${AsJob},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${PassThru})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('IPAddress') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${IPAddress})\n        $__cmdletization_queryBuilder.FilterByProperty('IPAddress', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('InterfaceIndex') -and (@('ByName') -contains $PSCmdlet.\n28948107-e072-4cd3-a33a-ae883260b675",
    "_time": "2025-08-06T17:25:05.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:49274",
    "_indextime": "1754501105",
    "_serial": "66",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "385",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:25:05 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4104\nEventType=3\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Warning\nRecordNumber=679\nKeywords=None\nTaskCategory=Execute a Remote Command\nOpCode=On create calls\nMessage=Splunk could not get the description for this event. Either the component that raises this event is not installed on your local computer or the installation is corrupt.\n\nFormatMessage error:\n\nGot the following information from this event: \n\n\n#requires -version 3.0\n\ntry { Microsoft.PowerShell.Core\\Set-StrictMode -Off } catch { }\n\n$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module\n\n$script:ClassName = 'ROOT/StandardCimv2/MSFT_NetNeighbor'\n$script:ClassVersion = '1.0.0'\n$script:ModuleVersion = '1.0.0'\n$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]\n\n$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()\n\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function @()\n        \n\nfunction __cmdletization_BindCommonParameters\n{\n    param(\n        $__cmdletization_objectModelWrapper,\n        $myPSBoundParameters\n    )       \n                \n\n        if ($myPSBoundParameters.ContainsKey('CimSession')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('AsJob')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] \n        }\n                    \n\n}\n                \n\nfunction New-NetNeighbor\n{\n    [CmdletBinding(DefaultParameterSetName='ByInterfaceAlias', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance[]])][OutputType([Microsoft.Management.Infrastructure.CimInstance[]])]\n    param(\n    \n    [Parameter(ParameterSetName='ByInterfaceAlias', Mandatory=$true, Position=0)]\n    [Parameter(ParameterSetName='ByInterfaceIndex', Mandatory=$true, Position=0)]\n    [string]\n    ${IPAddress},\n\n    [Parameter(ParameterSetName='ByInterfaceAlias', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]\n    [Alias('ifAlias')]\n    [string]\n    ${InterfaceAlias},\n\n    [Parameter(ParameterSetName='ByInterfaceAlias')]\n    [Parameter(ParameterSetName='ByInterfaceIndex')]\n    [string]\n    ${LinkLayerAddress},\n\n    [Parameter(ParameterSetName='ByInterfaceAlias')]\n    [Parameter(ParameterSetName='ByInterfaceIndex')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='ByInterfaceAlias')]\n    [Parameter(ParameterSetName='ByInterfaceIndex')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetNeighbor.State]\n    ${State},\n\n    [Parameter(ParameterSetName='ByInterfaceAlias')]\n    [Parameter(ParameterSetName='ByInterfaceIndex')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetNeighbor.AddressFamily]\n    ${AddressFamily},\n\n    [Parameter(ParameterSetName='ByInterfaceIndex', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]\n    [Alias('ifIndex')]\n    [uint32]\n    ${InterfaceIndex},\n\n    [Parameter(ParameterSetName='ByInterfaceAlias')]\n    [Parameter(ParameterSetName='ByInterfaceIndex')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByInterfaceAlias')]\n    [Parameter(ParameterSetName='ByInterfaceIndex')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByInterfaceAlias')]\n    [Parameter(ParameterSetName='ByInterfaceIndex')]\n    [switch]\n    ${AsJob})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n      $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n\n      switch -exact ($PSCmdlet.ParameterSetName) { \n        { @('ByInterfaceAlias') -contains $_ } {\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('IPAddress')) {\n          [object]$__cmdletization_value = ${IPAddress}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IPAddress'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IPAddress'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('InterfaceAlias')) {\n          [object]$__cmdletization_value = ${InterfaceAlias}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InterfaceAlias'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InterfaceAlias'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('LinkLayerAddress')) {\n          [object]$__cmdletization_value = ${LinkLayerAddress}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LinkLayerAddress'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LinkLayerAddress'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('PolicyStore')) {\n          [object]$__cmdletization_value = ${PolicyStore}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('State')) {\n          [object]$__cmdletization_value = ${State}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'State'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetNeighbor.State'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'State'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetNeighbor.State'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('AddressFamily')) {\n          [object]$__cmdletization_value = ${AddressFamily}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AddressFamily'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetNeighbor.AddressFamily'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AddressFamily'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetNeighbor.AddressFamily'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'CmdletOutput'; ParameterType = 'Microsoft.Management.Infrastructure.CimInstance[]'; Bindings = 'Out'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n      $__cmdletization_returnValue = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{ Name = 'ReturnValue'; ParameterType = 'System.UInt32'; Bindings = 'Error'; Value = $null; IsValuePresent = $false }\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('Create', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_methodInvocationInfo)\n        }\n        { @('ByInterfaceIndex') -contains $_ } {\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('IPAddress')) {\n          [object]$__cmdletization_value = ${IPAddress}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IPAddress'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IPAddress'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('InterfaceIndex')) {\n          [object]$__cmdletization_value = ${InterfaceIndex}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InterfaceIndex'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InterfaceIndex'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('LinkLayerAddress')) {\n          [object]$__cmdletization_value = ${LinkLayerAddress}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LinkLayerAddress'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'LinkLayerAddress'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n        }\n        $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n        [object]$__cmdletization_defaultValue = $null\n        [object]$__cmdletization_defaultValueIsPresent = $false\n        if ($PSBoundParameters.ContainsKey('PolicyStore')) {\n          [object]$__cmdletization_value = ${PolicyStore}\n          $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'PolicyStore'; ParameterType = 'System.String'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n        } else {\n          $__cmdletization_me\n28948107-e072-4cd3-a33a-ae883260b675",
    "_time": "2025-08-06T17:25:05.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:48798",
    "_indextime": "1754501105",
    "_serial": "67",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "275",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:25:05 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=678\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Set-NetIPv6Protocol\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 08a20d3f-559d-4e13-aa36-d072c8224dd8\n        Host Application = powershell.exe -Command Get-NetNeighbor\n        Engine Version = 5.1.20348.3932\n        Runspace ID = 330567f1-a99e-439d-8d25-0d7203a495c9\n        Pipeline ID = 20\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 60\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:25:05.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:48757",
    "_indextime": "1754501105",
    "_serial": "68",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "39",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:25:05 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=677\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Get-NetIPv6Protocol\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 08a20d3f-559d-4e13-aa36-d072c8224dd8\n        Host Application = powershell.exe -Command Get-NetNeighbor\n        Engine Version = 5.1.20348.3932\n        Runspace ID = 330567f1-a99e-439d-8d25-0d7203a495c9\n        Pipeline ID = 20\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 58\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:25:05.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:48716",
    "_indextime": "1754501105",
    "_serial": "69",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "39",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:25:05 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=676\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 08a20d3f-559d-4e13-aa36-d072c8224dd8\n        Host Application = powershell.exe -Command Get-NetNeighbor\n        Engine Version = 5.1.20348.3932\n        Runspace ID = 330567f1-a99e-439d-8d25-0d7203a495c9\n        Pipeline ID = 20\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 56\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:25:05.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:48678",
    "_indextime": "1754501105",
    "_serial": "70",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "38",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:25:05 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=675\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Set-StrictMode): \"Set-StrictMode\"\nParameterBinding(Set-StrictMode): name=\"Off\"; value=\"True\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 08a20d3f-559d-4e13-aa36-d072c8224dd8\n        Host Application = powershell.exe -Command Get-NetNeighbor\n        Engine Version = 5.1.20348.3932\n        Runspace ID = 330567f1-a99e-439d-8d25-0d7203a495c9\n        Pipeline ID = 20\n        Command Name = Set-StrictMode\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 54\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:25:05.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:48640",
    "_indextime": "1754501105",
    "_serial": "71",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "38",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:25:05 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4104\nEventType=3\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Warning\nRecordNumber=674\nKeywords=None\nTaskCategory=Execute a Remote Command\nOpCode=On create calls\nMessage=Creating Scriptblock text (4 of 4):\n__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MaxValidLifetime'; ParameterType = 'System.TimeSpan'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('MaxTemporaryPreferredLifetime')) {\n            [object]$__cmdletization_value = ${MaxTemporaryPreferredLifetime}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MaxPreferredLifetime'; ParameterType = 'System.TimeSpan'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MaxPreferredLifetime'; ParameterType = 'System.TimeSpan'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('TemporaryRegenerateTime')) {\n            [object]$__cmdletization_value = ${TemporaryRegenerateTime}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RegenerateTime'; ParameterType = 'System.TimeSpan'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RegenerateTime'; ParameterType = 'System.TimeSpan'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('MaxTemporaryDesyncTime')) {\n            [object]$__cmdletization_value = ${MaxTemporaryDesyncTime}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MaxRandomTime'; ParameterType = 'System.TimeSpan'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MaxRandomTime'; ParameterType = 'System.TimeSpan'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n      $__cmdletization_returnValue = $null\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:ModifyInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru\n            if ($PSBoundParameters.ContainsKey('InputObject')) {\n                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }\n            } else {\n                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)\n            }\n        }\n    }\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP MSFT_NetIPv6Protocol.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Set-NetIPv6Protocol' -Alias '*'\n        \n\n\nScriptBlock ID: da42e79e-d49e-4896-a043-33f681075e30\nPath:",
    "_time": "2025-08-06T17:25:05.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:48484",
    "_indextime": "1754501105",
    "_serial": "72",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "92",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:25:05 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4104\nEventType=3\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Warning\nRecordNumber=673\nKeywords=None\nTaskCategory=Execute a Remote Command\nOpCode=On create calls\nMessage=Splunk could not get the description for this event. Either the component that raises this event is not installed on your local computer or the installation is corrupt.\n\nFormatMessage error:\n\nGot the following information from this event: \n\n[object]$__cmdletization_value = ${SourceRoutingBehavior}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SourceRoutingBehavior'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.SourceRoutingBehavior'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SourceRoutingBehavior'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.SourceRoutingBehavior'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('DhcpMediaSense')) {\n            [object]$__cmdletization_value = ${DhcpMediaSense}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DhcpMediaSense'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.DhcpMediaSense'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DhcpMediaSense'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.DhcpMediaSense'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('MediaSenseEventLog')) {\n            [object]$__cmdletization_value = ${MediaSenseEventLog}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MediaSenseEventLog'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.MediaSenseEventLog'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MediaSenseEventLog'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.MediaSenseEventLog'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('MldLevel')) {\n            [object]$__cmdletization_value = ${MldLevel}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MldLevel'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.MldLevel'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MldLevel'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.MldLevel'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('MldVersion')) {\n            [object]$__cmdletization_value = ${MldVersion}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MldVersion'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.MldVersion'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MldVersion'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.MldVersion'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('MulticastForwarding')) {\n            [object]$__cmdletization_value = ${MulticastForwarding}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MulticastForwarding'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.MulticastForwarding'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MulticastForwarding'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.MulticastForwarding'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('GroupForwardedFragments')) {\n            [object]$__cmdletization_value = ${GroupForwardedFragments}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'GroupForwardedFragments'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.GroupForwardedFragments'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'GroupForwardedFragments'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.GroupForwardedFragments'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('RandomizeIdentifiers')) {\n            [object]$__cmdletization_value = ${RandomizeIdentifiers}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RandomizeIdentifiers'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.RandomizeIdentifiers'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RandomizeIdentifiers'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.RandomizeIdentifiers'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('AddressMaskReply')) {\n            [object]$__cmdletization_value = ${AddressMaskReply}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AddressMaskReply'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.AddressMaskReply'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AddressMaskReply'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.AddressMaskReply'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('DeadGatewayDetection')) {\n            [object]$__cmdletization_value = ${DeadGatewayDetection}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DeadGatewayDetection'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.DeadGatewayDetection'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DeadGatewayDetection'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.DeadGatewayDetection'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('UseTemporaryAddresses')) {\n            [object]$__cmdletization_value = ${UseTemporaryAddresses}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'UseTemporaryAddresses'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.UseTemporaryAddresses'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'UseTemporaryAddresses'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.UseTemporaryAddresses'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('MaxTemporaryDadAttempts')) {\n            [object]$__cmdletization_value = ${MaxTemporaryDadAttempts}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MaxDadAttempts'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MaxDadAttempts'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('MaxTemporaryValidLifetime')) {\n            [object]$__cmdletization_value = ${MaxTemporaryValidLifetime}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MaxValidLifetime'; ParameterType = 'System.TimeSpan'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $\nda42e79e-d49e-4896-a043-33f681075e30",
    "_time": "2025-08-06T17:25:05.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:48069",
    "_indextime": "1754501105",
    "_serial": "73",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "145",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:25:05 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4104\nEventType=3\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Warning\nRecordNumber=672\nKeywords=None\nTaskCategory=Execute a Remote Command\nOpCode=On create calls\nMessage=Splunk could not get the description for this event. Either the component that raises this event is not installed on your local computer or the installation is corrupt.\n\nFormatMessage error:\n\nGot the following information from this event: \n\nperty('MaxValidLifetime', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('MaxTemporaryPreferredLifetime') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${MaxTemporaryPreferredLifetime})\n        $__cmdletization_queryBuilder.FilterByProperty('MaxPreferredLifetime', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('TemporaryRegenerateTime') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${TemporaryRegenerateTime})\n        $__cmdletization_queryBuilder.FilterByProperty('RegenerateTime', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('MaxTemporaryDesyncTime') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${MaxTemporaryDesyncTime})\n        $__cmdletization_queryBuilder.FilterByProperty('MaxRandomTime', $__cmdletization_values, $false, 'Default')\n    }\n\n\n    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP MSFT_NetIPv6Protocol.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Get-NetIPv6Protocol' -Alias '*'\n        \n\nfunction Set-NetIPv6Protocol\n{\n    [CmdletBinding(DefaultParameterSetName='InputObject (cdxml)', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/StandardCimv2/MSFT_NetIPv6Protocol')]\n\n    param(\n    \n    [Parameter(ParameterSetName='InputObject (cdxml)', ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetIPv6Protocol')]\n    [ValidateNotNull()]\n    [ciminstance[]]\n    ${InputObject},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [uint32]\n    ${DefaultHopLimit},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('NeighborCacheLimit')]\n    [uint32]\n    ${NeighborCacheLimitEntries},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('RouteCacheLimit')]\n    [uint32]\n    ${RouteCacheLimitEntries},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('ReassemblyLimit')]\n    [uint32]\n    ${ReassemblyLimitBytes},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.IcmpRedirects]\n    ${IcmpRedirects},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.SourceRoutingBehavior]\n    ${SourceRoutingBehavior},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.DhcpMediaSense]\n    ${DhcpMediaSense},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.MediaSenseEventLog]\n    ${MediaSenseEventLog},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.MldLevel]\n    ${MldLevel},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.MldVersion]\n    ${MldVersion},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.MulticastForwarding]\n    ${MulticastForwarding},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.GroupForwardedFragments]\n    ${GroupForwardedFragments},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.RandomizeIdentifiers]\n    ${RandomizeIdentifiers},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.AddressMaskReply]\n    ${AddressMaskReply},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.DeadGatewayDetection]\n    ${DeadGatewayDetection},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.UseTemporaryAddresses]\n    ${UseTemporaryAddresses},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('MaxDadAttempts')]\n    [uint32]\n    ${MaxTemporaryDadAttempts},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('MaxValidLifetime')]\n    [timespan]\n    ${MaxTemporaryValidLifetime},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('MaxPreferredLifetime')]\n    [timespan]\n    ${MaxTemporaryPreferredLifetime},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('RegenerateTime')]\n    [timespan]\n    ${TemporaryRegenerateTime},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('MaxRandomTime')]\n    [timespan]\n    ${MaxTemporaryDesyncTime},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${AsJob},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${PassThru})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n\n\n    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n    switch -exact ($PSCmdlet.ParameterSetName) { \n        { @('InputObject (cdxml)') -contains $_ } {\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('DefaultHopLimit')) {\n            [object]$__cmdletization_value = ${DefaultHopLimit}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DefaultHopLimit'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DefaultHopLimit'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('NeighborCacheLimitEntries')) {\n            [object]$__cmdletization_value = ${NeighborCacheLimitEntries}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NeighborCacheLimit'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NeighborCacheLimit'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('RouteCacheLimitEntries')) {\n            [object]$__cmdletization_value = ${RouteCacheLimitEntries}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RouteCacheLimit'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RouteCacheLimit'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('ReassemblyLimitBytes')) {\n            [object]$__cmdletization_value = ${ReassemblyLimitBytes}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ReassemblyLimit'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ReassemblyLimit'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('IcmpRedirects')) {\n            [object]$__cmdletization_value = ${IcmpRedirects}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IcmpRedirects'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.IcmpRedirects'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IcmpRedirects'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.IcmpRedirects'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('SourceRoutingBehavior')) {\n            \nda42e79e-d49e-4896-a043-33f681075e30",
    "_time": "2025-08-06T17:25:05.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:47654",
    "_indextime": "1754501105",
    "_serial": "74",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "293",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:25:05 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4104\nEventType=3\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Warning\nRecordNumber=671\nKeywords=None\nTaskCategory=Execute a Remote Command\nOpCode=On create calls\nMessage=Splunk could not get the description for this event. Either the component that raises this event is not installed on your local computer or the installation is corrupt.\n\nFormatMessage error:\n\nGot the following information from this event: \n\n\n#requires -version 3.0\n\ntry { Microsoft.PowerShell.Core\\Set-StrictMode -Off } catch { }\n\n$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module\n\n$script:ClassName = 'ROOT/StandardCimv2/MSFT_NetIPv6Protocol'\n$script:ClassVersion = '1.0.0'\n$script:ModuleVersion = '1.0.0'\n$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]\n\n$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()\n\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function @()\n        \n\nfunction __cmdletization_BindCommonParameters\n{\n    param(\n        $__cmdletization_objectModelWrapper,\n        $myPSBoundParameters\n    )       \n                \n\n        if ($myPSBoundParameters.ContainsKey('CimSession')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('AsJob')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] \n        }\n                    \n\n}\n                \n\nfunction Get-NetIPv6Protocol\n{\n    [CmdletBinding(DefaultParameterSetName='ByName', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/StandardCimv2/MSFT_NetIPv6Protocol')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${DefaultHopLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Alias('NeighborCacheLimit')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${NeighborCacheLimitEntries},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Alias('RouteCacheLimit')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${RouteCacheLimitEntries},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Alias('ReassemblyLimit')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${ReassemblyLimitBytes},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.IcmpRedirects[]]\n    ${IcmpRedirects},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.SourceRoutingBehavior[]]\n    ${SourceRoutingBehavior},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.DhcpMediaSense[]]\n    ${DhcpMediaSense},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.MediaSenseEventLog[]]\n    ${MediaSenseEventLog},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.MldLevel[]]\n    ${MldLevel},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.MldVersion[]]\n    ${MldVersion},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.MulticastForwarding[]]\n    ${MulticastForwarding},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.GroupForwardedFragments[]]\n    ${GroupForwardedFragments},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.RandomizeIdentifiers[]]\n    ${RandomizeIdentifiers},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.AddressMaskReply[]]\n    ${AddressMaskReply},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.DeadGatewayDetection[]]\n    ${DeadGatewayDetection},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv6Protocol.UseTemporaryAddresses[]]\n    ${UseTemporaryAddresses},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Alias('MaxDadAttempts')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${MaxTemporaryDadAttempts},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Alias('MaxValidLifetime')]\n    [ValidateNotNull()]\n    [timespan[]]\n    ${MaxTemporaryValidLifetime},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Alias('MaxPreferredLifetime')]\n    [ValidateNotNull()]\n    [timespan[]]\n    ${MaxTemporaryPreferredLifetime},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Alias('RegenerateTime')]\n    [ValidateNotNull()]\n    [timespan[]]\n    ${TemporaryRegenerateTime},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Alias('MaxRandomTime')]\n    [ValidateNotNull()]\n    [timespan[]]\n    ${MaxTemporaryDesyncTime},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [switch]\n    ${AsJob})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('DefaultHopLimit') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DefaultHopLimit})\n        $__cmdletization_queryBuilder.FilterByProperty('DefaultHopLimit', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('NeighborCacheLimitEntries') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${NeighborCacheLimitEntries})\n        $__cmdletization_queryBuilder.FilterByProperty('NeighborCacheLimit', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('RouteCacheLimitEntries') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${RouteCacheLimitEntries})\n        $__cmdletization_queryBuilder.FilterByProperty('RouteCacheLimit', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('ReassemblyLimitBytes') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${ReassemblyLimitBytes})\n        $__cmdletization_queryBuilder.FilterByProperty('ReassemblyLimit', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('IcmpRedirects') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${IcmpRedirects})\n        $__cmdletization_queryBuilder.FilterByProperty('IcmpRedirects', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('SourceRoutingBehavior') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${SourceRoutingBehavior})\n        $__cmdletization_queryBuilder.FilterByProperty('SourceRoutingBehavior', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DhcpMediaSense') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DhcpMediaSense})\n        $__cmdletization_queryBuilder.FilterByProperty('DhcpMediaSense', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('MediaSenseEventLog') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${MediaSenseEventLog})\n        $__cmdletization_queryBuilder.FilterByProperty('MediaSenseEventLog', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('MldLevel') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${MldLevel})\n        $__cmdletization_queryBuilder.FilterByProperty('MldLevel', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('MldVersion') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${MldVersion})\n        $__cmdletization_queryBuilder.FilterByProperty('MldVersion', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('MulticastForwarding') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${MulticastForwarding})\n        $__cmdletization_queryBuilder.FilterByProperty('MulticastForwarding', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('GroupForwardedFragments') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${GroupForwardedFragments})\n        $__cmdletization_queryBuilder.FilterByProperty('GroupForwardedFragments', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('RandomizeIdentifiers') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${RandomizeIdentifiers})\n        $__cmdletization_queryBuilder.FilterByProperty('RandomizeIdentifiers', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AddressMaskReply') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${AddressMaskReply})\n        $__cmdletization_queryBuilder.FilterByProperty('AddressMaskReply', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DeadGatewayDetection') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DeadGatewayDetection})\n        $__cmdletization_queryBuilder.FilterByProperty('DeadGatewayDetection', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('UseTemporaryAddresses') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${UseTemporaryAddresses})\n        $__cmdletization_queryBuilder.FilterByProperty('UseTemporaryAddresses', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('MaxTemporaryDadAttempts') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${MaxTemporaryDadAttempts})\n        $__cmdletization_queryBuilder.FilterByProperty('MaxDadAttempts', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('MaxTemporaryValidLifetime') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${MaxTemporaryValidLifetime})\n        $__cmdletization_queryBuilder.FilterByPro\nda42e79e-d49e-4896-a043-33f681075e30",
    "_time": "2025-08-06T17:25:05.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:47239",
    "_indextime": "1754501105",
    "_serial": "75",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "313",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:25:05 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=670\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Set-NetIPv4Protocol\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 08a20d3f-559d-4e13-aa36-d072c8224dd8\n        Host Application = powershell.exe -Command Get-NetNeighbor\n        Engine Version = 5.1.20348.3932\n        Runspace ID = 330567f1-a99e-439d-8d25-0d7203a495c9\n        Pipeline ID = 20\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 52\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:25:05.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:47198",
    "_indextime": "1754501105",
    "_serial": "76",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "39",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:25:05 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=669\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Get-NetIPv4Protocol\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 08a20d3f-559d-4e13-aa36-d072c8224dd8\n        Host Application = powershell.exe -Command Get-NetNeighbor\n        Engine Version = 5.1.20348.3932\n        Runspace ID = 330567f1-a99e-439d-8d25-0d7203a495c9\n        Pipeline ID = 20\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 50\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:25:05.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:47157",
    "_indextime": "1754501105",
    "_serial": "77",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "39",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:25:05 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=668\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 08a20d3f-559d-4e13-aa36-d072c8224dd8\n        Host Application = powershell.exe -Command Get-NetNeighbor\n        Engine Version = 5.1.20348.3932\n        Runspace ID = 330567f1-a99e-439d-8d25-0d7203a495c9\n        Pipeline ID = 20\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 48\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:25:05.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:47119",
    "_indextime": "1754501105",
    "_serial": "78",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "38",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:25:05 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=667\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Set-StrictMode): \"Set-StrictMode\"\nParameterBinding(Set-StrictMode): name=\"Off\"; value=\"True\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 08a20d3f-559d-4e13-aa36-d072c8224dd8\n        Host Application = powershell.exe -Command Get-NetNeighbor\n        Engine Version = 5.1.20348.3932\n        Runspace ID = 330567f1-a99e-439d-8d25-0d7203a495c9\n        Pipeline ID = 20\n        Command Name = Set-StrictMode\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 46\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:25:05.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:47081",
    "_indextime": "1754501105",
    "_serial": "79",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "38",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:25:05 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4104\nEventType=3\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Warning\nRecordNumber=666\nKeywords=None\nTaskCategory=Execute a Remote Command\nOpCode=On create calls\nMessage=Creating Scriptblock text (4 of 4):\nultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('MinimumMtu')) {\n            [object]$__cmdletization_value = ${MinimumMtu}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MinimumMtu'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MinimumMtu'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n      $__cmdletization_returnValue = $null\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:ModifyInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru\n            if ($PSBoundParameters.ContainsKey('InputObject')) {\n                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }\n            } else {\n                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)\n            }\n        }\n    }\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP MSFT_NetIPv4Protocol.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Set-NetIPv4Protocol' -Alias '*'\n        \n\n\nScriptBlock ID: 9b2b4607-b5a2-4114-885e-cf82c5eef3e9\nPath:",
    "_time": "2025-08-06T17:25:05.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:46989",
    "_indextime": "1754501105",
    "_serial": "80",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "72",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:25:05 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4104\nEventType=3\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Warning\nRecordNumber=665\nKeywords=None\nTaskCategory=Execute a Remote Command\nOpCode=On create calls\nMessage=Splunk could not get the description for this event. Either the component that raises this event is not installed on your local computer or the installation is corrupt.\n\nFormatMessage error:\n\nGot the following information from this event: \n\nletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IcmpRedirects'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.IcmpRedirects'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('SourceRoutingBehavior')) {\n            [object]$__cmdletization_value = ${SourceRoutingBehavior}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SourceRoutingBehavior'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.SourceRoutingBehavior'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'SourceRoutingBehavior'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.SourceRoutingBehavior'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('DhcpMediaSense')) {\n            [object]$__cmdletization_value = ${DhcpMediaSense}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DhcpMediaSense'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.DhcpMediaSense'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DhcpMediaSense'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.DhcpMediaSense'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('MediaSenseEventLog')) {\n            [object]$__cmdletization_value = ${MediaSenseEventLog}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MediaSenseEventLog'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.MediaSenseEventLog'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MediaSenseEventLog'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.MediaSenseEventLog'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('IGMPLevel')) {\n            [object]$__cmdletization_value = ${IGMPLevel}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MldLevel'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.MldLevel'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MldLevel'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.MldLevel'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('IGMPVersion')) {\n            [object]$__cmdletization_value = ${IGMPVersion}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MldVersion'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.MldVersion'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MldVersion'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.MldVersion'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('MulticastForwarding')) {\n            [object]$__cmdletization_value = ${MulticastForwarding}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MulticastForwarding'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.MulticastForwarding'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'MulticastForwarding'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.MulticastForwarding'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('GroupForwardedFragments')) {\n            [object]$__cmdletization_value = ${GroupForwardedFragments}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'GroupForwardedFragments'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.GroupForwardedFragments'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'GroupForwardedFragments'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.GroupForwardedFragments'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('RandomizeIdentifiers')) {\n            [object]$__cmdletization_value = ${RandomizeIdentifiers}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RandomizeIdentifiers'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.RandomizeIdentifiers'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RandomizeIdentifiers'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.RandomizeIdentifiers'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('AddressMaskReply')) {\n            [object]$__cmdletization_value = ${AddressMaskReply}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AddressMaskReply'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.AddressMaskReply'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AddressMaskReply'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.AddressMaskReply'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('DeadGatewayDetection')) {\n            [object]$__cmdletization_value = ${DeadGatewayDetection}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DeadGatewayDetection'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.DeadGatewayDetection'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DeadGatewayDetection'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.DeadGatewayDetection'; Bindings = 'In'; Value = $__cmdletization_defa\n9b2b4607-b5a2-4114-885e-cf82c5eef3e9",
    "_time": "2025-08-06T17:25:05.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:46635",
    "_indextime": "1754501105",
    "_serial": "81",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "124",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:25:05 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4104\nEventType=3\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Warning\nRecordNumber=664\nKeywords=None\nTaskCategory=Execute a Remote Command\nOpCode=On create calls\nMessage=Splunk could not get the description for this event. Either the component that raises this event is not installed on your local computer or the installation is corrupt.\n\nFormatMessage error:\n\nGot the following information from this event: \n\non') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DeadGatewayDetection})\n        $__cmdletization_queryBuilder.FilterByProperty('DeadGatewayDetection', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('MinimumMtu') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${MinimumMtu})\n        $__cmdletization_queryBuilder.FilterByProperty('MinimumMtu', $__cmdletization_values, $false, 'Default')\n    }\n\n\n    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP MSFT_NetIPv4Protocol.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Get-NetIPv4Protocol' -Alias '*'\n        \n\nfunction Set-NetIPv4Protocol\n{\n    [CmdletBinding(DefaultParameterSetName='InputObject (cdxml)', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/StandardCimv2/MSFT_NetIPv4Protocol')]\n\n    param(\n    \n    [Parameter(ParameterSetName='InputObject (cdxml)', ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetIPv4Protocol')]\n    [ValidateNotNull()]\n    [ciminstance[]]\n    ${InputObject},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [uint32]\n    ${DefaultHopLimit},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('NeighborCacheLimit')]\n    [uint32]\n    ${NeighborCacheLimitEntries},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('RouteCacheLimit')]\n    [uint32]\n    ${RouteCacheLimitEntries},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('ReassemblyLimit')]\n    [uint32]\n    ${ReassemblyLimitBytes},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.IcmpRedirects]\n    ${IcmpRedirects},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.SourceRoutingBehavior]\n    ${SourceRoutingBehavior},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.DhcpMediaSense]\n    ${DhcpMediaSense},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.MediaSenseEventLog]\n    ${MediaSenseEventLog},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('MldLevel')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.MldLevel]\n    ${IGMPLevel},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('MldVersion')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.MldVersion]\n    ${IGMPVersion},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.MulticastForwarding]\n    ${MulticastForwarding},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.GroupForwardedFragments]\n    ${GroupForwardedFragments},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.RandomizeIdentifiers]\n    ${RandomizeIdentifiers},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.AddressMaskReply]\n    ${AddressMaskReply},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.DeadGatewayDetection]\n    ${DeadGatewayDetection},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [uint32]\n    ${MinimumMtu},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${AsJob},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${PassThru})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n\n\n    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n    switch -exact ($PSCmdlet.ParameterSetName) { \n        { @('InputObject (cdxml)') -contains $_ } {\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('DefaultHopLimit')) {\n            [object]$__cmdletization_value = ${DefaultHopLimit}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DefaultHopLimit'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DefaultHopLimit'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('NeighborCacheLimitEntries')) {\n            [object]$__cmdletization_value = ${NeighborCacheLimitEntries}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NeighborCacheLimit'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NeighborCacheLimit'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('RouteCacheLimitEntries')) {\n            [object]$__cmdletization_value = ${RouteCacheLimitEntries}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RouteCacheLimit'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RouteCacheLimit'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('ReassemblyLimitBytes')) {\n            [object]$__cmdletization_value = ${ReassemblyLimitBytes}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ReassemblyLimit'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ReassemblyLimit'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('IcmpRedirects')) {\n            [object]$__cmdletization_value = ${IcmpRedirects}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IcmpRedirects'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.IcmpRedirects'; Bindings = 'In'; Value = $__cmd\n9b2b4607-b5a2-4114-885e-cf82c5eef3e9",
    "_time": "2025-08-06T17:25:05.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:46281",
    "_indextime": "1754501105",
    "_serial": "82",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "255",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:25:05 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4104\nEventType=3\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Warning\nRecordNumber=663\nKeywords=None\nTaskCategory=Execute a Remote Command\nOpCode=On create calls\nMessage=Splunk could not get the description for this event. Either the component that raises this event is not installed on your local computer or the installation is corrupt.\n\nFormatMessage error:\n\nGot the following information from this event: \n\n\n#requires -version 3.0\n\ntry { Microsoft.PowerShell.Core\\Set-StrictMode -Off } catch { }\n\n$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module\n\n$script:ClassName = 'ROOT/StandardCimv2/MSFT_NetIPv4Protocol'\n$script:ClassVersion = '1.0.0'\n$script:ModuleVersion = '1.0.0'\n$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]\n\n$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()\n\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function @()\n        \n\nfunction __cmdletization_BindCommonParameters\n{\n    param(\n        $__cmdletization_objectModelWrapper,\n        $myPSBoundParameters\n    )       \n                \n\n        if ($myPSBoundParameters.ContainsKey('CimSession')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('AsJob')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] \n        }\n                    \n\n}\n                \n\nfunction Get-NetIPv4Protocol\n{\n    [CmdletBinding(DefaultParameterSetName='ByName', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/StandardCimv2/MSFT_NetIPv4Protocol')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${DefaultHopLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Alias('NeighborCacheLimit')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${NeighborCacheLimitEntries},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Alias('RouteCacheLimit')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${RouteCacheLimitEntries},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Alias('ReassemblyLimit')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${ReassemblyLimitBytes},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.IcmpRedirects[]]\n    ${IcmpRedirects},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.SourceRoutingBehavior[]]\n    ${SourceRoutingBehavior},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.DhcpMediaSense[]]\n    ${DhcpMediaSense},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.MediaSenseEventLog[]]\n    ${MediaSenseEventLog},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Alias('MldLevel')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.MldLevel[]]\n    ${IGMPLevel},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Alias('MldVersion')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.MldVersion[]]\n    ${IGMPVersion},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.MulticastForwarding[]]\n    ${MulticastForwarding},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.GroupForwardedFragments[]]\n    ${GroupForwardedFragments},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.RandomizeIdentifiers[]]\n    ${RandomizeIdentifiers},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.AddressMaskReply[]]\n    ${AddressMaskReply},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPv4Protocol.DeadGatewayDetection[]]\n    ${DeadGatewayDetection},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${MinimumMtu},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [switch]\n    ${AsJob})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('DefaultHopLimit') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DefaultHopLimit})\n        $__cmdletization_queryBuilder.FilterByProperty('DefaultHopLimit', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('NeighborCacheLimitEntries') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${NeighborCacheLimitEntries})\n        $__cmdletization_queryBuilder.FilterByProperty('NeighborCacheLimit', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('RouteCacheLimitEntries') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${RouteCacheLimitEntries})\n        $__cmdletization_queryBuilder.FilterByProperty('RouteCacheLimit', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('ReassemblyLimitBytes') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${ReassemblyLimitBytes})\n        $__cmdletization_queryBuilder.FilterByProperty('ReassemblyLimit', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('IcmpRedirects') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${IcmpRedirects})\n        $__cmdletization_queryBuilder.FilterByProperty('IcmpRedirects', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('SourceRoutingBehavior') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${SourceRoutingBehavior})\n        $__cmdletization_queryBuilder.FilterByProperty('SourceRoutingBehavior', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DhcpMediaSense') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DhcpMediaSense})\n        $__cmdletization_queryBuilder.FilterByProperty('DhcpMediaSense', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('MediaSenseEventLog') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${MediaSenseEventLog})\n        $__cmdletization_queryBuilder.FilterByProperty('MediaSenseEventLog', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('IGMPLevel') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${IGMPLevel})\n        $__cmdletization_queryBuilder.FilterByProperty('MldLevel', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('IGMPVersion') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${IGMPVersion})\n        $__cmdletization_queryBuilder.FilterByProperty('MldVersion', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('MulticastForwarding') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${MulticastForwarding})\n        $__cmdletization_queryBuilder.FilterByProperty('MulticastForwarding', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('GroupForwardedFragments') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${GroupForwardedFragments})\n        $__cmdletization_queryBuilder.FilterByProperty('GroupForwardedFragments', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('RandomizeIdentifiers') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${RandomizeIdentifiers})\n        $__cmdletization_queryBuilder.FilterByProperty('RandomizeIdentifiers', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AddressMaskReply') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${AddressMaskReply})\n        $__cmdletization_queryBuilder.FilterByProperty('AddressMaskReply', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DeadGatewayDetecti\n9b2b4607-b5a2-4114-885e-cf82c5eef3e9",
    "_time": "2025-08-06T17:25:05.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:45927",
    "_indextime": "1754501105",
    "_serial": "83",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "271",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:25:05 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=662\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Set-NetIPInterface\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 08a20d3f-559d-4e13-aa36-d072c8224dd8\n        Host Application = powershell.exe -Command Get-NetNeighbor\n        Engine Version = 5.1.20348.3932\n        Runspace ID = 330567f1-a99e-439d-8d25-0d7203a495c9\n        Pipeline ID = 20\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 44\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:25:05.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:45886",
    "_indextime": "1754501105",
    "_serial": "84",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "39",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:25:05 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=661\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Get-NetIPInterface\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 08a20d3f-559d-4e13-aa36-d072c8224dd8\n        Host Application = powershell.exe -Command Get-NetNeighbor\n        Engine Version = 5.1.20348.3932\n        Runspace ID = 330567f1-a99e-439d-8d25-0d7203a495c9\n        Pipeline ID = 20\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 42\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:25:05.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:45845",
    "_indextime": "1754501105",
    "_serial": "85",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "39",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:25:05 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=660\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 08a20d3f-559d-4e13-aa36-d072c8224dd8\n        Host Application = powershell.exe -Command Get-NetNeighbor\n        Engine Version = 5.1.20348.3932\n        Runspace ID = 330567f1-a99e-439d-8d25-0d7203a495c9\n        Pipeline ID = 20\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 40\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:25:05.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:45807",
    "_indextime": "1754501105",
    "_serial": "86",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "38",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:25:05 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=659\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Set-StrictMode): \"Set-StrictMode\"\nParameterBinding(Set-StrictMode): name=\"Off\"; value=\"True\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 08a20d3f-559d-4e13-aa36-d072c8224dd8\n        Host Application = powershell.exe -Command Get-NetNeighbor\n        Engine Version = 5.1.20348.3932\n        Runspace ID = 330567f1-a99e-439d-8d25-0d7203a495c9\n        Pipeline ID = 20\n        Command Name = Set-StrictMode\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 38\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:25:05.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:45769",
    "_indextime": "1754501105",
    "_serial": "87",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "38",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:25:05 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4104\nEventType=3\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Warning\nRecordNumber=658\nKeywords=None\nTaskCategory=Execute a Remote Command\nOpCode=On create calls\nMessage=Creating Scriptblock text (5 of 5):\nization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('EcnMarking')) {\n            [object]$__cmdletization_value = ${EcnMarking}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EcnMarking'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.EcnMarking'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'EcnMarking'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.EcnMarking'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('Dhcp')) {\n            [object]$__cmdletization_value = ${Dhcp}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Dhcp'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.Dhcp'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Dhcp'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.Dhcp'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('AutomaticMetric')) {\n            [object]$__cmdletization_value = ${AutomaticMetric}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AutomaticMetric'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.AutomaticMetric'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AutomaticMetric'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.AutomaticMetric'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n      $__cmdletization_returnValue = $null\n      $__cmdletization_methodInvocationInfo = [Microsoft.PowerShell.Cmdletization.MethodInvocationInfo]::new('cim:ModifyInstance', $__cmdletization_methodParameters, $__cmdletization_returnValue)\n      $__cmdletization_passThru = $PSBoundParameters.ContainsKey('PassThru') -and $PassThru\n            if ($PSBoundParameters.ContainsKey('InputObject')) {\n                foreach ($x in $InputObject) { $__cmdletization_objectModelWrapper.ProcessRecord($x, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru) }\n            } else {\n                $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder, $__cmdletization_methodInvocationInfo, $__cmdletization_PassThru)\n            }\n        }\n    }\n\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP MSFT_NetIPInterface.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Set-NetIPInterface' -Alias '*'\n        \n\n\nScriptBlock ID: 4dca8ab6-1b7e-428c-b093-0c7121237ba5\nPath:",
    "_time": "2025-08-06T17:25:05.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:45613",
    "_indextime": "1754501105",
    "_serial": "88",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "92",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:25:05 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4104\nEventType=3\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Warning\nRecordNumber=657\nKeywords=None\nTaskCategory=Execute a Remote Command\nOpCode=On create calls\nMessage=Splunk could not get the description for this event. Either the component that raises this event is not installed on your local computer or the installation is corrupt.\n\nFormatMessage error:\n\nGot the following information from this event: \n\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RetransmitTime'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RetransmitTime'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('DadTransmits')) {\n            [object]$__cmdletization_value = ${DadTransmits}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DadTransmits'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DadTransmits'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('DadRetransmitTimeMs')) {\n            [object]$__cmdletization_value = ${DadRetransmitTimeMs}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DadRetransmitTime'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DadRetransmitTime'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('RouterDiscovery')) {\n            [object]$__cmdletization_value = ${RouterDiscovery}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RouterDiscovery'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.RouterDiscovery'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'RouterDiscovery'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.RouterDiscovery'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('ManagedAddressConfiguration')) {\n            [object]$__cmdletization_value = ${ManagedAddressConfiguration}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ManagedAddressConfiguration'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.ManagedAddressConfiguration'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ManagedAddressConfiguration'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.ManagedAddressConfiguration'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('OtherStatefulConfiguration')) {\n            [object]$__cmdletization_value = ${OtherStatefulConfiguration}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'OtherStatefulConfiguration'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.OtherStatefulConfiguration'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'OtherStatefulConfiguration'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.OtherStatefulConfiguration'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('WeakHostSend')) {\n            [object]$__cmdletization_value = ${WeakHostSend}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'WeakHostSend'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.WeakHostSend'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'WeakHostSend'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.WeakHostSend'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('WeakHostReceive')) {\n            [object]$__cmdletization_value = ${WeakHostReceive}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'WeakHostReceive'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.WeakHostReceive'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'WeakHostReceive'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.WeakHostReceive'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('IgnoreDefaultRoutes')) {\n            [object]$__cmdletization_value = ${IgnoreDefaultRoutes}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IgnoreDefaultRoutes'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.IgnoreDefaultRoutes'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'IgnoreDefaultRoutes'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.IgnoreDefaultRoutes'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('AdvertisedRouterLifetime')) {\n            [object]$__cmdletization_value = ${AdvertisedRouterLifetime}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AdvertisedRouterLifetime'; ParameterType = 'System.TimeSpan'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AdvertisedRouterLifetime'; ParameterType = 'System.TimeSpan'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('AdvertiseDefaultRoute')) {\n            [object]$__cmdletization_value = ${AdvertiseDefaultRoute}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AdvertiseDefaultRoute'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.AdvertiseDefaultRoute'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'AdvertiseDefaultRoute'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.AdvertiseDefaultRoute'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('CurrentHopLimit')) {\n            [object]$__cmdletization_value = ${CurrentHopLimit}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'CurrentHopLimit'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'CurrentHopLimit'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('ForceArpNdWolPattern')) {\n            [object]$__cmdletization_value = ${ForceArpNdWolPattern}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ForceArpNdWolPattern'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.ForceArpNdWolPattern'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ForceArpNdWolPattern'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.ForceArpNdWolPattern'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('DirectedMacWolPattern')) {\n            [object]$__cmdletization_value = ${DirectedMacWolPattern}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DirectedMacWolPattern'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.DirectedMacWolPattern'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'DirectedMacWolPattern'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.DirectedMacWolPattern'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdlet\n4dca8ab6-1b7e-428c-b093-0c7121237ba5",
    "_time": "2025-08-06T17:25:05.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:45171",
    "_indextime": "1754501105",
    "_serial": "89",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "154",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:25:05 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4104\nEventType=3\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Warning\nRecordNumber=656\nKeywords=None\nTaskCategory=Execute a Remote Command\nOpCode=On create calls\nMessage=Splunk could not get the description for this event. Either the component that raises this event is not installed on your local computer or the installation is corrupt.\n\nFormatMessage error:\n\nGot the following information from this event: \n\nName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.WeakHostReceive]\n    ${WeakHostReceive},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.IgnoreDefaultRoutes]\n    ${IgnoreDefaultRoutes},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [timespan]\n    ${AdvertisedRouterLifetime},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.AdvertiseDefaultRoute]\n    ${AdvertiseDefaultRoute},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [uint32]\n    ${CurrentHopLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.ForceArpNdWolPattern]\n    ${ForceArpNdWolPattern},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.DirectedMacWolPattern]\n    ${DirectedMacWolPattern},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.EcnMarking]\n    ${EcnMarking},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.Dhcp]\n    ${Dhcp},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.AutomaticMetric]\n    ${AutomaticMetric},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${AsJob},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [switch]\n    ${PassThru})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('InterfaceIndex') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${InterfaceIndex})\n        $__cmdletization_queryBuilder.FilterByProperty('InterfaceIndex', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('InterfaceAlias') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${InterfaceAlias})\n        $__cmdletization_queryBuilder.FilterByProperty('InterfaceAlias', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AddressFamily') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${AddressFamily})\n        $__cmdletization_queryBuilder.FilterByProperty('AddressFamily', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('ReachableTime') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${ReachableTime})\n        $__cmdletization_queryBuilder.FilterByProperty('ReachableTime', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('NeighborDiscoverySupported') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${NeighborDiscoverySupported})\n        $__cmdletization_queryBuilder.FilterByProperty('NeighborDiscoverySupported', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('CompartmentId') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${CompartmentId})\n        $__cmdletization_queryBuilder.FilterByProperty('CompartmentId', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})\n    }\n    if ($PSBoundParameters.ContainsKey('IncludeAllCompartments') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('IncludeAllCompartments', ${IncludeAllCompartments})\n    }\n\n\n    $__cmdletization_methodParameters = [System.Collections.Generic.List[Microsoft.PowerShell.Cmdletization.MethodParameter]]::new()\n    switch -exact ($PSCmdlet.ParameterSetName) { \n        { @('ByName', 'InputObject (cdxml)') -contains $_ } {\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('Forwarding')) {\n            [object]$__cmdletization_value = ${Forwarding}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Forwarding'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.Forwarding'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Forwarding'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.Forwarding'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('ClampMss')) {\n            [object]$__cmdletization_value = ${ClampMss}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ClampMss'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.ClampMss'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'ClampMss'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.ClampMss'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('Advertising')) {\n            [object]$__cmdletization_value = ${Advertising}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Advertising'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.Advertising'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'Advertising'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.Advertising'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('NlMtuBytes')) {\n            [object]$__cmdletization_value = ${NlMtuBytes}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NlMtu'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NlMtu'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('InterfaceMetric')) {\n            [object]$__cmdletization_value = ${InterfaceMetric}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InterfaceMetric'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'InterfaceMetric'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('NeighborUnreachabilityDetection')) {\n            [object]$__cmdletization_value = ${NeighborUnreachabilityDetection}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NeighborUnreachabilityDetection'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.NeighborUnreachabilityDetection'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'NeighborUnreachabilityDetection'; ParameterType = 'Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.NeighborUnreachabilityDetection'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('BaseReachableTimeMs')) {\n            [object]$__cmdletization_value = ${BaseReachableTimeMs}\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'BaseReachableTime'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_value; IsValuePresent = $true}\n          } else {\n            $__cmdletization_methodParameter = [Microsoft.PowerShell.Cmdletization.MethodParameter]@{Name = 'BaseReachableTime'; ParameterType = 'System.UInt32'; Bindings = 'In'; Value = $__cmdletization_defaultValue; IsValuePresent = $__cmdletization_defaultValueIsPresent}\n          }\n          $__cmdletization_methodParameters.Add($__cmdletization_methodParameter)\n\n          [object]$__cmdletization_defaultValue = $null\n          [object]$__cmdletization_defaultValueIsPresent = $false\n          if ($PSBoundParameters.ContainsKey('RetransmitTimeMs')) {\n            [object]$__cmdletization_value = ${RetransmitTimeMs}\n\n4dca8ab6-1b7e-428c-b093-0c7121237ba5",
    "_time": "2025-08-06T17:25:05.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:44729",
    "_indextime": "1754501105",
    "_serial": "90",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "244",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:25:05 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4104\nEventType=3\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Warning\nRecordNumber=655\nKeywords=None\nTaskCategory=Execute a Remote Command\nOpCode=On create calls\nMessage=Splunk could not get the description for this event. Either the component that raises this event is not installed on your local computer or the installation is corrupt.\n\nFormatMessage error:\n\nGot the following information from this event: \n\n     $__cmdletization_queryBuilder.FilterByProperty('BaseReachableTime', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('ReachableTimeMs') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${ReachableTimeMs})\n        $__cmdletization_queryBuilder.FilterByProperty('ReachableTime', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('RetransmitTimeMs') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${RetransmitTimeMs})\n        $__cmdletization_queryBuilder.FilterByProperty('RetransmitTime', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DadTransmits') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DadTransmits})\n        $__cmdletization_queryBuilder.FilterByProperty('DadTransmits', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DadRetransmitTimeMs') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DadRetransmitTimeMs})\n        $__cmdletization_queryBuilder.FilterByProperty('DadRetransmitTime', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('RouterDiscovery') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${RouterDiscovery})\n        $__cmdletization_queryBuilder.FilterByProperty('RouterDiscovery', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('ManagedAddressConfiguration') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${ManagedAddressConfiguration})\n        $__cmdletization_queryBuilder.FilterByProperty('ManagedAddressConfiguration', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('OtherStatefulConfiguration') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${OtherStatefulConfiguration})\n        $__cmdletization_queryBuilder.FilterByProperty('OtherStatefulConfiguration', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('WeakHostSend') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${WeakHostSend})\n        $__cmdletization_queryBuilder.FilterByProperty('WeakHostSend', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('WeakHostReceive') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${WeakHostReceive})\n        $__cmdletization_queryBuilder.FilterByProperty('WeakHostReceive', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('IgnoreDefaultRoutes') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${IgnoreDefaultRoutes})\n        $__cmdletization_queryBuilder.FilterByProperty('IgnoreDefaultRoutes', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AdvertisedRouterLifetime') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${AdvertisedRouterLifetime})\n        $__cmdletization_queryBuilder.FilterByProperty('AdvertisedRouterLifetime', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AdvertiseDefaultRoute') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${AdvertiseDefaultRoute})\n        $__cmdletization_queryBuilder.FilterByProperty('AdvertiseDefaultRoute', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('CurrentHopLimit') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${CurrentHopLimit})\n        $__cmdletization_queryBuilder.FilterByProperty('CurrentHopLimit', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('ForceArpNdWolPattern') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${ForceArpNdWolPattern})\n        $__cmdletization_queryBuilder.FilterByProperty('ForceArpNdWolPattern', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('DirectedMacWolPattern') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${DirectedMacWolPattern})\n        $__cmdletization_queryBuilder.FilterByProperty('DirectedMacWolPattern', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('EcnMarking') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${EcnMarking})\n        $__cmdletization_queryBuilder.FilterByProperty('EcnMarking', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Dhcp') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Dhcp})\n        $__cmdletization_queryBuilder.FilterByProperty('Dhcp', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('ConnectionState') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${ConnectionState})\n        $__cmdletization_queryBuilder.FilterByProperty('ConnectionState', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AutomaticMetric') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${AutomaticMetric})\n        $__cmdletization_queryBuilder.FilterByProperty('AutomaticMetric', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('NeighborDiscoverySupported') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${NeighborDiscoverySupported})\n        $__cmdletization_queryBuilder.FilterByProperty('NeighborDiscoverySupported', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('CompartmentId') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${CompartmentId})\n        $__cmdletization_queryBuilder.FilterByProperty('CompartmentId', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedRoute') -and (@('ByRoute') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedRoute}, 'MSFT_NetIPInterfaceRoute', 'Dependent', 'Antecedent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedIPAddress') -and (@('ByIPAddress') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedIPAddress}, 'MSFT_NetIPInterfaceIPAddress', 'Dependent', 'Antecedent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedNeighbor') -and (@('ByNeighbor') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedNeighbor}, 'MSFT_NetIPInterfaceNeighbor', 'Dependent', 'Antecedent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AssociatedAdapter') -and (@('ByAdapter') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.FilterByAssociatedInstance(${AssociatedAdapter}, 'MSFT_NetIPInterfaceAdapter', 'Dependent', 'Antecedent', 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('PolicyStore') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('PolicyStore', ${PolicyStore})\n    }\n    if ($PSBoundParameters.ContainsKey('IncludeAllCompartments') -and (@('ByName', 'ByRoute', 'ByIPAddress', 'ByNeighbor', 'ByAdapter') -contains $PSCmdlet.ParameterSetName )) {\n    $__cmdletization_queryBuilder.AddQueryOption('IncludeAllCompartments', ${IncludeAllCompartments})\n    }\n\n\n    $__cmdletization_objectModelWrapper.ProcessRecord($__cmdletization_queryBuilder)\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP MSFT_NetIPInterface.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Get-NetIPInterface' -Alias '*'\n        \n\nfunction Set-NetIPInterface\n{\n    [CmdletBinding(DefaultParameterSetName='ByName', SupportsShouldProcess=$true, ConfirmImpact='Medium', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/StandardCimv2/MSFT_NetIPInterface')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByName', ValueFromPipelineByPropertyName=$true)]\n    [Alias('ifIndex')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${InterfaceIndex},\n\n    [Parameter(ParameterSetName='ByName', Position=0, ValueFromPipelineByPropertyName=$true)]\n    [Alias('ifAlias')]\n    [ValidateNotNull()]\n    [string[]]\n    ${InterfaceAlias},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.AddressFamily[]]\n    ${AddressFamily},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${ReachableTime},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.NeighborDiscoverySupported[]]\n    ${NeighborDiscoverySupported},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${CompartmentId},\n\n    [Parameter(ParameterSetName='ByName')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='ByName')]\n    [switch]\n    ${IncludeAllCompartments},\n\n    [Parameter(ParameterSetName='InputObject (cdxml)', Mandatory=$true, ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#MSFT_NetIPInterface')]\n    [ValidateNotNull()]\n    [ciminstance[]]\n    ${InputObject},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.Forwarding]\n    ${Forwarding},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.ClampMss]\n    ${ClampMss},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.Advertising]\n    ${Advertising},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [uint32]\n    ${NlMtuBytes},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [uint32]\n    ${InterfaceMetric},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.NeighborUnreachabilityDetection]\n    ${NeighborUnreachabilityDetection},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('BaseReachableTime')]\n    [uint32]\n    ${BaseReachableTimeMs},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('RetransmitTime')]\n    [uint32]\n    ${RetransmitTimeMs},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [uint32]\n    ${DadTransmits},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Alias('DadRetransmitTime')]\n    [uint32]\n    ${DadRetransmitTimeMs},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.RouterDiscovery]\n    ${RouterDiscovery},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.ManagedAddressConfiguration]\n    ${ManagedAddressConfiguration},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.OtherStatefulConfiguration]\n    ${OtherStatefulConfiguration},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='InputObject (cdxml)')]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.WeakHostSend]\n    ${WeakHostSend},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSet\n4dca8ab6-1b7e-428c-b093-0c7121237ba5",
    "_time": "2025-08-06T17:25:05.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:44287",
    "_indextime": "1754501105",
    "_serial": "91",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "287",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:25:05 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4104\nEventType=3\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Warning\nRecordNumber=654\nKeywords=None\nTaskCategory=Execute a Remote Command\nOpCode=On create calls\nMessage=Splunk could not get the description for this event. Either the component that raises this event is not installed on your local computer or the installation is corrupt.\n\nFormatMessage error:\n\nGot the following information from this event: \n\n\n#requires -version 3.0\n\ntry { Microsoft.PowerShell.Core\\Set-StrictMode -Off } catch { }\n\n$script:MyModule = $MyInvocation.MyCommand.ScriptBlock.Module\n\n$script:ClassName = 'ROOT/StandardCimv2/MSFT_NetIPInterface'\n$script:ClassVersion = '1.0.0'\n$script:ModuleVersion = '1.0.0'\n$script:ObjectModelWrapper = [Microsoft.PowerShell.Cmdletization.Cim.CimCmdletAdapter]\n\n$script:PrivateData = [System.Collections.Generic.Dictionary[string,string]]::new()\n\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function @()\n        \n\nfunction __cmdletization_BindCommonParameters\n{\n    param(\n        $__cmdletization_objectModelWrapper,\n        $myPSBoundParameters\n    )       \n                \n\n        if ($myPSBoundParameters.ContainsKey('CimSession')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['CimSession'].Value = $myPSBoundParameters['CimSession'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('ThrottleLimit')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['ThrottleLimit'].Value = $myPSBoundParameters['ThrottleLimit'] \n        }\n                    \n\n        if ($myPSBoundParameters.ContainsKey('AsJob')) { \n            $__cmdletization_objectModelWrapper.PSObject.Properties['AsJob'].Value = $myPSBoundParameters['AsJob'] \n        }\n                    \n\n}\n                \n\nfunction Get-NetIPInterface\n{\n    [CmdletBinding(DefaultParameterSetName='ByName', PositionalBinding=$false)]\n    \n    [OutputType([Microsoft.Management.Infrastructure.CimInstance])]\n[OutputType('Microsoft.Management.Infrastructure.CimInstance#ROOT/StandardCimv2/MSFT_NetIPInterface')]\n\n    param(\n    \n    [Parameter(ParameterSetName='ByName', ValueFromPipelineByPropertyName=$true)]\n    [Alias('ifIndex')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${InterfaceIndex},\n\n    [Parameter(ParameterSetName='ByName', Position=0, ValueFromPipelineByPropertyName=$true)]\n    [Alias('ifAlias')]\n    [ValidateNotNull()]\n    [string[]]\n    ${InterfaceAlias},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.AddressFamily[]]\n    ${AddressFamily},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.Forwarding[]]\n    ${Forwarding},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.ClampMss[]]\n    ${ClampMss},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.Advertising[]]\n    ${Advertising},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${NlMtuBytes},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${InterfaceMetric},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.NeighborUnreachabilityDetection[]]\n    ${NeighborUnreachabilityDetection},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Alias('BaseReachableTime')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${BaseReachableTimeMs},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Alias('ReachableTime')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${ReachableTimeMs},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Alias('RetransmitTime')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${RetransmitTimeMs},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${DadTransmits},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Alias('DadRetransmitTime')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${DadRetransmitTimeMs},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.RouterDiscovery[]]\n    ${RouterDiscovery},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.ManagedAddressConfiguration[]]\n    ${ManagedAddressConfiguration},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.OtherStatefulConfiguration[]]\n    ${OtherStatefulConfiguration},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.WeakHostSend[]]\n    ${WeakHostSend},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.WeakHostReceive[]]\n    ${WeakHostReceive},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.IgnoreDefaultRoutes[]]\n    ${IgnoreDefaultRoutes},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [timespan[]]\n    ${AdvertisedRouterLifetime},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.AdvertiseDefaultRoute[]]\n    ${AdvertiseDefaultRoute},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${CurrentHopLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.ForceArpNdWolPattern[]]\n    ${ForceArpNdWolPattern},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.DirectedMacWolPattern[]]\n    ${DirectedMacWolPattern},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.EcnMarking[]]\n    ${EcnMarking},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.Dhcp[]]\n    ${Dhcp},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.ConnectionState[]]\n    ${ConnectionState},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.AutomaticMetric[]]\n    ${AutomaticMetric},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [Microsoft.PowerShell.Cmdletization.GeneratedTypes.NetIPInterface.NeighborDiscoverySupported[]]\n    ${NeighborDiscoverySupported},\n\n    [Parameter(ParameterSetName='ByName')]\n    [ValidateNotNull()]\n    [uint32[]]\n    ${CompartmentId},\n\n    [Parameter(ParameterSetName='ByRoute', ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetRoute')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedRoute},\n\n    [Parameter(ParameterSetName='ByIPAddress', ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetIPAddress')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedIPAddress},\n\n    [Parameter(ParameterSetName='ByNeighbor', ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetNeighbor')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedNeighbor},\n\n    [Parameter(ParameterSetName='ByAdapter', ValueFromPipeline=$true)]\n    [PSTypeName('Microsoft.Management.Infrastructure.CimInstance#root/standardcimv2/MSFT_NetAdapter')]\n    [ValidateNotNull()]\n    [ciminstance]\n    ${AssociatedAdapter},\n\n    [Parameter(ParameterSetName='ByName')]\n    [string]\n    ${PolicyStore},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByRoute')]\n    [Parameter(ParameterSetName='ByIPAddress')]\n    [Parameter(ParameterSetName='ByNeighbor')]\n    [Parameter(ParameterSetName='ByAdapter')]\n    [switch]\n    ${IncludeAllCompartments},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByRoute')]\n    [Parameter(ParameterSetName='ByIPAddress')]\n    [Parameter(ParameterSetName='ByNeighbor')]\n    [Parameter(ParameterSetName='ByAdapter')]\n    [Alias('Session')]\n    [ValidateNotNullOrEmpty()]\n    [CimSession[]]\n    ${CimSession},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByRoute')]\n    [Parameter(ParameterSetName='ByIPAddress')]\n    [Parameter(ParameterSetName='ByNeighbor')]\n    [Parameter(ParameterSetName='ByAdapter')]\n    [int]\n    ${ThrottleLimit},\n\n    [Parameter(ParameterSetName='ByName')]\n    [Parameter(ParameterSetName='ByRoute')]\n    [Parameter(ParameterSetName='ByIPAddress')]\n    [Parameter(ParameterSetName='ByNeighbor')]\n    [Parameter(ParameterSetName='ByAdapter')]\n    [switch]\n    ${AsJob})\n\n    DynamicParam {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper = $script:ObjectModelWrapper::new()\n                $__cmdletization_objectModelWrapper.Initialize($PSCmdlet, $script:ClassName, $script:ClassVersion, $script:ModuleVersion, $script:PrivateData)\n\n                if ($__cmdletization_objectModelWrapper -is [System.Management.Automation.IDynamicParameters])\n                {\n                    ([System.Management.Automation.IDynamicParameters]$__cmdletization_objectModelWrapper).GetDynamicParameters()\n                }\n            }\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n\n    Begin {\n        $__cmdletization_exceptionHasBeenThrown = $false\n        try \n        {\n            __cmdletization_BindCommonParameters $__cmdletization_objectModelWrapper $PSBoundParameters\n            $__cmdletization_objectModelWrapper.BeginProcessing()\n        }\n        catch\n        {\n            $__cmdletization_exceptionHasBeenThrown = $true\n            throw\n        }\n    }\n        \n\n    Process {\n        try \n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n    $__cmdletization_queryBuilder = $__cmdletization_objectModelWrapper.GetQueryBuilder()\n    if ($PSBoundParameters.ContainsKey('InterfaceIndex') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${InterfaceIndex})\n        $__cmdletization_queryBuilder.FilterByProperty('InterfaceIndex', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('InterfaceAlias') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${InterfaceAlias})\n        $__cmdletization_queryBuilder.FilterByProperty('InterfaceAlias', $__cmdletization_values, $true, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('AddressFamily') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${AddressFamily})\n        $__cmdletization_queryBuilder.FilterByProperty('AddressFamily', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Forwarding') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Forwarding})\n        $__cmdletization_queryBuilder.FilterByProperty('Forwarding', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('ClampMss') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${ClampMss})\n        $__cmdletization_queryBuilder.FilterByProperty('ClampMss', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('Advertising') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${Advertising})\n        $__cmdletization_queryBuilder.FilterByProperty('Advertising', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('NlMtuBytes') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${NlMtuBytes})\n        $__cmdletization_queryBuilder.FilterByProperty('NlMtu', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('InterfaceMetric') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${InterfaceMetric})\n        $__cmdletization_queryBuilder.FilterByProperty('InterfaceMetric', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('NeighborUnreachabilityDetection') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${NeighborUnreachabilityDetection})\n        $__cmdletization_queryBuilder.FilterByProperty('NeighborUnreachabilityDetection', $__cmdletization_values, $false, 'Default')\n    }\n    if ($PSBoundParameters.ContainsKey('BaseReachableTimeMs') -and (@('ByName') -contains $PSCmdlet.ParameterSetName )) {\n        $__cmdletization_values = @(${BaseReachableTimeMs})\n   \n4dca8ab6-1b7e-428c-b093-0c7121237ba5",
    "_time": "2025-08-06T17:25:05.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:43845",
    "_indextime": "1754501105",
    "_serial": "92",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "377",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:25:05 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=653\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Remove-NetIPAddress\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 08a20d3f-559d-4e13-aa36-d072c8224dd8\n        Host Application = powershell.exe -Command Get-NetNeighbor\n        Engine Version = 5.1.20348.3932\n        Runspace ID = 330567f1-a99e-439d-8d25-0d7203a495c9\n        Pipeline ID = 20\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 36\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:25:05.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:43804",
    "_indextime": "1754501105",
    "_serial": "93",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "39",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:25:05 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=652\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Set-NetIPAddress\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 08a20d3f-559d-4e13-aa36-d072c8224dd8\n        Host Application = powershell.exe -Command Get-NetNeighbor\n        Engine Version = 5.1.20348.3932\n        Runspace ID = 330567f1-a99e-439d-8d25-0d7203a495c9\n        Pipeline ID = 20\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 34\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:25:05.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:43763",
    "_indextime": "1754501105",
    "_serial": "94",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "39",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:25:05 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=651\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"Get-NetIPAddress\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 08a20d3f-559d-4e13-aa36-d072c8224dd8\n        Host Application = powershell.exe -Command Get-NetNeighbor\n        Engine Version = 5.1.20348.3932\n        Runspace ID = 330567f1-a99e-439d-8d25-0d7203a495c9\n        Pipeline ID = 20\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 32\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:25:05.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:43722",
    "_indextime": "1754501105",
    "_serial": "95",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "39",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:25:05 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=650\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"New-NetIPAddress\"\nParameterBinding(Export-ModuleMember): name=\"Alias\"; value=\"*\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 08a20d3f-559d-4e13-aa36-d072c8224dd8\n        Host Application = powershell.exe -Command Get-NetNeighbor\n        Engine Version = 5.1.20348.3932\n        Runspace ID = 330567f1-a99e-439d-8d25-0d7203a495c9\n        Pipeline ID = 20\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 30\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:25:05.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:43681",
    "_indextime": "1754501105",
    "_serial": "96",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "39",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:25:05 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=649\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Export-ModuleMember): \"Export-ModuleMember\"\nParameterBinding(Export-ModuleMember): name=\"Function\"; value=\"\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 08a20d3f-559d-4e13-aa36-d072c8224dd8\n        Host Application = powershell.exe -Command Get-NetNeighbor\n        Engine Version = 5.1.20348.3932\n        Runspace ID = 330567f1-a99e-439d-8d25-0d7203a495c9\n        Pipeline ID = 20\n        Command Name = Export-ModuleMember\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 28\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:25:05.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:43643",
    "_indextime": "1754501105",
    "_serial": "97",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "38",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:25:05 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=648\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Set-StrictMode): \"Set-StrictMode\"\nParameterBinding(Set-StrictMode): name=\"Off\"; value=\"True\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 08a20d3f-559d-4e13-aa36-d072c8224dd8\n        Host Application = powershell.exe -Command Get-NetNeighbor\n        Engine Version = 5.1.20348.3932\n        Runspace ID = 330567f1-a99e-439d-8d25-0d7203a495c9\n        Pipeline ID = 20\n        Command Name = Set-StrictMode\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 26\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:25:05.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:43605",
    "_indextime": "1754501105",
    "_serial": "98",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "38",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:25:05 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4104\nEventType=3\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Warning\nRecordNumber=647\nKeywords=None\nTaskCategory=Execute a Remote Command\nOpCode=On create calls\nMessage=Creating Scriptblock text (4 of 4):\ntrue\n            throw\n        }\n    }\n        \n\n    End {\n        try\n        {\n            if (-not $__cmdletization_exceptionHasBeenThrown)\n            {\n                $__cmdletization_objectModelWrapper.EndProcessing()\n            }\n        }\n        catch\n        {\n            throw\n        }\n    }\n\n    # .EXTERNALHELP MSFT_NetIPAddress.cdxml-Help.xml\n}\nMicrosoft.PowerShell.Core\\Export-ModuleMember -Function 'Remove-NetIPAddress' -Alias '*'\n        \n\n\nScriptBlock ID: 57e3abc0-14c9-4e73-9943-8f1478129f02\nPath:",
    "_time": "2025-08-06T17:25:05.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:43574",
    "_indextime": "1754501105",
    "_serial": "99",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "43",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:25:25 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4104\nEventType=5\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Verbose\nRecordNumber=753\nKeywords=None\nTaskCategory=Execute a Remote Command\nOpCode=On create calls\nMessage=Creating Scriptblock text (1 of 1):\n$global:?\n\nScriptBlock ID: 3383afce-be8c-4dcc-aea0-21a1f32ec021\nPath:",
    "_time": "2025-08-06T17:25:25.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:58854",
    "_indextime": "1754501126",
    "_serial": "0",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "19",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:25:25 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=752\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=Splunk could not get the description for this event. Either the component that raises this event is not installed on your local computer or the installation is corrupt.\n\nFormatMessage error:\n\nGot the following information from this event: \n\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 01514211-57d8-42ff-b2fb-8ee42196a05b\n        Host Application = powershell.exe -Command Get-Service\n        Engine Version = 5.1.20348.3932\n        Runspace ID = b1c558db-bf06-4810-a0a5-25a8fc12eeb6\n        Pipeline ID = 1\n        Command Name = \n        Command Type = Script\n        Script Name = \n        Command Path = \n        Sequence Number = 18\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\nCommandInvocation(Out-Default): \"Out-Default\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"AJRouter\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"ALG\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"AppIDSvc\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"Appinfo\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"AppMgmt\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"AppReadiness\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"AppVClient\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"AppXSvc\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"AudioEndpointBuilder\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"Audiosrv\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"AxInstSV\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"BDESVC\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"BFE\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"BITS\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"BrokerInfrastructure\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"bthserv\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"camsvc\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"CaptureService_9a530\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"cbdhsvc_9a530\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"CDPSvc\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"CDPUserSvc_9a530\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"CertPropSvc\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"ClipSVC\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"COMSysApp\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"ConsentUxUserSvc_9a530\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"CoreMessagingRegistrar\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"CredentialEnrollmentManagerUserSvc_9a530\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"CryptSvc\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"CscService\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"DcomLaunch\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"dcsvc\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"defragsvc\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"DeviceAssociationBrokerSvc_9a530\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"DeviceAssociationService\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"DeviceInstall\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"DevicePickerUserSvc_9a530\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"DevicesFlowUserSvc_9a530\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"DevQueryBroker\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"Dhcp\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"diagnosticshub.standardcollector.service\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"DiagTrack\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"DispBrokerDesktopSvc\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"DmEnrollmentSvc\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"dmwappushservice\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"Dnscache\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"DoSvc\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"dot3svc\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"DPS\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"DsmSvc\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"DsSvc\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"EapHost\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"edgeupdate\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"edgeupdatem\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"EFS\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"embeddedmode\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"EntAppSvc\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"EventLog\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"EventSystem\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"fdPHost\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"FDResPub\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"FontCache\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"FrameServer\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"FrameServerMonitor\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"gpsvc\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"GraphicsPerfSvc\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"hidserv\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"HvHost\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"IKEEXT\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"InstallService\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"iphlpsvc\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"KeyIso\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"KPSSVC\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"KtmRm\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"LanmanServer\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"LanmanWorkstation\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"lfsvc\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"LicenseManager\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"lltdsvc\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"lmhosts\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"LSM\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"MapsBroker\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"McpManagementService\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"MicrosoftEdgeElevationService\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"mpssvc\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"MSDTC\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"MSiSCSI\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"msiserver\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"NcaSvc\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"NcbService\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"Netlogon\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"Netman\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"netprofm\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"NetSetupSvc\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"NetTcpPortSharing\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"NgcCtnrSvc\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"NgcSvc\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"NlaSvc\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"nsi\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"PcaSvc\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"PerfHost\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"PimIndexMaintenanceSvc_9a530\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"pla\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"PlugPlay\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"PolicyAgent\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"Power\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"PrintNotify\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"PrintWorkflowUserSvc_9a530\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"ProfSvc\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"PushToInstall\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"QWAVE\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"RasAuto\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"RasMan\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"RdAgent\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"RemoteAccess\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"RemoteRegistry\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"RmSvc\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"RpcEptMapper\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"RpcLocator\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"RpcSs\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"RSoPProv\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"sacsvr\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"SamSs\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"SCardSvr\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"ScDeviceEnum\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"Schedule\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"SCPolicySvc\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"seclogon\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"SecurityHealthService\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"SEMgrSvc\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"SENS\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"Sense\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"SensorDataService\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"SensorService\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"SensrSvc\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"SessionEnv\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"SharedAccess\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"ShellHWDetection\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"shpamsvc\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"smphost\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"SNMPTRAP\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"SplunkForwarder\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"Spooler\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"sppsvc\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"SSDPSRV\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"ssh-agent\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"SstpSvc\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"StateRepository\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"StiSvc\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"StorSvc\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"svsvc\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"swprv\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"SysMain\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"Sysmon\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"SystemEventsBroker\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"TabletInputService\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"tapisrv\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"TermService\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"Themes\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"TieringEngineService\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"TimeBrokerSvc\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"TokenBroker\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"TrkWks\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"TrustedInstaller\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"tzautoupdate\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"UALSVC\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"UdkUserSvc_9a530\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"UevAgentService\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"UmRdpService\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"UnistoreSvc_9a530\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"upnphost\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"UserDataSvc_9a530\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"UserManager\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"UsoSvc\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"VaultSvc\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"vds\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"vmicguestinterface\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"vmicheartbeat\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"vmickvpexchange\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"vmicshutdown\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"vmictimesync\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"vmicvmsession\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"vmicvss\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"VSS\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"W32Time\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"WaaSMedicSvc\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"WalletService\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"WarpJITSvc\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"WbioSrvc\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"Wcmsvc\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"WdiServiceHost\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"WdiSystemHost\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"WdNisSvc\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"Wecsvc\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"WEPHOSTSVC\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"wercplsupport\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"WerSvc\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"WiaRpc\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"WinDefend\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"WindowsAzureGuestAgent\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"WinHttpAutoProxySvc\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"Winmgmt\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"WinRM\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"wisvc\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"wlidsvc\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"wmiApSrv\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"WMPNetworkSvc\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"WPDBusEnum\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"WpnService\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"WpnUserService_9a530\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"WSearch\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"wuauserv\"",
    "_time": "2025-08-06T17:25:25.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:58341",
    "_indextime": "1754501126",
    "_serial": "1",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "249",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:25:25 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=751\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Get-Service): \"Get-Service\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 01514211-57d8-42ff-b2fb-8ee42196a05b\n        Host Application = powershell.exe -Command Get-Service\n        Engine Version = 5.1.20348.3932\n        Runspace ID = b1c558db-bf06-4810-a0a5-25a8fc12eeb6\n        Pipeline ID = 1\n        Command Name = Get-Service\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 16\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:25:25.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:58306",
    "_indextime": "1754501126",
    "_serial": "2",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "37",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:25:25 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4104\nEventType=5\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Verbose\nRecordNumber=750\nKeywords=None\nTaskCategory=Execute a Remote Command\nOpCode=On create calls\nMessage=Creating Scriptblock text (1 of 1):\nGet-Service\n\nScriptBlock ID: f4c301f9-d021-4698-a4be-b20e600a301b\nPath:",
    "_time": "2025-08-06T17:25:25.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:58290",
    "_indextime": "1754501126",
    "_serial": "3",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "19",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:25:25 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=40962\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=749\nKeywords=None\nTaskCategory=PowerShell Console Startup\nOpCode=Stop\nMessage=PowerShell console is ready for user input",
    "_time": "2025-08-06T17:25:25.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:58276",
    "_indextime": "1754501126",
    "_serial": "4",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "15",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:25:25 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=53504\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=748\nKeywords=None\nTaskCategory=PowerShell Named Pipe IPC\nOpCode=Open (async)\nMessage=Windows PowerShell has started an IPC listening thread on process: 4776 in AppDomain: DefaultAppDomain.",
    "_time": "2025-08-06T17:25:25.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:58260",
    "_indextime": "1754501126",
    "_serial": "5",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "15",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:25:25 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=40961\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=747\nKeywords=None\nTaskCategory=PowerShell Console Startup\nOpCode=Start\nMessage=PowerShell console is starting up",
    "_time": "2025-08-06T17:25:25.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:58246",
    "_indextime": "1754501126",
    "_serial": "6",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "15",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:25:44 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4104\nEventType=5\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Verbose\nRecordNumber=759\nKeywords=None\nTaskCategory=Execute a Remote Command\nOpCode=On create calls\nMessage=Creating Scriptblock text (1 of 1):\n$global:?\n\nScriptBlock ID: 7d7d8444-918c-437f-b4f7-4c238097271b\nPath:",
    "_time": "2025-08-06T17:25:44.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:58967",
    "_indextime": "1754501145",
    "_serial": "0",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "19",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:25:44 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=758\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Out-Default): \"Out-Default\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = af59ab55-f2b2-4c09-aa30-dd5563141472\n        Host Application = powershell.exe -Command sc.exe query\n        Engine Version = 5.1.20348.3932\n        Runspace ID = 517c23c6-cc92-4759-9dca-f8262908e90b\n        Pipeline ID = 1\n        Command Name = \n        Command Type = Script\n        Script Name = \n        Command Path = \n        Sequence Number = 16\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:25:44.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:58932",
    "_indextime": "1754501145",
    "_serial": "1",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "37",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:25:44 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4104\nEventType=5\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Verbose\nRecordNumber=757\nKeywords=None\nTaskCategory=Execute a Remote Command\nOpCode=On create calls\nMessage=Creating Scriptblock text (1 of 1):\nsc.exe query\n\nScriptBlock ID: f0757f28-ff43-4682-afe5-d9f5be76b714\nPath:",
    "_time": "2025-08-06T17:25:44.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:58915",
    "_indextime": "1754501145",
    "_serial": "2",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "19",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:25:44 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=40962\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=756\nKeywords=None\nTaskCategory=PowerShell Console Startup\nOpCode=Stop\nMessage=PowerShell console is ready for user input",
    "_time": "2025-08-06T17:25:44.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:58901",
    "_indextime": "1754501145",
    "_serial": "3",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "15",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:25:44 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=53504\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=755\nKeywords=None\nTaskCategory=PowerShell Named Pipe IPC\nOpCode=Open (async)\nMessage=Windows PowerShell has started an IPC listening thread on process: 756 in AppDomain: DefaultAppDomain.",
    "_time": "2025-08-06T17:25:44.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:58885",
    "_indextime": "1754501145",
    "_serial": "4",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "15",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:25:44 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=40961\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=754\nKeywords=None\nTaskCategory=PowerShell Console Startup\nOpCode=Start\nMessage=PowerShell console is starting up",
    "_time": "2025-08-06T17:25:44.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:58871",
    "_indextime": "1754501145",
    "_serial": "5",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "15",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:26:03 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4104\nEventType=5\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Verbose\nRecordNumber=765\nKeywords=None\nTaskCategory=Execute a Remote Command\nOpCode=On create calls\nMessage=Creating Scriptblock text (1 of 1):\n$global:?\n\nScriptBlock ID: 49fb3ded-2ff8-42d5-a555-7bb58a9299db\nPath:",
    "_time": "2025-08-06T17:26:03.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:59079",
    "_indextime": "1754501164",
    "_serial": "0",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "19",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:26:03 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=764\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Out-Default): \"Out-Default\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = aab804c8-bc22-4368-a1c0-7a5438c930d3\n        Host Application = powershell.exe -Command net start\n        Engine Version = 5.1.20348.3932\n        Runspace ID = 1bbbed80-2521-4a71-8d4f-c2e38a2f95f6\n        Pipeline ID = 1\n        Command Name = \n        Command Type = Script\n        Script Name = \n        Command Path = \n        Sequence Number = 16\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:26:03.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:59044",
    "_indextime": "1754501164",
    "_serial": "1",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "37",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:26:03 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4104\nEventType=5\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Verbose\nRecordNumber=763\nKeywords=None\nTaskCategory=Execute a Remote Command\nOpCode=On create calls\nMessage=Creating Scriptblock text (1 of 1):\nnet start\n\nScriptBlock ID: 365f0e98-e258-4bca-92a6-d7d4f8faaf0e\nPath:",
    "_time": "2025-08-06T17:26:03.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:59028",
    "_indextime": "1754501164",
    "_serial": "2",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "19",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:26:03 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=40962\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=762\nKeywords=None\nTaskCategory=PowerShell Console Startup\nOpCode=Stop\nMessage=PowerShell console is ready for user input",
    "_time": "2025-08-06T17:26:03.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:59014",
    "_indextime": "1754501164",
    "_serial": "3",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "15",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:26:03 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=53504\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=761\nKeywords=None\nTaskCategory=PowerShell Named Pipe IPC\nOpCode=Open (async)\nMessage=Windows PowerShell has started an IPC listening thread on process: 8004 in AppDomain: DefaultAppDomain.",
    "_time": "2025-08-06T17:26:03.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:58998",
    "_indextime": "1754501164",
    "_serial": "4",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "15",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:26:03 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=40961\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=760\nKeywords=None\nTaskCategory=PowerShell Console Startup\nOpCode=Start\nMessage=PowerShell console is starting up",
    "_time": "2025-08-06T17:26:03.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:58984",
    "_indextime": "1754501164",
    "_serial": "5",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "15",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:26:37 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4104\nEventType=5\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Verbose\nRecordNumber=771\nKeywords=None\nTaskCategory=Execute a Remote Command\nOpCode=On create calls\nMessage=Creating Scriptblock text (1 of 1):\n$global:?\n\nScriptBlock ID: e49c7002-a90a-45cc-9074-a29a6c17364c\nPath:",
    "_time": "2025-08-06T17:26:37.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:59192",
    "_indextime": "1754501198",
    "_serial": "0",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "19",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:26:37 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=770\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Out-Default): \"Out-Default\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 5bfb76f1-d25e-466c-aa38-92a2965673bf\n        Host Application = powershell.exe -Command schtasks /query\n        Engine Version = 5.1.20348.3932\n        Runspace ID = 93309299-4ffb-40bc-95fe-636ed23ee0eb\n        Pipeline ID = 1\n        Command Name = \n        Command Type = Script\n        Script Name = \n        Command Path = \n        Sequence Number = 16\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:26:37.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:59157",
    "_indextime": "1754501198",
    "_serial": "1",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "37",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:26:37 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4104\nEventType=5\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Verbose\nRecordNumber=769\nKeywords=None\nTaskCategory=Execute a Remote Command\nOpCode=On create calls\nMessage=Creating Scriptblock text (1 of 1):\nschtasks /query\n\nScriptBlock ID: a3d34756-4399-46cb-9058-3e316fde144f\nPath:",
    "_time": "2025-08-06T17:26:37.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:59140",
    "_indextime": "1754501198",
    "_serial": "2",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "19",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:26:37 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=40962\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=768\nKeywords=None\nTaskCategory=PowerShell Console Startup\nOpCode=Stop\nMessage=PowerShell console is ready for user input",
    "_time": "2025-08-06T17:26:37.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:59126",
    "_indextime": "1754501198",
    "_serial": "3",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "15",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:26:37 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=53504\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=767\nKeywords=None\nTaskCategory=PowerShell Named Pipe IPC\nOpCode=Open (async)\nMessage=Windows PowerShell has started an IPC listening thread on process: 1320 in AppDomain: DefaultAppDomain.",
    "_time": "2025-08-06T17:26:37.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:59110",
    "_indextime": "1754501198",
    "_serial": "4",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "15",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:26:37 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=40961\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=766\nKeywords=None\nTaskCategory=PowerShell Console Startup\nOpCode=Start\nMessage=PowerShell console is starting up",
    "_time": "2025-08-06T17:26:37.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:59096",
    "_indextime": "1754501198",
    "_serial": "5",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "15",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:26:54 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4104\nEventType=5\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Verbose\nRecordNumber=777\nKeywords=None\nTaskCategory=Execute a Remote Command\nOpCode=On create calls\nMessage=Creating Scriptblock text (1 of 1):\n$global:?\n\nScriptBlock ID: 771bf396-31f2-43cc-8a71-4db44ce5ec1a\nPath:",
    "_time": "2025-08-06T17:26:54.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:59308",
    "_indextime": "1754501215",
    "_serial": "0",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "19",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:26:54 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=776\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Out-Default): \"Out-Default\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = dee5b485-fde9-4123-bfc1-a57555224cee\n        Host Application = powershell.exe -Command REG QUERY HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\n        Engine Version = 5.1.20348.3932\n        Runspace ID = fd00630a-ce0c-43be-93f4-60ca6a911092\n        Pipeline ID = 1\n        Command Name = \n        Command Type = Script\n        Script Name = \n        Command Path = \n        Sequence Number = 16\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:26:54.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:59271",
    "_indextime": "1754501215",
    "_serial": "1",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "37",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:26:54 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4104\nEventType=5\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Verbose\nRecordNumber=775\nKeywords=None\nTaskCategory=Execute a Remote Command\nOpCode=On create calls\nMessage=Creating Scriptblock text (1 of 1):\nREG QUERY HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\n\nScriptBlock ID: 2ea53e48-84e2-40bc-8fc1-d466f15d0598\nPath:",
    "_time": "2025-08-06T17:26:54.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:59253",
    "_indextime": "1754501215",
    "_serial": "2",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "19",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:26:54 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=40962\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=774\nKeywords=None\nTaskCategory=PowerShell Console Startup\nOpCode=Stop\nMessage=PowerShell console is ready for user input",
    "_time": "2025-08-06T17:26:54.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:59239",
    "_indextime": "1754501215",
    "_serial": "3",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "15",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:26:54 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=53504\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=773\nKeywords=None\nTaskCategory=PowerShell Named Pipe IPC\nOpCode=Open (async)\nMessage=Windows PowerShell has started an IPC listening thread on process: 1256 in AppDomain: DefaultAppDomain.",
    "_time": "2025-08-06T17:26:54.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:59223",
    "_indextime": "1754501215",
    "_serial": "4",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "15",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:26:54 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=40961\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=772\nKeywords=None\nTaskCategory=PowerShell Console Startup\nOpCode=Start\nMessage=PowerShell console is starting up",
    "_time": "2025-08-06T17:26:54.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:59209",
    "_indextime": "1754501215",
    "_serial": "5",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "15",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:27:11 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4104\nEventType=5\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Verbose\nRecordNumber=783\nKeywords=None\nTaskCategory=Execute a Remote Command\nOpCode=On create calls\nMessage=Creating Scriptblock text (1 of 1):\n$global:?\n\nScriptBlock ID: d2756bad-cb51-4a67-ac42-03c91c425762\nPath:",
    "_time": "2025-08-06T17:27:11.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:59423",
    "_indextime": "1754501232",
    "_serial": "0",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "19",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:27:11 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=782\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Out-Default): \"Out-Default\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = 8e669abc-902c-4a61-9ee7-07ad8d0d2da7\n        Host Application = powershell.exe -Command findstr 127.0.0.1 C:\\Windows\\System32\\drivers\\etc\\hosts\n        Engine Version = 5.1.20348.3932\n        Runspace ID = fd380e02-e954-4956-b3b1-e79f6dc13394\n        Pipeline ID = 1\n        Command Name = \n        Command Type = Script\n        Script Name = \n        Command Path = \n        Sequence Number = 16\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:27:11.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:59387",
    "_indextime": "1754501232",
    "_serial": "1",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "37",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:27:11 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4104\nEventType=5\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Verbose\nRecordNumber=781\nKeywords=None\nTaskCategory=Execute a Remote Command\nOpCode=On create calls\nMessage=Creating Scriptblock text (1 of 1):\nfindstr 127.0.0.1 C:\\Windows\\System32\\drivers\\etc\\hosts\n\nScriptBlock ID: f812cdfc-f6eb-4d1e-b5ae-a35d4ce253cd\nPath:",
    "_time": "2025-08-06T17:27:11.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:59369",
    "_indextime": "1754501232",
    "_serial": "2",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "19",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:27:11 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=40962\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=780\nKeywords=None\nTaskCategory=PowerShell Console Startup\nOpCode=Stop\nMessage=PowerShell console is ready for user input",
    "_time": "2025-08-06T17:27:11.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:59355",
    "_indextime": "1754501232",
    "_serial": "3",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "15",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:27:11 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=53504\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=779\nKeywords=None\nTaskCategory=PowerShell Named Pipe IPC\nOpCode=Open (async)\nMessage=Windows PowerShell has started an IPC listening thread on process: 2312 in AppDomain: DefaultAppDomain.",
    "_time": "2025-08-06T17:27:11.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:59339",
    "_indextime": "1754501232",
    "_serial": "4",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "15",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:27:11 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=40961\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=778\nKeywords=None\nTaskCategory=PowerShell Console Startup\nOpCode=Start\nMessage=PowerShell console is starting up",
    "_time": "2025-08-06T17:27:11.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:59325",
    "_indextime": "1754501232",
    "_serial": "5",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "15",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:27:29 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4104\nEventType=5\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Verbose\nRecordNumber=790\nKeywords=None\nTaskCategory=Execute a Remote Command\nOpCode=On create calls\nMessage=Creating Scriptblock text (1 of 1):\n$global:?\n\nScriptBlock ID: 26bec6cf-50f5-42a0-ac56-23755e3a6fd2\nPath:",
    "_time": "2025-08-06T17:27:29.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:59588",
    "_indextime": "1754501249",
    "_serial": "0",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "19",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:27:29 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=789\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Out-Default): \"Out-Default\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"C:\\Users\\Public\\Documents\\sentinel_test_file.txt\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = e2d5d81a-affc-4178-971a-4ff40b350789\n        Host Application = powershell.exe -Command New-Item -Path C:\\Users\\Public\\Documents\\ -Name sentinel_test_file.txt -ItemType File\n        Engine Version = 5.1.20348.3932\n        Runspace ID = 043699eb-a23d-433f-b7eb-d968d7414d1f\n        Pipeline ID = 1\n        Command Name = \n        Command Type = Script\n        Script Name = \n        Command Path = \n        Sequence Number = 18\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:27:29.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:59547",
    "_indextime": "1754501249",
    "_serial": "1",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "38",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:27:29 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=788\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(New-Item): \"New-Item\"\nParameterBinding(New-Item): name=\"Path\"; value=\"C:\\Users\\Public\\Documents\\\"\nParameterBinding(New-Item): name=\"Name\"; value=\"sentinel_test_file.txt\"\nParameterBinding(New-Item): name=\"ItemType\"; value=\"File\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = e2d5d81a-affc-4178-971a-4ff40b350789\n        Host Application = powershell.exe -Command New-Item -Path C:\\Users\\Public\\Documents\\ -Name sentinel_test_file.txt -ItemType File\n        Engine Version = 5.1.20348.3932\n        Runspace ID = 043699eb-a23d-433f-b7eb-d968d7414d1f\n        Pipeline ID = 1\n        Command Name = New-Item\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 16\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:27:29.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:59503",
    "_indextime": "1754501249",
    "_serial": "2",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "40",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:27:29 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4104\nEventType=5\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Verbose\nRecordNumber=787\nKeywords=None\nTaskCategory=Execute a Remote Command\nOpCode=On create calls\nMessage=Creating Scriptblock text (1 of 1):\nNew-Item -Path C:\\Users\\Public\\Documents\\ -Name sentinel_test_file.txt -ItemType File\n\nScriptBlock ID: 3cd01c88-d543-4841-b5ac-94a9d2aa2da1\nPath:",
    "_time": "2025-08-06T17:27:29.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:59484",
    "_indextime": "1754501249",
    "_serial": "3",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "19",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:27:29 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=40962\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=786\nKeywords=None\nTaskCategory=PowerShell Console Startup\nOpCode=Stop\nMessage=PowerShell console is ready for user input",
    "_time": "2025-08-06T17:27:29.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:59470",
    "_indextime": "1754501249",
    "_serial": "4",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "15",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:27:29 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=53504\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=785\nKeywords=None\nTaskCategory=PowerShell Named Pipe IPC\nOpCode=Open (async)\nMessage=Windows PowerShell has started an IPC listening thread on process: 7492 in AppDomain: DefaultAppDomain.",
    "_time": "2025-08-06T17:27:29.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:59454",
    "_indextime": "1754501249",
    "_serial": "5",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "15",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:27:28 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=40961\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=784\nKeywords=None\nTaskCategory=PowerShell Console Startup\nOpCode=Start\nMessage=PowerShell console is starting up",
    "_time": "2025-08-06T17:27:28.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:59440",
    "_indextime": "1754501249",
    "_serial": "6",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "15",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:27:46 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4104\nEventType=5\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Verbose\nRecordNumber=805\nKeywords=None\nTaskCategory=Execute a Remote Command\nOpCode=On create calls\nMessage=Creating Scriptblock text (1 of 1):\n$global:?\n\nScriptBlock ID: ab1d4b98-c3d9-4f25-891b-ed0452809ff0\nPath:",
    "_time": "2025-08-06T17:27:46.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:59988",
    "_indextime": "1754501267",
    "_serial": "0",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "19",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:27:46 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=804\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Out-Default): \"Out-Default\"\nParameterBinding(Out-Default): name=\"InputObject\"; value=\"A positional parameter cannot be found that accepts argument 'entry'.\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = de691252-a0fe-492c-aa41-33f22e9d5f90\n        Host Application = powershell.exe -Command Add-Content -Path C:\\Users\\Public\\Documents\\sentinel_test_log.log -Value log entry 1\n        Engine Version = 5.1.20348.3932\n        Runspace ID = 8d2d130d-2f1f-4a32-ac89-1a7765d56a5d\n        Pipeline ID = 1\n        Command Name = \n        Command Type = Script\n        Script Name = \n        Command Path = \n        Sequence Number = 26\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:27:46.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:59947",
    "_indextime": "1754501267",
    "_serial": "1",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "38",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:27:46 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=803\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Set-StrictMode): \"Set-StrictMode\"\nParameterBinding(Set-StrictMode): name=\"Version\"; value=\"1.0\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = de691252-a0fe-492c-aa41-33f22e9d5f90\n        Host Application = powershell.exe -Command Add-Content -Path C:\\Users\\Public\\Documents\\sentinel_test_log.log -Value log entry 1\n        Engine Version = 5.1.20348.3932\n        Runspace ID = 8d2d130d-2f1f-4a32-ac89-1a7765d56a5d\n        Pipeline ID = 1\n        Command Name = Set-StrictMode\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 24\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:27:46.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:59907",
    "_indextime": "1754501267",
    "_serial": "2",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "38",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:27:46 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4104\nEventType=5\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Verbose\nRecordNumber=802\nKeywords=None\nTaskCategory=Execute a Remote Command\nOpCode=On create calls\nMessage=Creating Scriptblock text (1 of 1):\n{ Set-StrictMode -Version 1; $_.OriginInfo }\n\nScriptBlock ID: 3cc6d7b5-581d-45c6-850e-09c847d7a55b\nPath:",
    "_time": "2025-08-06T17:27:46.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:59889",
    "_indextime": "1754501267",
    "_serial": "3",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "19",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:27:46 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=801\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Set-StrictMode): \"Set-StrictMode\"\nParameterBinding(Set-StrictMode): name=\"Version\"; value=\"1.0\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = de691252-a0fe-492c-aa41-33f22e9d5f90\n        Host Application = powershell.exe -Command Add-Content -Path C:\\Users\\Public\\Documents\\sentinel_test_log.log -Value log entry 1\n        Engine Version = 5.1.20348.3932\n        Runspace ID = 8d2d130d-2f1f-4a32-ac89-1a7765d56a5d\n        Pipeline ID = 1\n        Command Name = Set-StrictMode\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 22\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:27:46.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:59849",
    "_indextime": "1754501267",
    "_serial": "4",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "38",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:27:46 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4104\nEventType=5\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Verbose\nRecordNumber=800\nKeywords=None\nTaskCategory=Execute a Remote Command\nOpCode=On create calls\nMessage=Creating Scriptblock text (1 of 1):\n{ Set-StrictMode -Version 1; $_.ErrorCategory_Message }\n\nScriptBlock ID: 8ca446aa-ed37-4f61-924c-47b9995bc2ab\nPath:",
    "_time": "2025-08-06T17:27:46.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:59831",
    "_indextime": "1754501267",
    "_serial": "5",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "19",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:27:46 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=799\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Set-StrictMode): \"Set-StrictMode\"\nParameterBinding(Set-StrictMode): name=\"Version\"; value=\"1.0\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = de691252-a0fe-492c-aa41-33f22e9d5f90\n        Host Application = powershell.exe -Command Add-Content -Path C:\\Users\\Public\\Documents\\sentinel_test_log.log -Value log entry 1\n        Engine Version = 5.1.20348.3932\n        Runspace ID = 8d2d130d-2f1f-4a32-ac89-1a7765d56a5d\n        Pipeline ID = 1\n        Command Name = Set-StrictMode\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 20\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:27:46.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:59791",
    "_indextime": "1754501267",
    "_serial": "6",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "38",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:27:46 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4104\nEventType=5\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Verbose\nRecordNumber=798\nKeywords=None\nTaskCategory=Execute a Remote Command\nOpCode=On create calls\nMessage=Creating Scriptblock text (1 of 1):\n{ Set-StrictMode -Version 1; $this.Exception.InnerException.PSMessageDetails }\n\nScriptBlock ID: 53db81cd-f6ad-4e7f-912e-6110d4f30553\nPath:",
    "_time": "2025-08-06T17:27:46.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:59772",
    "_indextime": "1754501267",
    "_serial": "7",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "19",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:27:46 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=797\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Set-StrictMode): \"Set-StrictMode\"\nParameterBinding(Set-StrictMode): name=\"Version\"; value=\"1.0\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = de691252-a0fe-492c-aa41-33f22e9d5f90\n        Host Application = powershell.exe -Command Add-Content -Path C:\\Users\\Public\\Documents\\sentinel_test_log.log -Value log entry 1\n        Engine Version = 5.1.20348.3932\n        Runspace ID = 8d2d130d-2f1f-4a32-ac89-1a7765d56a5d\n        Pipeline ID = 1\n        Command Name = Set-StrictMode\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 18\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:27:46.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:59732",
    "_indextime": "1754501267",
    "_serial": "8",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "38",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:27:46 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4104\nEventType=5\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Verbose\nRecordNumber=796\nKeywords=None\nTaskCategory=Execute a Remote Command\nOpCode=On create calls\nMessage=Creating Scriptblock text (1 of 1):\n{ Set-StrictMode -Version 1; $_.PSMessageDetails }\n\nScriptBlock ID: 5c7b121a-378b-410a-891b-ed820c4c5847\nPath:",
    "_time": "2025-08-06T17:27:46.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:59714",
    "_indextime": "1754501267",
    "_serial": "9",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "19",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:27:46 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4103\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=795\nKeywords=None\nTaskCategory=Executing Pipeline\nOpCode=To be used when operation is just executing a method\nMessage=CommandInvocation(Add-Content): \"Add-Content\"\nParameterBinding(Add-Content): name=\"Path\"; value=\"C:\\Users\\Public\\Documents\\sentinel_test_log.log\"\nParameterBinding(Add-Content): name=\"Value\"; value=\"log\"\nTerminatingError(Add-Content): \"A positional parameter cannot be found that accepts argument 'entry'.\"\n\n\nContext:\n        Severity = Informational\n        Host Name = ConsoleHost\n        Host Version = 5.1.20348.3932\n        Host ID = de691252-a0fe-492c-aa41-33f22e9d5f90\n        Host Application = powershell.exe -Command Add-Content -Path C:\\Users\\Public\\Documents\\sentinel_test_log.log -Value log entry 1\n        Engine Version = 5.1.20348.3932\n        Runspace ID = 8d2d130d-2f1f-4a32-ac89-1a7765d56a5d\n        Pipeline ID = 1\n        Command Name = Add-Content\n        Command Type = Cmdlet\n        Script Name = \n        Command Path = \n        Sequence Number = 16\n        User = POWERSHELLSENTI\\lab_admin\n        Connected User = \n        Shell ID = Microsoft.PowerShell\n\n\nUser Data:",
    "_time": "2025-08-06T17:27:46.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:59668",
    "_indextime": "1754501267",
    "_serial": "10",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "40",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:27:46 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=4104\nEventType=5\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Verbose\nRecordNumber=794\nKeywords=None\nTaskCategory=Execute a Remote Command\nOpCode=On create calls\nMessage=Creating Scriptblock text (1 of 1):\nAdd-Content -Path C:\\Users\\Public\\Documents\\sentinel_test_log.log -Value log entry 1\n\nScriptBlock ID: 88cc80a0-a3db-4697-bc38-b1f9c1e9d842\nPath:",
    "_time": "2025-08-06T17:27:46.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:59649",
    "_indextime": "1754501267",
    "_serial": "11",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "19",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:27:46 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=40962\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=793\nKeywords=None\nTaskCategory=PowerShell Console Startup\nOpCode=Stop\nMessage=PowerShell console is ready for user input",
    "_time": "2025-08-06T17:27:46.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:59635",
    "_indextime": "1754501267",
    "_serial": "12",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "15",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:27:46 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=53504\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=792\nKeywords=None\nTaskCategory=PowerShell Named Pipe IPC\nOpCode=Open (async)\nMessage=Windows PowerShell has started an IPC listening thread on process: 2504 in AppDomain: DefaultAppDomain.",
    "_time": "2025-08-06T17:27:46.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:59619",
    "_indextime": "1754501266",
    "_serial": "13",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "15",
    "splunk_server": "PS-DEV-01"
  },
  {
    "_raw": "08/06/2025 05:27:46 PM\nLogName=Microsoft-Windows-PowerShell/Operational\nEventCode=40961\nEventType=4\nComputerName=PS-VICTIM-01.powershellsentinel.local\nUser=NOT_TRANSLATED\nSid=S-1-5-21-3587967245-3585281529-945259784-500\nSidType=0\nSourceName=Microsoft-Windows-PowerShell\nType=Information\nRecordNumber=791\nKeywords=None\nTaskCategory=PowerShell Console Startup\nOpCode=Start\nMessage=PowerShell console is starting up",
    "_time": "2025-08-06T17:27:46.000+00:00",
    "source": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "_bkt": "main~3~D9137144-2BA4-49FB-A605-EB695929BB1A",
    "_cd": "3:59605",
    "_indextime": "1754501266",
    "_serial": "14",
    "_si": [
      "PS-DEV-01",
      "main"
    ],
    "_sourcetype": "WinEventLog:Microsoft-Windows-PowerShell/Operational",
    "host": "PS-VICTIM-01",
    "index": "main",
    "linecount": "15",
    "splunk_server": "PS-DEV-01"
  }
]